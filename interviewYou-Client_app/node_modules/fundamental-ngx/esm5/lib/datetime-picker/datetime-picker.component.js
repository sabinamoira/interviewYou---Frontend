/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostListener, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { TimeComponent } from '../time/time.component';
import { DateTimeFormatParser } from './format/datetime-parser';
import { CalendarComponent } from '../calendar/calendar.component';
import { FdDatetime } from './models/fd-datetime';
/**
 * The datetime picker component is an opinionated composition of the fd-popover,
 * fd-calendar and fd-time components to accomplish the UI pattern for picking a date and time.
 */
var DatetimePickerComponent = /** @class */ (function () {
    /** @hidden */
    function DatetimePickerComponent(elRef, changeDetRef, dateTimeAdapter) {
        this.elRef = elRef;
        this.changeDetRef = changeDetRef;
        this.dateTimeAdapter = dateTimeAdapter;
        /**
         * @hidden Date of the input field. Internal use.
         * For programmatic selection, use two-way binding on the date input.
         */
        this.inputFieldDate = null;
        /**
         * @hidden The Time object which interacts with the inner Time component. Internal use.
         */
        this.isInvalidDateInput = false;
        /**
         * @hidden The Time object which interacts with the inner Time component. Internal use.
         */
        this.time = { hour: 0, minute: 0, second: 0 };
        /**
         * Placeholder for the inner input element.
         */
        this.placeholder = 'mm/dd/yyyy, hh:mm:ss am';
        /**
         * Whether the component should be in compact mode.
         */
        this.compact = false;
        /**
         *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,
         *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
         */
        this.placement = 'bottom-start';
        /**
         * Whether the time component should be meridian (am/pm).
         */
        this.meridian = true;
        /**
         * Whether the time component shows spinners for changing the time.
         */
        this.spinners = true;
        /**
         * Whether the time component shows seconds.
         */
        this.displaySeconds = true;
        /**
         * Whether the time component shows minutes.
         */
        this.displayMinutes = true;
        /**
         * Whether the time component shows hours.
         */
        this.displayHours = true;
        /**
         * Whether to perform visual validation on the picker input.
         */
        this.useValidation = true;
        /**
         * Current selected date. Two-way binding is supported.
         */
        this.date = FdDatetime.getToday();
        /**
         * Whether the popover is open. Two-way binding is supported.
         */
        this.isOpen = false;
        /**
         * The disableFunction for the calendar.
         */
        this.startingDayOfWeek = 1;
        /**
         * Actually shown active view one of 'day' | 'month' | 'year' in calendar component
         */
        this.activeView = 'day';
        /**
         * Aria label for the datetime picker input.
         */
        this.datetimeInputLabel = 'Datetime input';
        /**
         * Aria label for the button to show/hide the calendar.
         */
        this.displayDatetimeToggleLabel = 'Display calendar toggle';
        /**
         * Whether a null input is considered valid.
         */
        this.allowNull = true;
        /**
         * Event thrown every time calendar active view is changed
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Event emitted when the date changes. This can be a time or day change.
         */
        this.dateChange = new EventEmitter();
        /**
         * Event emitted when the day changes from the calendar.
         */
        this.calendarChange = new EventEmitter();
        /**
         * Event emitted when the time changes from the time component.
         */
        this.timeChange = new EventEmitter();
        /**
         * Event emitted when popover closes.
         */
        this.onClose = new EventEmitter();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @param {?} selected
         * @return {?}
         */
        function (selected) {
        });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        /**
         * Function used to disable certain dates in the calendar.
         * @param fdDate FdDate
         */
        this.disableFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to disable certain dates in the calendar for the range start selection.
         * @param fdDate FdDate
         */
        this.disableRangeStartFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to disable certain dates in the calendar for the range end selection.
         * @param fdDate FdDate
         */
        this.disableRangeEndFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar for the range start selection.
         * @param fdDate FdDate
         */
        this.blockRangeStartFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar for the range end selection.
         * @param fdDate FdDate
         */
        this.blockRangeEndFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar.
         * @param fdDate FdDate
         */
        this.blockFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
    }
    /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     */
    /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     * @param {?} control
     * @return {?}
     */
    DatetimePickerComponent.prototype.validate = /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return this.isModelValid() ? null : {
            dateValidation: {
                valid: false
            }
        };
    };
    /** Toggles the popover. */
    /**
     * Toggles the popover.
     * @return {?}
     */
    DatetimePickerComponent.prototype.togglePopover = /**
     * Toggles the popover.
     * @return {?}
     */
    function () {
        this.onTouched();
        if (this.isOpen) {
            this.closePopover();
        }
        else {
            this.openPopover();
        }
    };
    /**
     * Method that handle calendar active view change and throws event.
     */
    /**
     * Method that handle calendar active view change and throws event.
     * @param {?} activeView
     * @return {?}
     */
    DatetimePickerComponent.prototype.handleCalendarActiveViewChange = /**
     * Method that handle calendar active view change and throws event.
     * @param {?} activeView
     * @return {?}
     */
    function (activeView) {
        this.activeViewChange.emit(activeView);
    };
    /** Opens the popover. */
    /**
     * Opens the popover.
     * @return {?}
     */
    DatetimePickerComponent.prototype.openPopover = /**
     * Opens the popover.
     * @return {?}
     */
    function () {
        if (!this.isOpen && !this.disabled) {
            this.onTouched();
            this.isOpen = true;
        }
    };
    /** Closes the popover and refresh model */
    /**
     * Closes the popover and refresh model
     * @return {?}
     */
    DatetimePickerComponent.prototype.closePopover = /**
     * Closes the popover and refresh model
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            this.handleInputChange(this.inputFieldDate);
            this.onClose.emit();
            this.isOpen = false;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    DatetimePickerComponent.prototype.isInvalidDateInputHandler = /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.isInvalidDateInput = e;
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DatetimePickerComponent.prototype.onEscapeKeydownHandler = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.closePopover();
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    DatetimePickerComponent.prototype.onGlobalClick = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.elRef.nativeElement.contains(event.target)) {
            this.closePopover();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DatetimePickerComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.date && this.inputFieldDate !== null) {
            this.selectedDate = this.date.date;
            this.time = this.date.time;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DatetimePickerComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.dateFromInputSubscription) {
            this.dateFromInputSubscription.unsubscribe();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    DatetimePickerComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    DatetimePickerComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    DatetimePickerComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     */
    /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     * @param {?} selected
     * @return {?}
     */
    DatetimePickerComponent.prototype.writeValue = /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        if (!selected || !(selected instanceof FdDatetime)) {
            return;
        }
        this.selectedDate = selected.date;
        this.time = selected.time;
        this.date = new FdDatetime(this.selectedDate, this.time);
        if (this.isModelValid()) {
            this.calendarComponent.setCurrentlyDisplayed(this.date.date);
            this.setInput(this.date);
        }
    };
    /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected date changed.
     * If invalid time model is detected, it takes time model data from TimeComponent.
     */
    /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected date changed.
     * If invalid time model is detected, it takes time model data from TimeComponent.
     * @param {?} date
     * @return {?}
     */
    DatetimePickerComponent.prototype.handleDateChange = /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected date changed.
     * If invalid time model is detected, it takes time model data from TimeComponent.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.selectedDate = date;
        if (!this.date.isTimeValid()) {
            this.time = this.timeComponent.time;
        }
        this.date = new FdDatetime(this.selectedDate, this.time);
        this.isInvalidDateInput = !this.isModelValid();
        this.setInput(this.date);
        this.onChange(this.date);
    };
    /**
     * @hidden
     * Method that is triggered by events from time component, when there is selected time changed
     */
    /**
     * @hidden
     * Method that is triggered by events from time component, when there is selected time changed
     * @param {?} time
     * @return {?}
     */
    DatetimePickerComponent.prototype.handleTimeChange = /**
     * @hidden
     * Method that is triggered by events from time component, when there is selected time changed
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.time = time;
        this.date = new FdDatetime(this.selectedDate, this.time);
        this.isInvalidDateInput = !this.isModelValid();
        this.setInput(this.date);
        this.onChange(this.date);
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DatetimePickerComponent.prototype.focusArrowLeft = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.elRef.nativeElement.querySelector('#' + this.calendarComponent.id + '-left-arrow')) {
            this.elRef.nativeElement.querySelector('#' + this.calendarComponent.id + '-left-arrow').focus();
        }
    };
    /**
     * @hidden
     * Method, which is responsible for transforming string to datetime, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput.
     */
    /**
     * @hidden
     * Method, which is responsible for transforming string to datetime, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput.
     * @param {?} date
     * @return {?}
     */
    DatetimePickerComponent.prototype.handleInputChange = /**
     * @hidden
     * Method, which is responsible for transforming string to datetime, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var fdTimeDate = this.dateTimeAdapter.parse(date);
        this.selectedDate = fdTimeDate.date;
        this.time = fdTimeDate.time;
        this.date = new FdDatetime(this.selectedDate, this.time);
        this.isInvalidDateInput = !this.isModelValid();
        this.onChange(fdTimeDate);
        if (!this.isInvalidDateInput) {
            this.calendarComponent.setCurrentlyDisplayed(fdTimeDate.date);
        }
        if (!date && this.allowNull) {
            this.isInvalidDateInput = false;
            this.date = FdDatetime.getToday();
            this.selectedDate = this.date.date;
            this.time = this.date.time;
            this.calendarComponent.setCurrentlyDisplayed(this.date.date);
            this.onChange(null);
        }
        else if (!this.allowNull) {
            this.isInvalidDateInput = true;
        }
    };
    /** Method that provides information if model selected date/dates have properly types and are valid */
    /**
     * Method that provides information if model selected date/dates have properly types and are valid
     * @return {?}
     */
    DatetimePickerComponent.prototype.isModelValid = /**
     * Method that provides information if model selected date/dates have properly types and are valid
     * @return {?}
     */
    function () {
        return this.date &&
            this.date instanceof FdDatetime &&
            this.date.isDateValid() && this.date.isTimeValid();
    };
    /**
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    DatetimePickerComponent.prototype.setInput = /**
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    function (fdDateTime) {
        this.inputFieldDate = this.dateTimeAdapter.format(fdDateTime);
        this.changeDetRef.detectChanges();
    };
    DatetimePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-datetime-picker',
                    template: "<div class=\"fd-datetime\">\n    <fd-popover [(isOpen)]=\"isOpen\"\n                (isOpenChange)=\"handleInputChange(dateTimePicker.value)\"\n                [closeOnOutsideClick]=\"false\"\n                [closeOnEscapeKey]=\"false\"\n                [triggers]=\"[]\"\n                [disabled]=\"disabled\"\n                [placement]=\"placement\">\n        <fd-popover-control>\n            <div class=\"fd-input-group fd-input-group--after\"\n                 [ngClass]=\"{'fd-input-group--compact' : compact}\">\n                <input type=\"text\"\n                       #dateTimePicker\n                       [attr.aria-label]=\"datetimeInputLabel\"\n                       [(ngModel)]=\"inputFieldDate\"\n                       [placeholder]=\"placeholder\"\n                       (keyup.enter)=\"handleInputChange(dateTimePicker.value)\"\n                       (click)=\"openPopover()\"\n                       [ngClass]=\"{ 'fd-input--compact': compact, 'is-invalid': isInvalidDateInput && useValidation }\"\n                       [disabled]=\"disabled\">\n                <span class=\"fd-input-group__addon fd-input-group__addon--after fd-input-group__addon--button\">\n                    <button class=\"fd-popover__control fd-button--icon fd-button--light sap-icon--date-time\"\n                            (click)=\"togglePopover()\" [attr.aria-label]=\"displayDatetimeToggleLabel\"\n                            [attr.aria-expanded]=\"isOpen\" type=\"button\" [disabled]=\"disabled\"></button>\n                </span>\n            </div>\n        </fd-popover-control>\n        <fd-popover-body\n            [attr.aria-expanded]=\"isOpen\"\n            [attr.aria-hidden]=\"!isOpen\"\n            [style.display]=\"'block'\">\n            <div class=\"fd-datetime__container\">\n                <fd-calendar calType=\"single\"\n                             [activeView]=\"activeView\"\n                             (activeViewChange)=\"handleCalendarActiveViewChange($event)\"\n                             [disableFunction]=\"disableFunction ? disableFunction : null\"\n                             [blockFunction]=\"blockFunction ? blockFunction : null\"\n                             [disableRangeStartFunction]=\"disableRangeStartFunction ? disableRangeStartFunction : null\"\n                             [disableRangeEndFunction]=\"disableRangeEndFunction ? disableRangeEndFunction : null\"\n                             [blockRangeStartFunction]=\"blockRangeStartFunction ? blockRangeStartFunction : null\"\n                             [blockRangeEndFunction]=\"blockRangeEndFunction ? blockRangeEndFunction : null\"\n                             [selectedDate]=\"selectedDate\"\n                             (selectedDateChange)=\"handleDateChange($event)\"\n                             (isValidDateChange)=\"isInvalidDateInputHandler($event)\"\n                             [escapeFocusFunction]=\"null\"\n                             [startingDayOfWeek]=\"startingDayOfWeek\"></fd-calendar>\n                <div class=\"fd-datetime__separator\"></div>\n                <fd-time [disabled]=\"disabled\"\n                         [meridian]=\"meridian\"\n                         [ngModel]=\"time\"\n                         (ngModelChange)=\"handleTimeChange($event)\"\n                         [spinners]=\"spinners\"\n                         [displaySeconds]=\"displaySeconds\"\n                         [displayMinutes]=\"displayMinutes\"\n                         [displayHours]=\"displayHours\"\n                         (focusArrowLeft)=\"focusArrowLeft()\"></fd-time>\n            </div>\n        </fd-popover-body>\n    </fd-popover>\n</div>\n",
                    host: {
                        '(blur)': 'onTouched()',
                        '[class.fd-datetime-host]': 'true'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatetimePickerComponent; })),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatetimePickerComponent; })),
                            multi: true
                        }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".fd-datetime-host{display:inline-block;width:230px}.fd-datetime-host .fd-datetime{display:block}.fd-datetime-host .fd-datetime__container{display:flex;align-items:center;margin:0 16px}.fd-datetime-host .fd-datetime__separator{background-color:#d3d3d3;width:1px;margin:42px 28px;-ms-grid-row-align:stretch;align-self:stretch}.fd-datetime-host .fd-datetime fd-popover{display:block}.fd-datetime-host .fd-datetime fd-time{width:auto}"]
                }] }
    ];
    /** @nocollapse */
    DatetimePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: DateTimeFormatParser }
    ]; };
    DatetimePickerComponent.propDecorators = {
        timeComponent: [{ type: ViewChild, args: [TimeComponent,] }],
        calendarComponent: [{ type: ViewChild, args: [CalendarComponent,] }],
        placeholder: [{ type: Input }],
        compact: [{ type: Input }],
        placement: [{ type: Input }],
        meridian: [{ type: Input }],
        disabled: [{ type: Input }],
        spinners: [{ type: Input }],
        displaySeconds: [{ type: Input }],
        displayMinutes: [{ type: Input }],
        displayHours: [{ type: Input }],
        useValidation: [{ type: Input }],
        date: [{ type: Input }],
        isOpen: [{ type: Input }],
        startingDayOfWeek: [{ type: Input }],
        activeView: [{ type: Input }],
        datetimeInputLabel: [{ type: Input }],
        displayDatetimeToggleLabel: [{ type: Input }],
        allowNull: [{ type: Input }],
        activeViewChange: [{ type: Output }],
        dateChange: [{ type: Output }],
        calendarChange: [{ type: Output }],
        timeChange: [{ type: Output }],
        onClose: [{ type: Output }],
        disableFunction: [{ type: Input }],
        disableRangeStartFunction: [{ type: Input }],
        disableRangeEndFunction: [{ type: Input }],
        blockRangeStartFunction: [{ type: Input }],
        blockRangeEndFunction: [{ type: Input }],
        blockFunction: [{ type: Input }],
        onEscapeKeydownHandler: [{ type: HostListener, args: ['document:keydown.escape', [],] }],
        onGlobalClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
    };
    return DatetimePickerComponent;
}());
export { DatetimePickerComponent };
if (false) {
    /**
     * @hidden Reference to the inner time component.
     * @type {?}
     */
    DatetimePickerComponent.prototype.timeComponent;
    /**
     * @hidden Reference to the inner calendar component.
     * @type {?}
     */
    DatetimePickerComponent.prototype.calendarComponent;
    /**
     * @hidden Date of the input field. Internal use.
     * For programmatic selection, use two-way binding on the date input.
     * @type {?}
     */
    DatetimePickerComponent.prototype.inputFieldDate;
    /**
     * @hidden The Time object which interacts with the inner Time component. Internal use.
     * @type {?}
     */
    DatetimePickerComponent.prototype.isInvalidDateInput;
    /**
     * @hidden The Time object which interacts with the inner Time component. Internal use.
     * @type {?}
     */
    DatetimePickerComponent.prototype.time;
    /**
     * @hidden The CalendarDay object which interacts with the inner Calendar component. Internal use.
     * @type {?}
     */
    DatetimePickerComponent.prototype.selectedDate;
    /**
     * Subscription of the dateFromInput.
     * @type {?}
     * @private
     */
    DatetimePickerComponent.prototype.dateFromInputSubscription;
    /**
     * Placeholder for the inner input element.
     * @type {?}
     */
    DatetimePickerComponent.prototype.placeholder;
    /**
     * Whether the component should be in compact mode.
     * @type {?}
     */
    DatetimePickerComponent.prototype.compact;
    /**
     *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,
     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
     * @type {?}
     */
    DatetimePickerComponent.prototype.placement;
    /**
     * Whether the time component should be meridian (am/pm).
     * @type {?}
     */
    DatetimePickerComponent.prototype.meridian;
    /**
     * Whether the component is disabled.
     * @type {?}
     */
    DatetimePickerComponent.prototype.disabled;
    /**
     * Whether the time component shows spinners for changing the time.
     * @type {?}
     */
    DatetimePickerComponent.prototype.spinners;
    /**
     * Whether the time component shows seconds.
     * @type {?}
     */
    DatetimePickerComponent.prototype.displaySeconds;
    /**
     * Whether the time component shows minutes.
     * @type {?}
     */
    DatetimePickerComponent.prototype.displayMinutes;
    /**
     * Whether the time component shows hours.
     * @type {?}
     */
    DatetimePickerComponent.prototype.displayHours;
    /**
     * Whether to perform visual validation on the picker input.
     * @type {?}
     */
    DatetimePickerComponent.prototype.useValidation;
    /**
     * Current selected date. Two-way binding is supported.
     * @type {?}
     */
    DatetimePickerComponent.prototype.date;
    /**
     * Whether the popover is open. Two-way binding is supported.
     * @type {?}
     */
    DatetimePickerComponent.prototype.isOpen;
    /**
     * The disableFunction for the calendar.
     * @type {?}
     */
    DatetimePickerComponent.prototype.startingDayOfWeek;
    /**
     * Actually shown active view one of 'day' | 'month' | 'year' in calendar component
     * @type {?}
     */
    DatetimePickerComponent.prototype.activeView;
    /**
     * Aria label for the datetime picker input.
     * @type {?}
     */
    DatetimePickerComponent.prototype.datetimeInputLabel;
    /**
     * Aria label for the button to show/hide the calendar.
     * @type {?}
     */
    DatetimePickerComponent.prototype.displayDatetimeToggleLabel;
    /**
     * Whether a null input is considered valid.
     * @type {?}
     */
    DatetimePickerComponent.prototype.allowNull;
    /**
     * Event thrown every time calendar active view is changed
     * @type {?}
     */
    DatetimePickerComponent.prototype.activeViewChange;
    /**
     * Event emitted when the date changes. This can be a time or day change.
     * @type {?}
     */
    DatetimePickerComponent.prototype.dateChange;
    /**
     * Event emitted when the day changes from the calendar.
     * @type {?}
     */
    DatetimePickerComponent.prototype.calendarChange;
    /**
     * Event emitted when the time changes from the time component.
     * @type {?}
     */
    DatetimePickerComponent.prototype.timeChange;
    /**
     * Event emitted when popover closes.
     * @type {?}
     */
    DatetimePickerComponent.prototype.onClose;
    /**
     * @hidden
     * @type {?}
     */
    DatetimePickerComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    DatetimePickerComponent.prototype.onTouched;
    /**
     * Function used to disable certain dates in the calendar.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatetimePickerComponent.prototype.disableFunction;
    /**
     * Function used to disable certain dates in the calendar for the range start selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatetimePickerComponent.prototype.disableRangeStartFunction;
    /**
     * Function used to disable certain dates in the calendar for the range end selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatetimePickerComponent.prototype.disableRangeEndFunction;
    /**
     * Function used to block certain dates in the calendar for the range start selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatetimePickerComponent.prototype.blockRangeStartFunction;
    /**
     * Function used to block certain dates in the calendar for the range end selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatetimePickerComponent.prototype.blockRangeEndFunction;
    /**
     * Function used to block certain dates in the calendar.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatetimePickerComponent.prototype.blockFunction;
    /**
     * @type {?}
     * @private
     */
    DatetimePickerComponent.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    DatetimePickerComponent.prototype.changeDetRef;
    /** @type {?} */
    DatetimePickerComponent.prototype.dateTimeAdapter;
}
//# sourceMappingURL=data:application/json;base64,