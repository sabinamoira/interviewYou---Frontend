/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from '@angular/core';
/**
 * The component that represents a navigation group.
 * ```html
 * <fd-side-nav>
 *    <fd-side-nav-group>
 *        <h1 fd-side-nav-title>Group Name</h1>
 *          <div fd-side-nav-list>
 *             <fd-side-nav-item>
 *                <a fd-side-nav-link [attr.href]="'#'">Link Item</a>
 *             </fd-side-nav-item>
 *          </div>>
 *    </fd-side-nav-group>
 * </fd-side-nav>
 * ```
 */
var SideNavigationSublistDirective = /** @class */ (function () {
    /** @hidden */
    function SideNavigationSublistDirective(elementRef) {
        this.elementRef = elementRef;
        this.sublistIsOpen = false;
    }
    /**
     * @param {?} sublistIsOpen
     * @return {?}
     */
    SideNavigationSublistDirective.prototype.subListIsOpenChange = /**
     * @param {?} sublistIsOpen
     * @return {?}
     */
    function (sublistIsOpen) {
        this.sublistIsOpen = sublistIsOpen;
        this.elementRef.nativeElement.setAttribute('aria-hidden', !this.sublistIsOpen);
    };
    SideNavigationSublistDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-side-nav-sublist]',
                    host: {
                        class: 'fd-side-nav__sublist'
                    }
                },] }
    ];
    /** @nocollapse */
    SideNavigationSublistDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return SideNavigationSublistDirective;
}());
export { SideNavigationSublistDirective };
if (false) {
    /** @type {?} */
    SideNavigationSublistDirective.prototype.sublistIsOpen;
    /**
     * @type {?}
     * @private
     */
    SideNavigationSublistDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZS1uYXZpZ2F0aW9uLXN1Ymxpc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZnVuZGFtZW50YWwtbmd4LyIsInNvdXJjZXMiOlsibGliL3NpZGUtbmF2aWdhdGlvbi9zaWRlLW5hdmlnYXRpb24tc3VibGlzdC9zaWRlLW5hdmlnYXRpb24tc3VibGlzdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBYSxTQUFTLEVBQUUsVUFBVSxFQUEwQyxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCekc7SUFlSSxjQUFjO0lBQ2Qsd0NBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFSbkMsa0JBQWEsR0FBWSxLQUFLLENBQUM7SUFRTyxDQUFDOzs7OztJQU52Qyw0REFBbUI7Ozs7SUFBMUIsVUFBMkIsYUFBc0I7UUFDN0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNuRixDQUFDOztnQkFiSixTQUFTLFNBQUM7O29CQUVQLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLElBQUksRUFBRTt3QkFDRixLQUFLLEVBQUUsc0JBQXNCO3FCQUNoQztpQkFDSjs7OztnQkF2QjhCLFVBQVU7O0lBa0N6QyxxQ0FBQztDQUFBLEFBakJELElBaUJDO1NBVlksOEJBQThCOzs7SUFDdkMsdURBQXNDOzs7OztJQVExQixvREFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEluamVjdCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0RmROZ3hDbGFzcyB9IGZyb20gJy4uLy4uL3V0aWxzL2Fic3RyYWN0LWZkLW5neC1jbGFzcyc7XG4vKipcbiAqIFRoZSBjb21wb25lbnQgdGhhdCByZXByZXNlbnRzIGEgbmF2aWdhdGlvbiBncm91cC5cbiAqIGBgYGh0bWxcbiAqIDxmZC1zaWRlLW5hdj5cbiAqICAgIDxmZC1zaWRlLW5hdi1ncm91cD5cbiAqICAgICAgICA8aDEgZmQtc2lkZS1uYXYtdGl0bGU+R3JvdXAgTmFtZTwvaDE+XG4gKiAgICAgICAgICA8ZGl2IGZkLXNpZGUtbmF2LWxpc3Q+XG4gKiAgICAgICAgICAgICA8ZmQtc2lkZS1uYXYtaXRlbT5cbiAqICAgICAgICAgICAgICAgIDxhIGZkLXNpZGUtbmF2LWxpbmsgW2F0dHIuaHJlZl09XCInIydcIj5MaW5rIEl0ZW08L2E+XG4gKiAgICAgICAgICAgICA8L2ZkLXNpZGUtbmF2LWl0ZW0+XG4gKiAgICAgICAgICA8L2Rpdj4+XG4gKiAgICA8L2ZkLXNpZGUtbmF2LWdyb3VwPlxuICogPC9mZC1zaWRlLW5hdj5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtc2lkZS1uYXYtc3VibGlzdF0nLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICdmZC1zaWRlLW5hdl9fc3VibGlzdCdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIFNpZGVOYXZpZ2F0aW9uU3VibGlzdERpcmVjdGl2ZSB7XG4gICAgcHVibGljIHN1Ymxpc3RJc09wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHB1YmxpYyBzdWJMaXN0SXNPcGVuQ2hhbmdlKHN1Ymxpc3RJc09wZW46IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5zdWJsaXN0SXNPcGVuID0gc3VibGlzdElzT3BlbjtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICF0aGlzLnN1Ymxpc3RJc09wZW4pO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxufVxuIl19