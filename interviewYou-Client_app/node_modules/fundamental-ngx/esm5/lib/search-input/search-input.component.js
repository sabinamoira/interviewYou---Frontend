/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, isDevMode, Output, QueryList, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MenuItemDirective } from '../menu/menu-item.directive';
/**
 * Allows users to filter through results and select.
 * Can also be customized to execute a search function.
 *
 * Supports Angular Forms.
 */
var SearchInputComponent = /** @class */ (function () {
    function SearchInputComponent() {
        /**
         * Values to be filtered in the search input.
         */
        this.dropdownValues = [];
        /**
         * Filter function. Accepts an array of objects and a search term as arguments
         * and returns a string. See search input examples for details.
         */
        this.filterFn = this.defaultFilter;
        /**
         * Whether the search input is in a shellbar *
         */
        this.inShellbar = false;
        /**
         * Icon to display in the right-side button.
         */
        this.glyph = 'search';
        /**
         * Max height of the popover. Any overflowing elements will be accessible through scrolling.
         */
        this.maxHeight = '200px';
        /**
         * Whether the search input should be displayed in compact mode.
         */
        this.compact = false;
        /**
         * Whether the matching string should be highlighted during filtration.
         */
        this.highlighting = true;
        /**
         * Whether the popover should close when a user selects a result.
         */
        this.closeOnSelect = true;
        /**
         * Whether the input field should be populated with the result picked by the user.
         */
        this.fillOnSelect = true;
        /**
         * Display function. Accepts an object of the same type as the
         * items passed to dropdownValues as argument, and outputs a string.
         * An arrow function can be used to access the *this* keyword in the calling component.
         * See search input examples for details.
         */
        this.displayFn = this.defaultDisplay;
        /**
         * Event emitted when an item is clicked. Use *$event* to retrieve it.
         */
        this.itemClicked = new EventEmitter();
        /**
         * @hidden
         */
        this.displayedValues = [];
        /**
         * @hidden
         */
        this.isOpen = false;
        /**
         * @hidden
         */
        this.searchInputClass = true;
        /**
         * @hidden
         */
        this.shellBarClass = this.inShellbar;
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    SearchInputComponent.prototype.onInputKeydownHandler = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.code === 'Enter' && this.searchFunction) {
            this.searchFunction();
        }
        else if (event.code === 'ArrowDown') {
            event.preventDefault();
            if (this.menuItems && this.menuItems.first) {
                this.menuItems.first.itemEl.nativeElement.children[0].focus();
            }
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    SearchInputComponent.prototype.onInputKeyupHandler = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.inputText && this.inputText.length) {
            this.isOpen = true;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @param {?=} term
     * @return {?}
     */
    SearchInputComponent.prototype.onMenuKeydownHandler = /**
     * @hidden
     * @param {?} event
     * @param {?=} term
     * @return {?}
     */
    function (event, term) {
        var _this = this;
        if (event.code === 'Enter' && term) {
            this.handleClickActions(term);
            this.itemClicked.emit({ item: term, index: this.dropdownValues.indexOf(term) });
        }
        else if (event.code === 'ArrowDown') {
            event.preventDefault();
            /** @type {?} */
            var foundItem_1 = false;
            /** @type {?} */
            var menuItemsArray_1 = this.menuItems.toArray();
            menuItemsArray_1.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                if (document.activeElement === item.itemEl.nativeElement.children[0] && !foundItem_1) {
                    if (menuItemsArray_1[index + 1]) {
                        menuItemsArray_1[index + 1].itemEl.nativeElement.children[0].focus();
                    }
                    foundItem_1 = true;
                }
            }));
        }
        else if (event.code === 'ArrowUp') {
            event.preventDefault();
            /** @type {?} */
            var foundItem_2 = false;
            /** @type {?} */
            var menuItemsArray_2 = this.menuItems.toArray();
            menuItemsArray_2.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                if (!foundItem_2) {
                    if (document.activeElement === item.itemEl.nativeElement.children[0] && index === 0) {
                        _this.searchInputElement.nativeElement.focus();
                        foundItem_2 = true;
                    }
                    else if (document.activeElement === item.itemEl.nativeElement.children[0]) {
                        if (menuItemsArray_2[index - 1]) {
                            menuItemsArray_2[index - 1].itemEl.nativeElement.children[0].focus();
                        }
                        foundItem_2 = true;
                    }
                }
            }));
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @param {?} term
     * @return {?}
     */
    SearchInputComponent.prototype.onMenuClickHandler = /**
     * @hidden
     * @param {?} event
     * @param {?} term
     * @return {?}
     */
    function (event, term) {
        if (term) {
            this.handleClickActions(term);
            this.itemClicked.emit({ item: term, index: this.dropdownValues.indexOf(term) });
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    SearchInputComponent.prototype.shellbarSearchInputClicked = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
    };
    Object.defineProperty(SearchInputComponent.prototype, "inputText", {
        /** Get the input text of the input. */
        get: /**
         * Get the input text of the input.
         * @return {?}
         */
        function () {
            return this.inputTextValue;
        },
        /** Set the input text of the input. */
        set: /**
         * Set the input text of the input.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.inputTextValue = value;
            this.onChange(value);
            this.onTouched();
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    SearchInputComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputTextValue = value;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    SearchInputComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    SearchInputComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    SearchInputComponent.prototype.handleClickActions = /**
     * @private
     * @param {?} term
     * @return {?}
     */
    function (term) {
        if (this.closeOnSelect) {
            this.isOpen = false;
        }
        if (this.fillOnSelect) {
            this.inputText = this.displayFn(term);
            this.handleSearchTermChange();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    SearchInputComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.dropdownValues) {
            this.displayedValues = this.dropdownValues;
        }
        if (isDevMode()) {
            console.warn('Search Input is deprecated. Please use Combobox instead. Visit the fundamental-ngx wiki for more information.');
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    SearchInputComponent.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {
            if (this.inputText) {
                this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);
            }
            else {
                this.displayedValues = this.dropdownValues;
            }
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    SearchInputComponent.prototype.handleSearchTermChange = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    SearchInputComponent.prototype.defaultDisplay = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str;
    };
    /**
     * @private
     * @param {?} contentArray
     * @param {?} searchTerm
     * @return {?}
     */
    SearchInputComponent.prototype.defaultFilter = /**
     * @private
     * @param {?} contentArray
     * @param {?} searchTerm
     * @return {?}
     */
    function (contentArray, searchTerm) {
        var _this = this;
        /** @type {?} */
        var searchLower = searchTerm.toLocaleLowerCase();
        return contentArray.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item) {
                return _this.displayFn(item).toLocaleLowerCase().includes(searchLower);
            }
        }));
    };
    SearchInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-search-input',
                    template: "<fd-popover [(isOpen)]=\"isOpen\"\n            [fillControlMode]=\"'at-least'\"\n            [disabled]=\"disabled\"\n            class=\"fd-search-input-popover-custom\"\n            [ngClass]=\"{'fd-popover-body--display-none': displayedValues && !displayedValues.length}\">\n    <fd-popover-control>\n        <div *ngIf=\"!inShellbar\" class=\"fd-combobox-control\">\n            <div class=\"fd-input-group fd-input-group--after\" [ngClass]=\"{'fd-input-group--compact': compact}\">\n                <input #searchInputElement type=\"text\" class=\"fd-input\" [ngClass]=\"{'fd-input--compact': compact}\"\n                       (keydown)=\"onInputKeydownHandler($event)\"\n                       (keyup)=\"onInputKeyupHandler()\"\n                       [disabled]=\"disabled\"\n                       [(ngModel)]=\"inputText\"\n                       (ngModelChange)=\"handleSearchTermChange()\"\n                       placeholder=\"{{placeholder}}\">\n                <span class=\"fd-input-group__addon fd-input-group__addon--after fd-input-group__addon--button\">\n                    <button type=\"button\" class=\"fd-button--light\" [ngClass]=\"('sap-icon--' + this.glyph)\"></button>\n                </span>\n            </div>\n        </div>\n        <div *ngIf=\"inShellbar\" class=\"fd-search-input__control\">\n            <button tabindex=\"0\" type=\"button\" class=\"fd-button--shell\" [attr.aria-expanded]=\"isOpen\"\n                    [ngClass]=\"('sap-icon--' + this.glyph)\"></button>\n            <div class=\"fd-search-input__closedcontrol\" [attr.aria-hidden]=\"!isOpen\">\n                <div class=\"fd-search-input__controlinput\" [attr.aria-expanded]=\"isOpen\" aria-haspopup=\"true\">\n                    <input type=\"text\" class=\"fd-input\"\n                           (keydown)=\"onInputKeydownHandler($event)\"\n                           (keyup)=\"onInputKeyupHandler()\"\n                           [disabled]=\"disabled\"\n                           [(ngModel)]=\"inputText\"\n                           (ngModelChange)=\"handleSearchTermChange()\"\n                           placeholder=\"{{placeholder}}\"\n                           (click)=\"shellbarSearchInputClicked($event)\">\n                </div>\n            </div>\n        </div>\n    </fd-popover-control>\n    <fd-popover-body *ngIf=\"displayedValues && displayedValues.length\">\n        <fd-menu class=\"fd-search-input-menu-overflow\"\n                 [style.maxHeight]=\"maxHeight\">\n            <ul fd-menu-list>\n                <li fd-menu-item *ngFor=\"let term of displayedValues\"\n                    (click)=\"onMenuClickHandler($event, term)\"\n                    (keydown)=\"onMenuKeydownHandler($event, term)\">\n                    <a tabindex=\"0\" [innerHTML]=\"term | displayFnPipe:displayFn | highlight:inputText:highlighting\"></a>\n                </li>\n            </ul>\n        </fd-menu>\n    </fd-popover-body>\n</fd-popover>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return SearchInputComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        class: 'fd-search-input-custom'
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".fd-search-input-custom .fd-search-input-popover-custom{display:block}.fd-search-input-custom .fd-search-input-menu-overflow{overflow:auto}"]
                }] }
    ];
    SearchInputComponent.propDecorators = {
        dropdownValues: [{ type: Input }],
        filterFn: [{ type: Input }],
        disabled: [{ type: Input }],
        placeholder: [{ type: Input }],
        inShellbar: [{ type: Input }],
        glyph: [{ type: Input }],
        maxHeight: [{ type: Input }],
        searchFunction: [{ type: Input }],
        compact: [{ type: Input }],
        highlighting: [{ type: Input }],
        closeOnSelect: [{ type: Input }],
        fillOnSelect: [{ type: Input }],
        displayFn: [{ type: Input }],
        itemClicked: [{ type: Output }],
        menuItems: [{ type: ViewChildren, args: [MenuItemDirective,] }],
        searchInputElement: [{ type: ViewChild, args: ['searchInputElement',] }],
        searchInputClass: [{ type: HostBinding, args: ['class.fd-search-input',] }],
        shellBarClass: [{ type: HostBinding, args: ['class.fd-search-input--closed',] }]
    };
    return SearchInputComponent;
}());
export { SearchInputComponent };
if (false) {
    /**
     * Values to be filtered in the search input.
     * @type {?}
     */
    SearchInputComponent.prototype.dropdownValues;
    /**
     * Filter function. Accepts an array of objects and a search term as arguments
     * and returns a string. See search input examples for details.
     * @type {?}
     */
    SearchInputComponent.prototype.filterFn;
    /**
     * Whether the search input is disabled. *
     * @type {?}
     */
    SearchInputComponent.prototype.disabled;
    /**
     * Placeholder of the search input. *
     * @type {?}
     */
    SearchInputComponent.prototype.placeholder;
    /**
     * Whether the search input is in a shellbar *
     * @type {?}
     */
    SearchInputComponent.prototype.inShellbar;
    /**
     * Icon to display in the right-side button.
     * @type {?}
     */
    SearchInputComponent.prototype.glyph;
    /**
     * Max height of the popover. Any overflowing elements will be accessible through scrolling.
     * @type {?}
     */
    SearchInputComponent.prototype.maxHeight;
    /**
     * Search function to execute when the Enter key is pressed on the main input.
     * @type {?}
     */
    SearchInputComponent.prototype.searchFunction;
    /**
     * Whether the search input should be displayed in compact mode.
     * @type {?}
     */
    SearchInputComponent.prototype.compact;
    /**
     * Whether the matching string should be highlighted during filtration.
     * @type {?}
     */
    SearchInputComponent.prototype.highlighting;
    /**
     * Whether the popover should close when a user selects a result.
     * @type {?}
     */
    SearchInputComponent.prototype.closeOnSelect;
    /**
     * Whether the input field should be populated with the result picked by the user.
     * @type {?}
     */
    SearchInputComponent.prototype.fillOnSelect;
    /**
     * Display function. Accepts an object of the same type as the
     * items passed to dropdownValues as argument, and outputs a string.
     * An arrow function can be used to access the *this* keyword in the calling component.
     * See search input examples for details.
     * @type {?}
     */
    SearchInputComponent.prototype.displayFn;
    /**
     * Event emitted when an item is clicked. Use *$event* to retrieve it.
     * @type {?}
     */
    SearchInputComponent.prototype.itemClicked;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.menuItems;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.searchInputElement;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.displayedValues;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.isOpen;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.inputTextValue;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.searchInputClass;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.shellBarClass;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    SearchInputComponent.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,