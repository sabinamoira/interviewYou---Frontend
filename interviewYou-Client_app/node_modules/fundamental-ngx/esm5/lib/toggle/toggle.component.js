/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
var toggleUniqueId = 0;
/**
 * The Toggle component is used to activate or deactivate an element.
 * It uses a visual metaphor to inform the user of the state of the toggle.
 */
var ToggleComponent = /** @class */ (function () {
    function ToggleComponent() {
        /**
         * Whether the toggle is disabled.
         */
        this.disabled = false;
        /**
         * Id for the toggle component. If omitted, a unique one is generated.
         */
        this.id = 'fd-toggle-' + toggleUniqueId++;
        /**
         * Whether the toggle is checked.
         */
        this.checked = false;
        /**
         * aria-label attribute of the inner input element.
         */
        this.ariaLabel = null;
        /**
         * aria-labelledby attribute of the inner input element.
         */
        this.ariaLabelledby = null;
        /**
         * Event fired when the state of the toggle changes.
         * *$event* can be used to retrieve the new state of the toggle.
         */
        this.checkedChange = new EventEmitter();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ToggleComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.size && this.size !== 'xs' && this.size !== 's' && this.size !== 'l') {
            this.size = null;
        }
    };
    /** Set focus on the input element. */
    /**
     * Set focus on the input element.
     * @return {?}
     */
    ToggleComponent.prototype.focus = /**
     * Set focus on the input element.
     * @return {?}
     */
    function () {
        this.inputElement.nativeElement.focus();
    };
    Object.defineProperty(ToggleComponent.prototype, "innerInputId", {
        /** Get the id of the inner input element of the toggle. */
        get: /**
         * Get the id of the inner input element of the toggle.
         * @return {?}
         */
        function () {
            return this.id + "-input";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToggleComponent.prototype, "isChecked", {
        /** Get the isChecked property of the toggle. */
        get: /**
         * Get the isChecked property of the toggle.
         * @return {?}
         */
        function () {
            return this.checked;
        },
        /** Set the isChecked property of the toggle. */
        set: /**
         * Set the isChecked property of the toggle.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.checked = value;
            this.onChange(value);
            this.onTouched();
            this.checkedChange.emit(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param value Sets the value of the *checked* property of the toggle.
     */
    /**
     * @hidden
     * @param {?} value Sets the value of the *checked* property of the toggle.
     * @return {?}
     */
    ToggleComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value Sets the value of the *checked* property of the toggle.
     * @return {?}
     */
    function (value) {
        this.checked = value;
    };
    /**
     * @hidden
     * @param fn User defined function that handles the *onChange* event of the toggle.
     */
    /**
     * @hidden
     * @param {?} fn User defined function that handles the *onChange* event of the toggle.
     * @return {?}
     */
    ToggleComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn User defined function that handles the *onChange* event of the toggle.
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @hidden
     * @param fn User defined function that handles the *onTouch* event of the toggle.
     */
    /**
     * @hidden
     * @param {?} fn User defined function that handles the *onTouch* event of the toggle.
     * @return {?}
     */
    ToggleComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn User defined function that handles the *onTouch* event of the toggle.
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @hidden
     * @param isDisabled Sets the value of the *disabled* property of the toggle.
     */
    /**
     * @hidden
     * @param {?} isDisabled Sets the value of the *disabled* property of the toggle.
     * @return {?}
     */
    ToggleComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled Sets the value of the *disabled* property of the toggle.
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    ToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-toggle',
                    template: "<label class=\"fd-form__label\" [attr.for]=\"innerInputId\">\n    <span class=\"fd-toggle fd-form__control\" [ngClass]=\"(this.size ? ('fd-toggle--' + this.size) : '')\">\n        <input #input\n               type=\"checkbox\"\n               [id]=\"innerInputId\"\n               [disabled]=\"this.disabled\"\n               [attr.aria-checked]=\"checked\"\n               [attr.aria-label]=\"this.ariaLabel\"\n               [attr.aria-labelledby]=\"this.ariaLabelledby\"\n               [(ngModel)]=\"this.isChecked\">\n        <span class=\"fd-toggle__switch\" role=\"presentation\"></span>\n    </span>\n    <ng-content></ng-content>\n</label>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ToggleComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        class: 'fd-form__item fd-form__item--check fd-toggle-custom',
                        '[attr.id]': 'id',
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".fd-toggle-custom{display:block}"]
                }] }
    ];
    ToggleComponent.propDecorators = {
        inputElement: [{ type: ViewChild, args: ['input',] }],
        size: [{ type: Input }],
        disabled: [{ type: Input }],
        id: [{ type: Input }],
        checked: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        checkedChange: [{ type: Output }]
    };
    return ToggleComponent;
}());
export { ToggleComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    ToggleComponent.prototype.inputElement;
    /**
     * The size of the toggle.
     * Can be one of the four *xs*, *s*, *l*, *error* or default.
     * @type {?}
     */
    ToggleComponent.prototype.size;
    /**
     * Whether the toggle is disabled.
     * @type {?}
     */
    ToggleComponent.prototype.disabled;
    /**
     * Id for the toggle component. If omitted, a unique one is generated.
     * @type {?}
     */
    ToggleComponent.prototype.id;
    /**
     * Whether the toggle is checked.
     * @type {?}
     */
    ToggleComponent.prototype.checked;
    /**
     * aria-label attribute of the inner input element.
     * @type {?}
     */
    ToggleComponent.prototype.ariaLabel;
    /**
     * aria-labelledby attribute of the inner input element.
     * @type {?}
     */
    ToggleComponent.prototype.ariaLabelledby;
    /**
     * Event fired when the state of the toggle changes.
     * *$event* can be used to retrieve the new state of the toggle.
     * @type {?}
     */
    ToggleComponent.prototype.checkedChange;
    /**
     * @hidden
     * @type {?}
     */
    ToggleComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    ToggleComponent.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,