/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, isDevMode } from '@angular/core';
/** @type {?} */
var DISPLAY_NUM_PAGES = 3;
/**
 * Service that is used to retrieve all the pages,
 * the number of pages,
 * and to validate the pagination object.
 */
var PaginationService = /** @class */ (function () {
    /** @hidden */
    function PaginationService() {
        /**
         * Constant representing the default number of items per page.
         */
        this.DEFAULT_ITEMS_PER_PAGE = 10;
        /**
         * @hidden
         */
        this.MORE = -1;
    }
    /**
     * Returns a number array representing the pages of the pagination object.
     * @param pagination An object of type *Pagination*.
     */
    /**
     * Returns a number array representing the pages of the pagination object.
     * @param {?} pagination An object of type *Pagination*.
     * @return {?}
     */
    PaginationService.prototype.getPages = /**
     * Returns a number array representing the pages of the pagination object.
     * @param {?} pagination An object of type *Pagination*.
     * @return {?}
     */
    function (pagination) {
        /** @type {?} */
        var pages = [];
        this.validate(pagination);
        /** @type {?} */
        var totalPages = this.getTotalPages(pagination);
        if (totalPages <= DISPLAY_NUM_PAGES) {
            for (var i = 1; i <= totalPages; i++) {
                pages.push(i);
            }
        }
        else {
            if (pagination.currentPage <= DISPLAY_NUM_PAGES) {
                for (var i = 1; i <= DISPLAY_NUM_PAGES; i++) {
                    pages.push(i);
                }
                if (totalPages !== DISPLAY_NUM_PAGES + 1) {
                    pages.push(this.MORE);
                }
                pages.push(totalPages);
            }
            else if (pagination.currentPage > totalPages - (DISPLAY_NUM_PAGES - 1)) {
                pages.push(1);
                if (totalPages !== DISPLAY_NUM_PAGES + 1) {
                    pages.push(this.MORE);
                }
                for (var i = totalPages - (DISPLAY_NUM_PAGES - 1); i <= totalPages; i++) {
                    pages.push(i);
                }
            }
            else {
                pages.push(1);
                if (totalPages !== DISPLAY_NUM_PAGES + 1) {
                    pages.push(this.MORE);
                }
                /** @type {?} */
                var buffer = Math.floor(DISPLAY_NUM_PAGES / 2);
                for (var i = pagination.currentPage - buffer; i <= pagination.currentPage + buffer; i++) {
                    pages.push(i);
                }
                if (totalPages !== DISPLAY_NUM_PAGES + 1) {
                    pages.push(this.MORE);
                }
                pages.push(totalPages);
            }
        }
        return pages;
    };
    /**
     * Retrieves the total number of pages.
     * @param pagination An object of type *Pagination*.
     */
    /**
     * Retrieves the total number of pages.
     * @param {?} pagination An object of type *Pagination*.
     * @return {?}
     */
    PaginationService.prototype.getTotalPages = /**
     * Retrieves the total number of pages.
     * @param {?} pagination An object of type *Pagination*.
     * @return {?}
     */
    function (pagination) {
        if (pagination.itemsPerPage <= 0) {
            pagination.itemsPerPage = this.DEFAULT_ITEMS_PER_PAGE;
        }
        return Math.ceil(pagination.totalItems / pagination.itemsPerPage);
    };
    /**
     * Provides validation for the pagination object.
     * @param pagination An object of type *Pagination*.
     */
    /**
     * Provides validation for the pagination object.
     * @param {?} pagination An object of type *Pagination*.
     * @return {?}
     */
    PaginationService.prototype.validate = /**
     * Provides validation for the pagination object.
     * @param {?} pagination An object of type *Pagination*.
     * @return {?}
     */
    function (pagination) {
        if (!pagination.totalItems && isDevMode()) {
            console.warn("No pages provided in the Pagination object. This warning only appears in development mode.");
        }
        if (!pagination.itemsPerPage) {
            pagination.itemsPerPage = this.DEFAULT_ITEMS_PER_PAGE;
        }
        else if (pagination.itemsPerPage < 0 && isDevMode()) {
            console.warn("itemsPerPage must be greater than zero. This warning only appears in development mode.");
        }
        if (!pagination.currentPage) {
            pagination.currentPage = 1;
        }
    };
    PaginationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PaginationService.ctorParameters = function () { return []; };
    return PaginationService;
}());
export { PaginationService };
if (false) {
    /**
     * Constant representing the default number of items per page.
     * @type {?}
     */
    PaginationService.prototype.DEFAULT_ITEMS_PER_PAGE;
    /**
     * @hidden
     * @type {?}
     */
    PaginationService.prototype.MORE;
}
//# sourceMappingURL=data:application/json;base64,