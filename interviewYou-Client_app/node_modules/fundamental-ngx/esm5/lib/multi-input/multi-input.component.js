/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PopoverComponent } from '../popover/popover.component';
/**
 * Input field with multiple selection enabled. Should be used when a user can select between a
 * limited number of pre-defined options with a filter-enabled context.
 *
 * Supports Angular Forms.
 */
var MultiInputComponent = /** @class */ (function () {
    /** @hidden */
    function MultiInputComponent(elRef) {
        this.elRef = elRef;
        /**
         * @hidden
         */
        this.multiInputClass = true;
        /**
         * Placeholder for the input field.
         */
        this.placeholder = '';
        /**
         * Whether the input is disabled.
         */
        this.disabled = false;
        /**
         * Whether the input is in compact mode.
         */
        this.compact = false;
        /**
         * Max height of the popover. Any overflowing elements will be accessible through scrolling.
         */
        this.maxHeight = '300px';
        /**
         * Icon of the button on the right of the input field.
         */
        this.glyph = 'navigation-down-arrow';
        /**
         * Values to be displayed in the unfiltered dropdown.
         */
        this.dropdownValues = [];
        /**
         * Whether the search term should be highlighted in results.
         */
        this.highlight = true;
        /**
         * Selected dropdown items.
         */
        this.selected = [];
        /**
         * Filter function. Accepts an array and a string as arguments, and outputs an array.
         * An arrow function can be used to access the *this* keyword in the calling component.
         * See multi input examples for details.
         */
        this.filterFn = this.defaultFilter;
        /**
         * Display function. Accepts an object of the same type as the
         * items passed to dropdownValues as argument, and outputs a string.
         * An arrow function can be used to access the *this* keyword in the calling component.
         * See multi input examples for details.
         */
        this.displayFn = this.defaultDisplay;
        /**
         * Aria label for the multi input body.
         */
        this.multiInputBodyLabel = 'Multi input body';
        /**
         * Preset options for the popover body width.
         * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
         * * `equal` will apply a width to the body equivalent to the width of the control.
         * * Leave blank for no effect.
         */
        this.fillControlMode = 'at-least';
        /**
         * Event emitted when the search term changes. Use *$event* to access the new term.
         */
        this.searchTermChange = new EventEmitter();
        /**
         * Event emitted when the selected items change. Use *$event* to access the new selected array.
         */
        this.selectedChange = new EventEmitter();
        /**
         * @hidden
         */
        this.displayedValues = [];
        /**
         * @hidden
         */
        this.isOpen = false;
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MultiInputComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.dropdownValues) {
            this.displayedValues = this.dropdownValues;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    MultiInputComponent.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {
            if (this.searchTerm) {
                this.displayedValues = this.filterFn(this.dropdownValues, this.searchTerm);
            }
            else {
                this.displayedValues = this.dropdownValues;
            }
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    MultiInputComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    MultiInputComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    MultiInputComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} selected
     * @return {?}
     */
    MultiInputComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        if (selected) {
            this.selected = selected;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} checked
     * @param {?} value
     * @return {?}
     */
    MultiInputComponent.prototype.handleSelect = /**
     * @hidden
     * @param {?} checked
     * @param {?} value
     * @return {?}
     */
    function (checked, value) {
        /** @type {?} */
        var previousLength = this.selected.length;
        if (checked) {
            this.selected.push(value);
        }
        else {
            this.selected.splice(this.selected.indexOf(value), 1);
        }
        // Handle popover placement update
        if ((previousLength === 0 && this.selected.length === 1) ||
            (previousLength === 1 && this.selected.length === 0)) {
            this.popoverRef.updatePopover();
        }
        this.onChange(this.selected);
        this.selectedChange.emit(this.selected);
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MultiInputComponent.prototype.handleSearchTermChange = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.searchTermChange.emit(this.searchTerm);
        this.displayedValues = this.filterFn(this.dropdownValues, this.searchTerm);
        this.popoverRef.updatePopover();
    };
    /**
     * @private
     * @param {?} contentArray
     * @param {?} searchTerm
     * @return {?}
     */
    MultiInputComponent.prototype.defaultFilter = /**
     * @private
     * @param {?} contentArray
     * @param {?} searchTerm
     * @return {?}
     */
    function (contentArray, searchTerm) {
        var _this = this;
        /** @type {?} */
        var searchLower = searchTerm.toLocaleLowerCase();
        return contentArray.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item) {
                return _this.displayFn(item).toLocaleLowerCase().includes(searchLower);
            }
        }));
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    MultiInputComponent.prototype.defaultDisplay = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    MultiInputComponent.prototype.clickHandler = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (!this.elRef.nativeElement.contains(event.target)) {
            this.isOpen = false;
        }
    };
    MultiInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-multi-input',
                    template: "<div class=\"fd-multi-input-field\">\n    <fd-popover [(isOpen)]=\"isOpen\"\n                [triggers]=\"[]\"\n                [disabled]=\"disabled\"\n                [fillControlMode]=\"fillControlMode\"\n                class=\"fd-multi-input-popover-custom\">\n        <fd-popover-control>\n            <div class=\"fd-combobox-control\"\n                 [attr.aria-label]=\"multiInputBodyLabel\"\n                 [attr.aria-expanded]=\"isOpen\">\n                <div class=\"fd-input-group fd-input-group--after\" [ngClass]=\"{'fd-input-group--compact': compact}\">\n                    <input type=\"text\" class=\"fd-input\"\n                           [ngClass]=\"{'fd-input--compact': compact}\"\n                           [placeholder]=\"placeholder\"\n                           [disabled]=\"disabled\"\n                           [(ngModel)]=\"searchTerm\"\n                           (ngModelChange)=\"handleSearchTermChange()\"\n                           (keypress)=\"isOpen = true\"\n                           (click)=\"isOpen = !isOpen\">\n                    <span class=\"fd-input-group__addon fd-input-group__addon--after\n                        fd-input-group__addon--button\">\n                            <button class=\"fd-button--light\" type=\"button\"\n                                    [ngClass]=\"('sap-icon--' + glyph)\"\n                                    [disabled]=\"disabled\"\n                                    (click)=\"isOpen = !isOpen\"></button>\n                        </span>\n                </div>\n            </div>\n        </fd-popover-control>\n        <fd-popover-body [attr.aria-hidden]=\"!isOpen\">\n            <fd-menu class=\"fd-multi-input-menu-overflow\"\n                     *ngIf=\"displayedValues && displayedValues.length\"\n                     [style.maxHeight]=\"maxHeight\">\n                <ul fd-menu-list>\n                    <li *ngFor=\"let value of displayedValues\">\n                        <label fd-menu-item>\n                            <input type=\"checkbox\" class=\"fd-checkbox\"\n                                   [ngModel]=\"selected ? selected.indexOf(value) !== -1 : false\"\n                                   (ngModelChange)=\"handleSelect($event, value)\">\n                            <span [innerHtml]=\"value | displayFnPipe:displayFn | highlight:searchTerm:highlight\"></span>\n                        </label>\n                    </li>\n                </ul>\n            </fd-menu>\n            <ng-content></ng-content>\n        </fd-popover-body>\n    </fd-popover>\n</div>\n<div class=\"fd-multi-input-tags\">\n    <fd-token *ngFor=\"let token of selected\"\n              (onCloseClick)=\"handleSelect(false, token)\"\n              class=\"fd-multi-input-token-spacing\">\n        {{token | displayFnPipe:displayFn}}\n    </fd-token>\n</div>\n\n",
                    host: {
                        '(blur)': 'onTouched()',
                        '[class.fd-multi-input-custom]': 'true'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return MultiInputComponent; })),
                            multi: true
                        }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".fd-multi-input-custom{display:block}.fd-multi-input-custom .fd-multi-input-popover-size{overflow:auto;display:block}.fd-multi-input-custom .fd-multi-input-popover-custom{display:block}.fd-multi-input-custom .fd-multi-input-menu-overflow{overflow:auto}.fd-multi-input-custom .fd-multi-input-token-spacing{margin:0 4px 4px 0}.fd-multi-input-custom .fd-multi-input-token-spacing:last-child{margin-right:0}"]
                }] }
    ];
    /** @nocollapse */
    MultiInputComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MultiInputComponent.propDecorators = {
        popoverRef: [{ type: ViewChild, args: [PopoverComponent,] }],
        multiInputClass: [{ type: HostBinding, args: ['class.fd-multi-input',] }],
        placeholder: [{ type: Input }],
        disabled: [{ type: Input }],
        compact: [{ type: Input }],
        maxHeight: [{ type: Input }],
        glyph: [{ type: Input }],
        dropdownValues: [{ type: Input }],
        searchTerm: [{ type: Input }],
        highlight: [{ type: Input }],
        selected: [{ type: Input }],
        filterFn: [{ type: Input }],
        displayFn: [{ type: Input }],
        multiInputBodyLabel: [{ type: Input }],
        fillControlMode: [{ type: Input }],
        searchTermChange: [{ type: Output }],
        selectedChange: [{ type: Output }],
        clickHandler: [{ type: HostListener, args: ['document:click', ['$event'],] }]
    };
    return MultiInputComponent;
}());
export { MultiInputComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    MultiInputComponent.prototype.popoverRef;
    /**
     * @hidden
     * @type {?}
     */
    MultiInputComponent.prototype.multiInputClass;
    /**
     * Placeholder for the input field.
     * @type {?}
     */
    MultiInputComponent.prototype.placeholder;
    /**
     * Whether the input is disabled.
     * @type {?}
     */
    MultiInputComponent.prototype.disabled;
    /**
     * Whether the input is in compact mode.
     * @type {?}
     */
    MultiInputComponent.prototype.compact;
    /**
     * Max height of the popover. Any overflowing elements will be accessible through scrolling.
     * @type {?}
     */
    MultiInputComponent.prototype.maxHeight;
    /**
     * Icon of the button on the right of the input field.
     * @type {?}
     */
    MultiInputComponent.prototype.glyph;
    /**
     * Values to be displayed in the unfiltered dropdown.
     * @type {?}
     */
    MultiInputComponent.prototype.dropdownValues;
    /**
     * Search term, or more specifically the value of the inner input field.
     * @type {?}
     */
    MultiInputComponent.prototype.searchTerm;
    /**
     * Whether the search term should be highlighted in results.
     * @type {?}
     */
    MultiInputComponent.prototype.highlight;
    /**
     * Selected dropdown items.
     * @type {?}
     */
    MultiInputComponent.prototype.selected;
    /**
     * Filter function. Accepts an array and a string as arguments, and outputs an array.
     * An arrow function can be used to access the *this* keyword in the calling component.
     * See multi input examples for details.
     * @type {?}
     */
    MultiInputComponent.prototype.filterFn;
    /**
     * Display function. Accepts an object of the same type as the
     * items passed to dropdownValues as argument, and outputs a string.
     * An arrow function can be used to access the *this* keyword in the calling component.
     * See multi input examples for details.
     * @type {?}
     */
    MultiInputComponent.prototype.displayFn;
    /**
     * Aria label for the multi input body.
     * @type {?}
     */
    MultiInputComponent.prototype.multiInputBodyLabel;
    /**
     * Preset options for the popover body width.
     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
     * * `equal` will apply a width to the body equivalent to the width of the control.
     * * Leave blank for no effect.
     * @type {?}
     */
    MultiInputComponent.prototype.fillControlMode;
    /**
     * Event emitted when the search term changes. Use *$event* to access the new term.
     * @type {?}
     */
    MultiInputComponent.prototype.searchTermChange;
    /**
     * Event emitted when the selected items change. Use *$event* to access the new selected array.
     * @type {?}
     */
    MultiInputComponent.prototype.selectedChange;
    /**
     * @hidden
     * @type {?}
     */
    MultiInputComponent.prototype.displayedValues;
    /**
     * @hidden
     * @type {?}
     */
    MultiInputComponent.prototype.isOpen;
    /**
     * @hidden
     * @type {?}
     */
    MultiInputComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    MultiInputComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MultiInputComponent.prototype.elRef;
}
//# sourceMappingURL=data:application/json;base64,