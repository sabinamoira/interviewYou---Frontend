/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Default date model used by the fundamental components.
 */
import { CalendarService } from '../calendar.service';
var FdDate = /** @class */ (function () {
    /**
     * Constructor to build a FdDate object from a year, month and day.
     * @param year The year of the date.
     * @param month The month of the date (1-12).
     * @param day The day of the date (1-31, generally).
     */
    function FdDate(year, month, day) {
        this.year = year;
        this.month = month;
        this.day = day;
    }
    /**
     * Static function to get the current date in FdDate form.
     */
    /**
     * Static function to get the current date in FdDate form.
     * @return {?}
     */
    FdDate.getToday = /**
     * Static function to get the current date in FdDate form.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tempDate = new Date();
        return new FdDate(tempDate.getFullYear(), tempDate.getMonth() + 1, tempDate.getDate());
    };
    /**
     *  Static function allowing convert js date object to FdDate model
     */
    /**
     *  Static function allowing convert js date object to FdDate model
     * @param {?} date
     * @return {?}
     */
    FdDate.getModelFromDate = /**
     *  Static function allowing convert js date object to FdDate model
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            return new FdDate(date.getFullYear(), date.getMonth() + 1, date.getDate());
        }
    };
    /**
     * Get Luxon date object converted to string from FdDate.
     */
    /**
     * Get Luxon date object converted to string from FdDate.
     * @return {?}
     */
    FdDate.prototype.toDateString = /**
     * Get Luxon date object converted to string from FdDate.
     * @return {?}
     */
    function () {
        if (this.year && this.month && this.day && this.isDateValid()) {
            return this.toDate().toDateString();
        }
        else {
            return '';
        }
    };
    /**
     * Get amount of milliseconds from 01.01.1970
     * -1 is thrown when some some of properties (day,month,year) are not defined
     */
    /**
     * Get amount of milliseconds from 01.01.1970
     * -1 is thrown when some some of properties (day,month,year) are not defined
     * @return {?}
     */
    FdDate.prototype.getTimeStamp = /**
     * Get amount of milliseconds from 01.01.1970
     * -1 is thrown when some some of properties (day,month,year) are not defined
     * @return {?}
     */
    function () {
        if (this.year && this.month && this.day) {
            return this.toDate().getTime();
        }
        else {
            return -1;
        }
    };
    /**
     * Get number of weekday ex. Sunday = 1, Monday = 2, Tuesday = 3 etc.
     * -1 is thrown when some some of properties (day,month,year) are not defined
     * Native javascript date getDay() function returns Sunday as 0, Monday as 1, etc, to it's needed to increment value
     *
     */
    /**
     * Get number of weekday ex. Sunday = 1, Monday = 2, Tuesday = 3 etc.
     * -1 is thrown when some some of properties (day,month,year) are not defined
     * Native javascript date getDay() function returns Sunday as 0, Monday as 1, etc, to it's needed to increment value
     *
     * @return {?}
     */
    FdDate.prototype.getDay = /**
     * Get number of weekday ex. Sunday = 1, Monday = 2, Tuesday = 3 etc.
     * -1 is thrown when some some of properties (day,month,year) are not defined
     * Native javascript date getDay() function returns Sunday as 0, Monday as 1, etc, to it's needed to increment value
     *
     * @return {?}
     */
    function () {
        if (this.year && this.month && this.day) {
            return this.toDate().getDay() + 1;
        }
        else {
            return -1;
        }
    };
    /** Get next day */
    /**
     * Get next day
     * @return {?}
     */
    FdDate.prototype.nextDay = /**
     * Get next day
     * @return {?}
     */
    function () {
        /** @type {?} */
        var maxDays = CalendarService.getDaysInMonth(this.month, this.year);
        /** @type {?} */
        var day = this.day >= maxDays ? 1 : this.day + 1;
        /** @type {?} */
        var month = day !== 1 ? this.month : (this.month > 11 ? 1 : this.month + 1);
        /** @type {?} */
        var year = month !== 1 ? this.year : this.year + 1;
        return new FdDate(year, month, day);
    };
    /** Get previous day  */
    /**
     * Get previous day
     * @return {?}
     */
    FdDate.prototype.previousDay = /**
     * Get previous day
     * @return {?}
     */
    function () {
        /** @type {?} */
        var maxDays = CalendarService.getDaysInMonth(this.month, this.year);
        /** @type {?} */
        var day = this.day === 1 ? maxDays : this.day - 1;
        /** @type {?} */
        var month = day !== maxDays ? this.month : (this.month === 1 ? 12 : this.month - 1);
        /** @type {?} */
        var year = month !== 12 ? this.year : this.year - 1;
        return new FdDate(year, month, day);
    };
    /**
     * Get native date object from FdDate.
     */
    /**
     * Get native date object from FdDate.
     * @return {?}
     */
    FdDate.prototype.toDate = /**
     * Get native date object from FdDate.
     * @return {?}
     */
    function () {
        return new Date(this.year, this.month - 1, this.day);
    };
    /**
     * Method that checks validity of current FdDate object.
     */
    /**
     * Method that checks validity of current FdDate object.
     * @return {?}
     */
    FdDate.prototype.isDateValid = /**
     * Method that checks validity of current FdDate object.
     * @return {?}
     */
    function () {
        if (!this) {
            return false;
        }
        if (!this.year || !this.month || !this.day) {
            return false;
        }
        if (this.year <= 0 || this.month < 1 || this.month > 12) {
            return false;
        }
        if (this.day < 1 || this.day > CalendarService.getDaysInMonth(this.month, this.year)) {
            return false;
        }
        return true;
    };
    return FdDate;
}());
export { FdDate };
if (false) {
    /**
     * The year of the date.
     * @type {?}
     */
    FdDate.prototype.year;
    /**
     * The month of the date. 1 = January, 12 = December.
     * @type {?}
     */
    FdDate.prototype.month;
    /**
     * Day of the date. Starts at 1.
     * @type {?}
     */
    FdDate.prototype.day;
}
//# sourceMappingURL=data:application/json;base64,