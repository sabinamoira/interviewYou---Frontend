/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Injectable, ApplicationRef, Injector } from '@angular/core';
import { AlertComponent } from '../alert.component';
import { AlertContainerComponent } from '../alert-utils/alert-container.component';
import { AlertConfig } from '../alert-utils/alert-config';
import { AlertInjector } from '../alert-utils/alert-injector';
import { AlertRef } from '../alert-utils/alert-ref';
/**
 * Service used to dynamically generate an alert as an overlay.
 */
var AlertService = /** @class */ (function () {
    /** @hidden */
    function AlertService(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.alerts = [];
    }
    /**
     * Returns true if there are some alerts currently open. False otherwise.
     */
    /**
     * Returns true if there are some alerts currently open. False otherwise.
     * @return {?}
     */
    AlertService.prototype.hasOpenAlerts = /**
     * Returns true if there are some alerts currently open. False otherwise.
     * @return {?}
     */
    function () {
        return this.alerts && this.alerts.length > 0;
    };
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or String.
     * @param content Content of the alert component.
     * @param alertConfig Configuration of the alert component.
     */
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or String.
     * @param {?} content Content of the alert component.
     * @param {?=} alertConfig Configuration of the alert component.
     * @return {?}
     */
    AlertService.prototype.open = /**
     * Opens an alert component with a content of type TemplateRef, Component Type or String.
     * @param {?} content Content of the alert component.
     * @param {?=} alertConfig Configuration of the alert component.
     * @return {?}
     */
    function (content, alertConfig) {
        var _this = this;
        if (alertConfig === void 0) { alertConfig = new AlertConfig(); }
        // If empty or undefined alert array, create container
        if (!this.alerts || this.alerts.length === 0) {
            this.openAlertContainer();
        }
        // Get default values from alert model
        alertConfig = Object.assign(new AlertConfig(), alertConfig);
        // Config setup
        /** @type {?} */
        var configMap = new WeakMap();
        /** @type {?} */
        var alertRef = new AlertRef();
        alertRef.data = (alertConfig ? alertConfig.data : undefined);
        configMap.set(AlertRef, alertRef);
        // Prepare new component
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent);
        /** @type {?} */
        var componentRef = componentFactory.create(new AlertInjector(this.injector, configMap));
        componentRef.location.nativeElement.style.marginTop = '10px';
        this.appRef.attachView(componentRef.hostView);
        // Subscription to close alert from ref
        /** @type {?} */
        var refSub = alertRef.afterDismissed.subscribe((/**
         * @return {?}
         */
        function () {
            _this.destroyAlertComponent(componentRef);
            refSub.unsubscribe();
        }));
        // Prepare component data items
        /** @type {?} */
        var configObj = Object.assign({}, alertConfig);
        Object.keys(configObj).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (key !== 'data') {
                componentRef.instance[key] = configObj[key];
            }
        }));
        componentRef.instance.childComponentType = content;
        // Render new component
        /** @type {?} */
        var domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));
        this.alertContainerRef.location.nativeElement.appendChild(domElem);
        // Log new component
        this.alerts.push(componentRef);
        return alertRef;
    };
    /**
     * Dismisses all service-opened alerts.
     */
    /**
     * Dismisses all service-opened alerts.
     * @return {?}
     */
    AlertService.prototype.dismissAll = /**
     * Dismisses all service-opened alerts.
     * @return {?}
     */
    function () {
        var _this = this;
        this.alerts.forEach((/**
         * @param {?} ref
         * @return {?}
         */
        function (ref) {
            _this.destroyAlertComponent(ref);
        }));
    };
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.destroyAlertComponent = /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    function (alert) {
        this.alerts[this.alerts.indexOf(alert)] = null;
        this.alerts = this.alerts.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item !== null && item !== undefined; }));
        this.appRef.detachView(alert.hostView);
        alert.destroy();
        if (this.alertContainerRef && (!this.alerts || this.alerts.length === 0)) {
            this.destroyAlertContainer();
        }
    };
    /**
     * @private
     * @return {?}
     */
    AlertService.prototype.openAlertContainer = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var factory = this.componentFactoryResolver.resolveComponentFactory(AlertContainerComponent);
        /** @type {?} */
        var componentRef = factory.create(this.injector);
        this.appRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElement = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));
        document.body.appendChild(domElement);
        this.alertContainerRef = componentRef;
    };
    /**
     * @private
     * @return {?}
     */
    AlertService.prototype.destroyAlertContainer = /**
     * @private
     * @return {?}
     */
    function () {
        this.appRef.detachView(this.alertContainerRef.hostView);
        this.alertContainerRef.destroy();
        this.alertContainerRef = undefined;
    };
    AlertService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AlertService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    return AlertService;
}());
export { AlertService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.alerts;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.alertContainerRef;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,