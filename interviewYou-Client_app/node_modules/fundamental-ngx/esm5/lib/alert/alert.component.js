/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ElementRef, ChangeDetectorRef, ViewChild, ComponentFactoryResolver, Type, ViewContainerRef, TemplateRef, Optional, Output, EventEmitter, ViewEncapsulation, HostListener } from '@angular/core';
import { AlertRef } from './alert-utils/alert-ref';
import { alertFadeNgIf } from './alert-utils/alert-animations';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
/** @type {?} */
var alertUniqueId = 0;
/**
 * The component that represents an alert. It can be only be used inline.
 * If the AlertService is used, this component is auto-generated.
 */
var AlertComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AlertComponent, _super);
    /** @hidden */
    function AlertComponent(elRef, cdRef, componentFactoryResolver, alertRef) {
        var _this = _super.call(this, elRef) || this;
        _this.elRef = elRef;
        _this.cdRef = cdRef;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.alertRef = alertRef;
        /**
         * Whether the alert is dismissible.
         */
        _this.dismissible = true;
        /**
         * Id for the alert component. If omitted, a unique one is generated.
         */
        _this.id = 'fd-alert-' + alertUniqueId++;
        /**
         * Duration of time *in milliseconds* that the alert will be visible. Set to -1 for indefinite.
         */
        _this.duration = 10000;
        /**
         * Whether the alert should stay open if the mouse is hovering over it.
         */
        _this.mousePersist = false;
        /**
         * Id of the element that labels the alert.
         */
        _this.ariaLabelledBy = null;
        /**
         * Aria label for the alert component element.
         */
        _this.ariaLabel = null;
        /**
         * Aria label for the dismiss button.
         */
        _this.dismissLabel = 'Dismiss';
        /**
         * Event fired when the alert is dismissed.
         */
        _this.onDismiss = new EventEmitter();
        /**
         * @hidden
         */
        _this.mouseInAlert = false;
        return _this;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    AlertComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.alertRef) {
            this.open();
        }
        this._setProperties();
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    AlertComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.childComponentType) {
            if (this.childComponentType instanceof Type) {
                this.loadFromComponent(this.childComponentType);
            }
            else if (this.childComponentType instanceof TemplateRef) {
                this.loadFromTemplate(this.childComponentType);
            }
            else {
                this.loadFromString(this.childComponentType);
            }
            this.cdRef.detectChanges();
        }
    };
    /**
     * Dismisses the alert. If the alert was generated via the AlertService, it is removed from the DOM.
     * Otherwise, it sets the display value to none. Fires the onDismiss event.
     *
     * @param manualDismiss Set to true to skip the dismiss animation.
     * @param reason Data to pass back to the calling component. Only usable if alert is opened using the Service.
     *
     */
    /**
     * Dismisses the alert. If the alert was generated via the AlertService, it is removed from the DOM.
     * Otherwise, it sets the display value to none. Fires the onDismiss event.
     *
     * @param {?=} reason Data to pass back to the calling component. Only usable if alert is opened using the Service.
     *
     * @param {?=} manualDismiss Set to true to skip the dismiss animation.
     * @return {?}
     */
    AlertComponent.prototype.dismiss = /**
     * Dismisses the alert. If the alert was generated via the AlertService, it is removed from the DOM.
     * Otherwise, it sets the display value to none. Fires the onDismiss event.
     *
     * @param {?=} reason Data to pass back to the calling component. Only usable if alert is opened using the Service.
     *
     * @param {?=} manualDismiss Set to true to skip the dismiss animation.
     * @return {?}
     */
    function (reason, manualDismiss) {
        if (manualDismiss === void 0) { manualDismiss = false; }
        if (manualDismiss) {
            this.elRef.nativeElement.classList.add('fd-has-display-none');
            this.elRef.nativeElement.classList.remove('fd-has-display-block');
        }
        if (this.alertRef) {
            this.alertRef.dismiss(reason);
        }
        else {
            this.elRef.nativeElement.classList.add('fd-has-display-none');
            this.elRef.nativeElement.classList.remove('fd-has-display-block');
        }
        this.onDismiss.emit();
    };
    /**
     * Opens the alert.
     */
    /**
     * Opens the alert.
     * @return {?}
     */
    AlertComponent.prototype.open = /**
     * Opens the alert.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.alertRef) {
            if (this.elRef.nativeElement.style.display === 'block') {
                return;
            }
            this.elRef.nativeElement.classList.remove('fd-has-display-none');
            this.elRef.nativeElement.classList.add('fd-has-display-block');
        }
        if (this.duration >= 0) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.mousePersist) {
                    /** @type {?} */
                    var wait_1 = (/**
                     * @return {?}
                     */
                    function () {
                        if (_this.mouseInAlert === true) {
                            setTimeout(wait_1, 500);
                        }
                        else {
                            _this.dismiss();
                        }
                    });
                    wait_1();
                }
                else {
                    _this.dismiss();
                }
            }), this.duration);
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    AlertComponent.prototype.handleAlertMouseEvent = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.type === 'mouseenter') {
            this.mouseInAlert = true;
        }
        else if (event.type === 'mouseleave') {
            this.mouseInAlert = false;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    AlertComponent.prototype._setProperties = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._addClassToElement('fd-alert');
        if (this.type) {
            this._addClassToElement('fd-alert--' + this.type);
        }
        if (this.dismissible) {
            this._addClassToElement('fd-alert--dismissible');
        }
    };
    /**
     * @private
     * @param {?} template
     * @return {?}
     */
    AlertComponent.prototype.loadFromTemplate = /**
     * @private
     * @param {?} template
     * @return {?}
     */
    function (template) {
        /** @type {?} */
        var context = {
            $implicit: this.alertRef
        };
        this.componentRef = this.containerRef.createEmbeddedView(template, context);
    };
    /**
     * @private
     * @param {?} componentType
     * @return {?}
     */
    AlertComponent.prototype.loadFromComponent = /**
     * @private
     * @param {?} componentType
     * @return {?}
     */
    function (componentType) {
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.containerRef.clear();
        this.componentRef = this.containerRef.createComponent(componentFactory);
    };
    /**
     * @private
     * @param {?} contentString
     * @return {?}
     */
    AlertComponent.prototype.loadFromString = /**
     * @private
     * @param {?} contentString
     * @return {?}
     */
    function (contentString) {
        this.containerRef.clear();
        this.message = contentString;
    };
    AlertComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-alert',
                    template: "<button class=\"fd-alert__close\"\n        *ngIf=\"dismissible\"\n        (click)=\"dismiss(undefined, true)\"\n        [attr.aria-controls]=\"id\"\n        [attr.aria-label]=\"dismissLabel\">\n</button>\n<ng-container #container>{{message}}</ng-container>\n<ng-content></ng-content>\n",
                    host: {
                        '[attr.aria-labelledby]': 'ariaLabelledBy',
                        '[attr.aria-label]': 'ariaLabel',
                        '[style.width]': 'width',
                        '[style.min-width]': 'minWidth',
                        'role': 'alert',
                        '[attr.id]': 'id',
                        '[@fadeAlertNgIf]': ''
                    },
                    animations: [
                        alertFadeNgIf
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".fd-alert{display:block}"]
                }] }
    ];
    /** @nocollapse */
    AlertComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: AlertRef, decorators: [{ type: Optional }] }
    ]; };
    AlertComponent.propDecorators = {
        containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        dismissible: [{ type: Input }],
        type: [{ type: Input }],
        id: [{ type: Input }],
        duration: [{ type: Input }],
        mousePersist: [{ type: Input }],
        ariaLabelledBy: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        dismissLabel: [{ type: Input }],
        width: [{ type: Input }],
        minWidth: [{ type: Input }],
        message: [{ type: Input }],
        onDismiss: [{ type: Output }],
        handleAlertMouseEvent: [{ type: HostListener, args: ['mouseenter', ['$event'],] }, { type: HostListener, args: ['mouseleave', ['$event'],] }]
    };
    return AlertComponent;
}(AbstractFdNgxClass));
export { AlertComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    AlertComponent.prototype.containerRef;
    /**
     * Whether the alert is dismissible.
     * @type {?}
     */
    AlertComponent.prototype.dismissible;
    /**
     * The type of the alert. Can be one of *warning*, *success*, *information*, *error* or null.
     * @type {?}
     */
    AlertComponent.prototype.type;
    /**
     * Id for the alert component. If omitted, a unique one is generated.
     * @type {?}
     */
    AlertComponent.prototype.id;
    /**
     * Duration of time *in milliseconds* that the alert will be visible. Set to -1 for indefinite.
     * @type {?}
     */
    AlertComponent.prototype.duration;
    /**
     * Whether the alert should stay open if the mouse is hovering over it.
     * @type {?}
     */
    AlertComponent.prototype.mousePersist;
    /**
     * Id of the element that labels the alert.
     * @type {?}
     */
    AlertComponent.prototype.ariaLabelledBy;
    /**
     * Aria label for the alert component element.
     * @type {?}
     */
    AlertComponent.prototype.ariaLabel;
    /**
     * Aria label for the dismiss button.
     * @type {?}
     */
    AlertComponent.prototype.dismissLabel;
    /**
     * Width of the alert.
     * @type {?}
     */
    AlertComponent.prototype.width;
    /**
     * Minimum width of the alert.
     * @type {?}
     */
    AlertComponent.prototype.minWidth;
    /**
     * Alternative way of passing in a message to the alert.
     * @type {?}
     */
    AlertComponent.prototype.message;
    /**
     * Event fired when the alert is dismissed.
     * @type {?}
     */
    AlertComponent.prototype.onDismiss;
    /**
     * @hidden
     * @type {?}
     */
    AlertComponent.prototype.mouseInAlert;
    /**
     * @hidden
     * @type {?}
     */
    AlertComponent.prototype.componentRef;
    /**
     * @hidden
     * @type {?}
     */
    AlertComponent.prototype.childComponentType;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.alertRef;
}
//# sourceMappingURL=data:application/json;base64,