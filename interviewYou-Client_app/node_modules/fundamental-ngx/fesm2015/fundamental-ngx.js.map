{"version":3,"file":"fundamental-ngx.js.map","sources":["ng://fundamental-ngx/lib/utils/abstract-fd-ngx-class.ts","ng://fundamental-ngx/lib/button/button.directive.ts","ng://fundamental-ngx/lib/button/button.module.ts","ng://fundamental-ngx/lib/icon/icon.component.ts","ng://fundamental-ngx/lib/icon/icon.module.ts","ng://fundamental-ngx/lib/action-bar/action-bar.directive.ts","ng://fundamental-ngx/lib/action-bar/action-bar-title/action-bar-title.directive.ts","ng://fundamental-ngx/lib/action-bar/action-bar-description/action-bar-description.directive.ts","ng://fundamental-ngx/lib/action-bar/action-bar-header/action-bar-header.directive.ts","ng://fundamental-ngx/lib/action-bar/action-bar-actions/action-bar-actions.directive.ts","ng://fundamental-ngx/lib/action-bar/action-bar-back/action-bar-back.directive.ts","ng://fundamental-ngx/lib/action-bar/action-bar-mobile/action-bar-mobile.directive.ts","ng://fundamental-ngx/lib/action-bar/action-bar.module.ts","ng://fundamental-ngx/lib/alert/alert-utils/alert-ref.ts","ng://fundamental-ngx/lib/alert/alert-utils/alert-animations.ts","ng://fundamental-ngx/lib/alert/alert.component.ts","ng://fundamental-ngx/lib/alert/alert-utils/alert-container.component.ts","ng://fundamental-ngx/lib/alert/alert-utils/alert-config.ts","ng://fundamental-ngx/lib/alert/alert-utils/alert-injector.ts","ng://fundamental-ngx/lib/alert/alert-service/alert.service.ts","ng://fundamental-ngx/lib/alert/alert.module.ts","ng://fundamental-ngx/lib/badge-label/badge.directive.ts","ng://fundamental-ngx/lib/badge-label/label.directive.ts","ng://fundamental-ngx/lib/badge-label/status-label.directive.ts","ng://fundamental-ngx/lib/badge-label/badge-label.module.ts","ng://fundamental-ngx/lib/breadcrumb/breadcrumb.directive.ts","ng://fundamental-ngx/lib/breadcrumb/breadcrumb-item.directive.ts","ng://fundamental-ngx/lib/breadcrumb/breadcrumb-link.directive.ts","ng://fundamental-ngx/lib/breadcrumb/breadcrumb.module.ts","ng://fundamental-ngx/lib/button-group/button-group.component.ts","ng://fundamental-ngx/lib/button-group/button-grouped.directive.ts","ng://fundamental-ngx/lib/button-group/button-group.module.ts","ng://fundamental-ngx/lib/calendar/i18n/calendar-i18n-labels.ts","ng://fundamental-ngx/lib/calendar/i18n/calendar-i18n.ts","ng://fundamental-ngx/lib/calendar/calendar-header/calendar-header.component.ts","ng://fundamental-ngx/lib/calendar/calendar.service.ts","ng://fundamental-ngx/lib/calendar/models/fd-date.ts","ng://fundamental-ngx/lib/calendar/calendar-views/calendar-day-view/calendar-day-view.component.ts","ng://fundamental-ngx/lib/calendar/calendar-views/calendar-month-view/calendar-month-view.component.ts","ng://fundamental-ngx/lib/calendar/calendar-views/calendar-year-view/calendar-year-view.component.ts","ng://fundamental-ngx/lib/calendar/calendar.component.ts","ng://fundamental-ngx/lib/calendar/calendar.module.ts","ng://fundamental-ngx/lib/popover/popover-directive/popover-container.ts","ng://fundamental-ngx/lib/popover/popover-directive/popover.directive.ts","ng://fundamental-ngx/lib/popover/popover-dropdown/popover-dropdown.component.ts","ng://fundamental-ngx/lib/popover/popover.component.ts","ng://fundamental-ngx/lib/popover/popover-control/popover-control.component.ts","ng://fundamental-ngx/lib/popover/popover-body/popover-body.component.ts","ng://fundamental-ngx/lib/popover/popover.module.ts","ng://fundamental-ngx/lib/menu/menu.component.ts","ng://fundamental-ngx/lib/menu/menu-group.component.ts","ng://fundamental-ngx/lib/menu/menu-title.directive.ts","ng://fundamental-ngx/lib/menu/menu-list.directive.ts","ng://fundamental-ngx/lib/menu/menu-item.directive.ts","ng://fundamental-ngx/lib/menu/menu.module.ts","ng://fundamental-ngx/lib/utils/pipes/displayFn.pipe.ts","ng://fundamental-ngx/lib/utils/pipes/search-highlight.pipe.ts","ng://fundamental-ngx/lib/utils/pipes/pipe.module.ts","ng://fundamental-ngx/lib/menu/menu-keyboard.service.ts","ng://fundamental-ngx/lib/combobox/combobox.component.ts","ng://fundamental-ngx/lib/combobox/combobox.module.ts","ng://fundamental-ngx/lib/date-picker/format/date-parser.ts","ng://fundamental-ngx/lib/date-picker/date-picker.component.ts","ng://fundamental-ngx/lib/date-picker/date-picker.module.ts","ng://fundamental-ngx/lib/time/time-object.ts","ng://fundamental-ngx/lib/time/i18n/time-i18n-labels.ts","ng://fundamental-ngx/lib/time/i18n/time-i18n.ts","ng://fundamental-ngx/lib/time/time.component.ts","ng://fundamental-ngx/lib/datetime-picker/models/fd-datetime.ts","ng://fundamental-ngx/lib/datetime-picker/format/datetime-parser.ts","ng://fundamental-ngx/lib/datetime-picker/datetime-picker.component.ts","ng://fundamental-ngx/lib/time/time.module.ts","ng://fundamental-ngx/lib/datetime-picker/datetime-picker.module.ts","ng://fundamental-ngx/lib/file-input/file-input.component.ts","ng://fundamental-ngx/lib/file-input/directives/file-select.directive.ts","ng://fundamental-ngx/lib/file-input/directives/file-dragndrop.directive.ts","ng://fundamental-ngx/lib/file-input/file-input.module.ts","ng://fundamental-ngx/lib/form/form-set/form-set.directive.ts","ng://fundamental-ngx/lib/form/form-control/form-control.directive.ts","ng://fundamental-ngx/lib/form/form-item/form-item.directive.ts","ng://fundamental-ngx/lib/form/form-label/form-label.directive.ts","ng://fundamental-ngx/lib/form/form-legend/form-legend.directive.ts","ng://fundamental-ngx/lib/form/form-message/form-message.component.ts","ng://fundamental-ngx/lib/form/form-group/form-group.component.ts","ng://fundamental-ngx/lib/form/form.module.ts","ng://fundamental-ngx/lib/identifier/identifier.directive.ts","ng://fundamental-ngx/lib/identifier/identifier.module.ts","ng://fundamental-ngx/lib/image/image.component.ts","ng://fundamental-ngx/lib/image/image.module.ts","ng://fundamental-ngx/lib/infinite-scroll/infinite-scroll.directive.ts","ng://fundamental-ngx/lib/infinite-scroll/infinite-scroll.module.ts","ng://fundamental-ngx/lib/inline-help/inline-help.component.ts","ng://fundamental-ngx/lib/inline-help/inline-help.module.ts","ng://fundamental-ngx/lib/input-group/input-group.component.ts","ng://fundamental-ngx/lib/input-group/input-group-number.component.ts","ng://fundamental-ngx/lib/input-group/input-group-search.component.ts","ng://fundamental-ngx/lib/input-group/input-group.module.ts","ng://fundamental-ngx/lib/list/list.directive.ts","ng://fundamental-ngx/lib/list/list-item.directive.ts","ng://fundamental-ngx/lib/list/list-checkbox.component.ts","ng://fundamental-ngx/lib/list/list-action.directive.ts","ng://fundamental-ngx/lib/list/list.module.ts","ng://fundamental-ngx/lib/loading-spinner/loading-spinner.component.ts","ng://fundamental-ngx/lib/loading-spinner/loading-spinner.module.ts","ng://fundamental-ngx/lib/modal/modal-utils/modal-ref.ts","ng://fundamental-ngx/lib/modal/modal-utils/modal-animations.ts","ng://fundamental-ngx/lib/modal/modal.component.ts","ng://fundamental-ngx/lib/modal/modal-header/modal-header.component.ts","ng://fundamental-ngx/lib/modal/modal-body/modal-body.component.ts","ng://fundamental-ngx/lib/modal/modal-footer/modal-footer.component.ts","ng://fundamental-ngx/lib/modal/modal-utils/modal-backdrop.ts","ng://fundamental-ngx/lib/modal/modal-utils/modal-container.ts","ng://fundamental-ngx/lib/modal/modal-utils/modal-config.ts","ng://fundamental-ngx/lib/modal/modal-utils/modal-injector.ts","ng://fundamental-ngx/lib/modal/modal-service/modal.service.ts","ng://fundamental-ngx/lib/modal/modal-utils/modal-directives.ts","ng://fundamental-ngx/lib/modal/modal.module.ts","ng://fundamental-ngx/lib/multi-input/multi-input.component.ts","ng://fundamental-ngx/lib/token/token.component.ts","ng://fundamental-ngx/lib/token/token.module.ts","ng://fundamental-ngx/lib/multi-input/multi-input.module.ts","ng://fundamental-ngx/lib/pagination/pagination.service.ts","ng://fundamental-ngx/lib/pagination/pagination.component.ts","ng://fundamental-ngx/lib/pagination/pagination.module.ts","ng://fundamental-ngx/lib/panel/panel.component.ts","ng://fundamental-ngx/lib/panel/panel-header/panel-header.component.ts","ng://fundamental-ngx/lib/panel/panel-head/panel-head.component.ts","ng://fundamental-ngx/lib/panel/panel-title/panel-title.directive.ts","ng://fundamental-ngx/lib/panel/panel-description/panel-description.component.ts","ng://fundamental-ngx/lib/panel/panel-actions/panel-actions.component.ts","ng://fundamental-ngx/lib/panel/panel-filters/panel-filters.component.ts","ng://fundamental-ngx/lib/panel/panel-body/panel-body.component.ts","ng://fundamental-ngx/lib/panel/panel-footer/panel-footer.component.ts","ng://fundamental-ngx/lib/panel/panel-grid/panel-grid.component.ts","ng://fundamental-ngx/lib/panel/panel.module.ts","ng://fundamental-ngx/lib/scroll-spy/scroll-spy.directive.ts","ng://fundamental-ngx/lib/scroll-spy/scroll-spy.module.ts","ng://fundamental-ngx/lib/search-input/search-input.component.ts","ng://fundamental-ngx/lib/search-input/search-input.module.ts","ng://fundamental-ngx/lib/shellbar/shellbar.component.ts","ng://fundamental-ngx/lib/shellbar/product-menu/product-menu.component.ts","ng://fundamental-ngx/lib/shellbar/shellbar-subtitle/shellbar-subtitle.component.ts","ng://fundamental-ngx/lib/shellbar/shellbar-action/shellbar-action.component.ts","ng://fundamental-ngx/lib/shellbar/shellbar-actions/shellbar-actions.component.ts","ng://fundamental-ngx/lib/shellbar/shellbar-logo/shellbar-logo.component.ts","ng://fundamental-ngx/lib/shellbar/shellbar-title/shellbar-title.component.ts","ng://fundamental-ngx/lib/shellbar/shellbar.module.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation.component.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation-group/side-navigation-group.component.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation-title/side-navigation-title.directive.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation-list/side-navigation-list.directive.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation-link/side-navigation-link.directive.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation-sublist/side-navigation-sublist.directive.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation-item/side-navigation-item.component.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation-subitem/side-navigation-subitem.directive.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation-sublink/side-navigation-sublink.directive.ts","ng://fundamental-ngx/lib/side-navigation/side-navigation.module.ts","ng://fundamental-ngx/lib/select/option/option.component.ts","ng://fundamental-ngx/lib/select/select.component.ts","ng://fundamental-ngx/lib/select/select.module.ts","ng://fundamental-ngx/lib/split-button/split-button-utils/split-button.directives.ts","ng://fundamental-ngx/lib/split-button/split-button.component.ts","ng://fundamental-ngx/lib/split-button/split-button.module.ts","ng://fundamental-ngx/lib/table/table.directive.ts","ng://fundamental-ngx/lib/table/column-sortable.directive.ts","ng://fundamental-ngx/lib/table/table-responsive-wrapper.directive.ts","ng://fundamental-ngx/lib/table/table.module.ts","ng://fundamental-ngx/lib/tabs/tab-utils/tab-directives.ts","ng://fundamental-ngx/lib/tabs/tab/tab-panel.component.ts","ng://fundamental-ngx/lib/tabs/tabs.service.ts","ng://fundamental-ngx/lib/tabs/tab-list.component.ts","ng://fundamental-ngx/lib/tabs/tab-link/tab-link.directive.ts","ng://fundamental-ngx/lib/tabs/tab-item/tab-item.directive.ts","ng://fundamental-ngx/lib/tabs/tab-nav/tab-nav.directive.ts","ng://fundamental-ngx/lib/tabs/tabs.module.ts","ng://fundamental-ngx/lib/tile/tile.component.ts","ng://fundamental-ngx/lib/tile/tile-content/tile-content.directive.ts","ng://fundamental-ngx/lib/tile/tile-title/tile-title.directive.ts","ng://fundamental-ngx/lib/tile/tile-media/tile-media.directive.ts","ng://fundamental-ngx/lib/tile/tile-actions/tile-actions.directive.ts","ng://fundamental-ngx/lib/tile/product-tile.component.ts","ng://fundamental-ngx/lib/tile/product-tile-media/product-tile-media.directive.ts","ng://fundamental-ngx/lib/tile/product-tile-content/product-tile-content.directive.ts","ng://fundamental-ngx/lib/tile/product-tile-title/product-tile-title.directive.ts","ng://fundamental-ngx/lib/tile/tile-grid/tile-grid.directive.ts","ng://fundamental-ngx/lib/tile/tile.module.ts","ng://fundamental-ngx/lib/tree/tree-child.component.ts","ng://fundamental-ngx/lib/tree/tree.component.ts","ng://fundamental-ngx/lib/tree/tree.module.ts","ng://fundamental-ngx/lib/time-picker/format/time-parser.ts","ng://fundamental-ngx/lib/time-picker/time-picker.component.ts","ng://fundamental-ngx/lib/time-picker/time-picker.module.ts","ng://fundamental-ngx/lib/toggle/toggle.component.ts","ng://fundamental-ngx/lib/toggle/toggle.module.ts","ng://fundamental-ngx/lib/localizator-editor/localization-editor.directives.ts","ng://fundamental-ngx/lib/localizator-editor/localization-editor-item/localization-editor-item.component.ts","ng://fundamental-ngx/lib/localizator-editor/localization-editor-main/localization-editor-main.component.ts","ng://fundamental-ngx/lib/localizator-editor/localization-editor.component.ts","ng://fundamental-ngx/lib/localizator-editor/localization-editor.module.ts","ng://fundamental-ngx/lib/fundamental-ngx.module.ts","ng://fundamental-ngx/lib/modal/modal-utils/modal-position.ts"],"sourcesContent":["import { ElementRef, OnChanges, OnInit, Input } from '@angular/core';\n\n/*\n This abstract class allows the user to set their own custom styles on a Fundamental NGX directive, in addition to the\n styles the library needs to add itself.\n When library styles were added through the directive's host: {'[class]'} property, any styles the user added would be\n overwritten.  By extending this class, we instead add library styles to the user's classList rather than replace them.\n */\n\n/** @hidden */\nexport abstract class AbstractFdNgxClass implements OnInit, OnChanges {\n    private _elementRef: ElementRef;\n\n    /** @hidden */\n    @Input() class; // user's custom classes\n\n    /*\n     each directive that extends this class will implement this function and populate it with one or more calls to\n     the '_addClassToElement' function, passing the style names to be added with each call\n     */\n    /** @hidden */\n    abstract _setProperties(): void;\n\n    /** @hidden */\n    _addClassToElement(className: string) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(...className.split(' '));\n    }\n\n    /** @hidden */\n    _addStyleToElement(attribute, value) {\n        (this._elementRef.nativeElement as HTMLElement).style[attribute] = value;\n    }\n\n    /** @hidden */\n    protected constructor(elementRef: ElementRef) {\n        this._elementRef = elementRef;\n        this._setProperties();\n    }\n\n    /** @hidden */\n    ngOnChanges() {\n        const classList = (this._elementRef.nativeElement as HTMLElement).classList;\n        while (classList.length > 0) {\n            classList.remove(classList.item(0));\n        }\n        if (this.class) {\n            this._addClassToElement(this.class);\n        }\n        this._setProperties();\n    }\n\n    /** @hidden */\n    ngOnInit() {\n        this._setProperties();\n    }\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Button directive, used to enhance standard HTML buttons.\n *\n * ```html\n * <button fd-button>Button Text</button>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-button]'\n})\nexport class ButtonDirective extends AbstractFdNgxClass {\n\n    /** Whether to apply compact mode to the button. */\n    @Input() compact: boolean;\n\n    /** The icon to include in the button. See the icon page for the list of icons. */\n    @Input() glyph: string;\n\n    /** The type of the button. Types include 'standard', 'positive', 'medium', and 'negative'.\n     * Leave empty for default (Action button).'*/\n    @Input() fdType: string;\n\n    /** @hidden */\n    @Input() semantic: string; // TODO: deprecated, leaving for backwards compatibility\n\n    /** Button options.  Options include 'emphasized' and 'light'. Leave empty for default.' */\n    @Input() options: string | string[];\n\n    /** @hidden */\n    @Input() size: string; // TODO: deprecated, leaving for backwards compatibility\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-button');\n        if (this.compact) {\n            this._addClassToElement('fd-button--compact');\n        }\n        if (this.glyph) {\n            this._addClassToElement('sap-icon--' + this.glyph);\n        }\n        if (this.fdType) {\n            this._addClassToElement('fd-button--' + this.fdType);\n        }\n        if (this.options) {\n            if (typeof this.options === 'string') {\n                this._addClassToElement('fd-button--' + this.options);\n            } else if (Array.isArray(this.options)) {\n                this.options.forEach(option => {\n                    if (typeof option === 'string') {\n                        this._addClassToElement('fd-button--' + option);\n                    }\n                });\n            }\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonDirective } from './button.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ButtonDirective],\n    declarations: [ButtonDirective]\n})\nexport class ButtonModule {}\n","import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/** \n * @hidden\n * The base class for the icon component \n */\nconst BASE_ICON_CLASS = 'sap-icon';\n\n/** \n * @hidden\n * Prefix for icon prop classes \n */\nconst PREFIX_ICON_CLASS = BASE_ICON_CLASS + '--';\n\n/**\n * The component that represents an icon.\n *\n * ```html\n * <fd-icon [glyph]=\"cart-approval\" [size]=\"'l'\"></fd-icon>\n * ```\n */\n@Component({\n    selector: 'fd-icon',\n    template: ``,\n    host: {\n        role: 'presentation'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class IconComponent extends AbstractFdNgxClass {\n\n    /** The icon name to display. See the icon page for the list of icons\n     * here: https://sap.github.io/fundamental-ngx/icon\n     * */\n    @Input() glyph;\n\n    /** \n     * The size of the icon\n     * The predefined values for the input size are *xs*, *s*, *l*, and *xl*.\n     * *size* can accept any other string, for example *xxs*, which will be translated into class *sap-icon--xxs*.\n     */\n    @Input() size: string = '';\n\n    /** @hidden */\n    _setProperties() {\n        if (this.glyph) {\n            this._addClassToElement(PREFIX_ICON_CLASS + this.glyph);\n        }\n\n        if (this.size) {\n            this._addClassToElement(PREFIX_ICON_CLASS + this.size);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [IconComponent],\n    declarations: [IconComponent]\n})\nexport class IconModule {}\n","import { Directive } from '@angular/core';\n\n/**\n * The parent action bar directive.\n *\n * Children usage:\n * ```html\n * <div fd-action-bar-actions>\n * <div fd-action-bar-back>\n * <div fd-action-bar-description>\n * <div fd-action-bar-header>\n * <div fd-action-bar-mobile>\n * <h1 fd-action-bar-title>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar]',\n    host: {\n        class: 'fd-action-bar'\n    }\n})\nexport class ActionBarDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The action bar title component.\n *\n * ```html\n * <fd-action-bar>\n *     <div fd-action-bar-header>\n *         <h1 fd-action-bar-title>Page Title</h1>\n *     </div>\n * <fd-action-bar>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-title]',\n    host: {\n        class: 'fd-action-bar__title'\n    }\n})\nexport class ActionBarTitleDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The action bar description.\n *\n * ```html\n * <div fd-action-bar>\n *     <div fd-action-bar-header>\n *         <div fd-action-bar-description>Page Description</div>\n *     </div>\n * <div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-description]',\n    host: {\n        class: 'fd-action-bar__description'\n    }\n})\nexport class ActionBarDescriptionDirective { }\n","import { Component, Directive, ElementRef, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * The action bar header, which contains the action bar's title and description components.\n *\n * ```html\n * <div fd-action-bar>\n *     <div fd-action-bar-header>\n *     </div>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-header]',\n    host: {\n        class: 'fd-action-bar__header'\n    }\n})\nexport class ActionBarHeaderDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * This component holds the right-aligned action buttons for the action bar.\n *\n * ```html\n * <div fd-action-bar>\n *     <div fd-action-bar-actions>\n *         <button fd-button [fdType]=\"'primary'\">Cancel</button>\n *         <button fd-button [fdType]=\"'main'\">Save</button>\n *     </div>\n * </div>\n * ```\n */\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-actions]',\n    host: {\n        class: 'fd-action-bar__actions'\n    }\n})\nexport class ActionBarActionsDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The left-aligned back button for the action bar.\n *\n * ```html\n * <div fd-action-bar>\n *     <div fd-action-bar-back>\n *         <button aria-label=\"back\" fd-button [fdType]=\"'light'\" [compact]=\"true\" [glyph]=\"'nav-back'\"></button>\n *     </div>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-back]',\n    host: {\n        class: 'fd-action-bar__back'\n    }\n})\nexport class ActionBarBackDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The action bar mobile component. This component should wrap all other action bar components, including the <fd-action-bar>.\n *\n * ```html\n * <div fd-action-bar-mobile>\n *     <div fd-action-bar>\n *     </div>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-action-bar-mobile]'\n})\nexport class ActionBarMobileDirective { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\n\nimport { ActionBarDirective } from './action-bar.directive';\nimport { ActionBarTitleDirective } from './action-bar-title/action-bar-title.directive';\nimport { ActionBarDescriptionDirective } from './action-bar-description/action-bar-description.directive';\nimport { ActionBarHeaderDirective } from './action-bar-header/action-bar-header.directive';\nimport { ActionBarActionsDirective } from './action-bar-actions/action-bar-actions.directive';\nimport { ActionBarBackDirective } from './action-bar-back/action-bar-back.directive';\nimport { ActionBarMobileDirective } from './action-bar-mobile/action-bar-mobile.directive';\n\n@NgModule({\n    declarations: [\n        ActionBarDirective,\n        ActionBarTitleDirective,\n        ActionBarDescriptionDirective,\n        ActionBarHeaderDirective,\n        ActionBarActionsDirective,\n        ActionBarBackDirective,\n        ActionBarMobileDirective\n    ],\n    imports: [CommonModule, ButtonModule, IconModule],\n    exports: [\n        ActionBarDirective,\n        ActionBarTitleDirective,\n        ActionBarDescriptionDirective,\n        ActionBarHeaderDirective,\n        ActionBarActionsDirective,\n        ActionBarBackDirective,\n        ActionBarMobileDirective\n    ]\n})\nexport class ActionBarModule {}\n","import { Observable, Subject } from 'rxjs';\n\n/**\n * Reference to an alert component generated via the AlertService.\n * It can be injected into the content component in the same way a service would be injected.\n * For a template, add let-alert to your ng-template tag. Now using *alert* in the template refers to this class.\n */\nexport class AlertRef {\n    \n    private readonly _afterDismissed: Subject<any> = new Subject<any>();\n\n    /** Observable that is triggered when the alert is dismissed. */\n    public afterDismissed: Observable<any> = this._afterDismissed.asObservable();\n\n    /** Data passed from the service open method. */\n    public data: any;\n\n    /**\n     * Dismisses the alert.\n     *\n     * @param reason Data passed back to the calling component through the AfterDismissed observable.\n     */\n    dismiss(reason?: any): void {\n        this._afterDismissed.next(reason);\n    }\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger } from '@angular/animations';\n\nexport const alertFadeNgIf: AnimationTriggerMetadata = trigger(\n    'fadeAlertNgIf',\n    [\n        transition(\n            ':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate('250ms ease-in-out', style({\n                    opacity: 1\n                }))\n            ]\n        ),\n        transition(\n            ':leave', [\n                style({\n                    opacity: 1,\n                    marginTop: '*',\n                    paddingTop: '*',\n                    paddingBottom: '*',\n                    height: '*',\n                    overflow: 'hidden'\n                }),\n                animate('400ms ease-in-out', style({\n                    opacity: 0,\n                    marginTop: 0,\n                    paddingTop: 0,\n                    paddingBottom: 0,\n                    height: 0,\n                    overflow: 'hidden'\n                }))\n            ]\n        )\n    ]\n);\n\nexport const alertContainerNgIf: AnimationTriggerMetadata = trigger(\n    'alertContainerNgIf',\n    [\n        transition(\n            ':leave', [\n                style({opacity: 1}),\n                animate('400ms ease-in-out', style({opacity: 0}))\n            ]\n        )\n    ]\n);\n","import {\n    Component,\n    Input,\n    OnInit,\n    ElementRef,\n    ChangeDetectorRef,\n    ViewChild,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Type,\n    AfterViewInit,\n    ViewContainerRef,\n    TemplateRef,\n    Optional,\n    EmbeddedViewRef,\n    Output,\n    EventEmitter, ViewEncapsulation, HostListener\n} from '@angular/core';\nimport { AlertRef } from './alert-utils/alert-ref';\nimport { alertFadeNgIf } from './alert-utils/alert-animations';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\nlet alertUniqueId: number = 0;\n\n/**\n * The component that represents an alert. It can be only be used inline.\n * If the AlertService is used, this component is auto-generated.\n */\n@Component({\n    selector: 'fd-alert',\n    templateUrl: './alert.component.html',\n    styleUrls: ['./alert.component.scss'],\n    host: {\n        '[attr.aria-labelledby]': 'ariaLabelledBy',\n        '[attr.aria-label]': 'ariaLabel',\n        '[style.width]': 'width',\n        '[style.min-width]': 'minWidth',\n        'role': 'alert',\n        '[attr.id]': 'id',\n        '[@fadeAlertNgIf]': ''\n    },\n    animations: [\n        alertFadeNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AlertComponent extends AbstractFdNgxClass implements OnInit, AfterViewInit {\n\n    /** @hidden */\n    @ViewChild('container', {read: ViewContainerRef})\n    containerRef: ViewContainerRef;\n\n    /** Whether the alert is dismissible. */\n    @Input()\n    dismissible: boolean = true;\n\n    /** The type of the alert. Can be one of *warning*, *success*, *information*, *error* or null. */\n    @Input()\n    type: string;\n\n    /** Id for the alert component. If omitted, a unique one is generated. */\n    @Input()\n    id: string = 'fd-alert-' + alertUniqueId++;\n\n    /** Duration of time *in milliseconds* that the alert will be visible. Set to -1 for indefinite. */\n    @Input()\n    duration: number = 10000;\n\n    /** Whether the alert should stay open if the mouse is hovering over it. */\n    @Input()\n    mousePersist: boolean = false;\n\n    /** Id of the element that labels the alert. */\n    @Input()\n    ariaLabelledBy: string = null;\n\n    /** Aria label for the alert component element. */\n    @Input()\n    ariaLabel: string = null;\n\n    /** Aria label for the dismiss button. */\n    @Input()\n    dismissLabel: string = 'Dismiss';\n\n    /** Width of the alert. */\n    @Input()\n    width: string;\n\n    /** Minimum width of the alert. */\n    @Input()\n    minWidth: string;\n\n    /** Alternative way of passing in a message to the alert. */\n    @Input()\n    message: string;\n\n    /** Event fired when the alert is dismissed. */\n    @Output()\n    onDismiss: EventEmitter<undefined> = new EventEmitter<undefined>();\n\n    /** @hidden */\n    mouseInAlert: boolean = false;\n\n    /** @hidden */\n    componentRef: ComponentRef<any> | EmbeddedViewRef<any>;\n\n    /** @hidden */\n    childComponentType: Type<any> | TemplateRef<any> | string;\n\n    /** @hidden */\n    constructor(private elRef: ElementRef,\n                private cdRef: ChangeDetectorRef,\n                private componentFactoryResolver: ComponentFactoryResolver,\n                @Optional() private alertRef: AlertRef) {\n        super(elRef);\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.alertRef) {\n            this.open();\n        }\n        this._setProperties();\n    }\n\n    /** @hidden */\n    ngAfterViewInit(): void {\n        if (this.childComponentType) {\n            if (this.childComponentType instanceof Type) {\n                this.loadFromComponent(this.childComponentType);\n            } else if (this.childComponentType instanceof TemplateRef) {\n                this.loadFromTemplate(this.childComponentType);\n            } else {\n                this.loadFromString(this.childComponentType);\n            }\n            this.cdRef.detectChanges();\n        }\n    }\n\n    /**\n     * Dismisses the alert. If the alert was generated via the AlertService, it is removed from the DOM.\n     * Otherwise, it sets the display value to none. Fires the onDismiss event.\n     *\n     * @param manualDismiss Set to true to skip the dismiss animation.\n     * @param reason Data to pass back to the calling component. Only usable if alert is opened using the Service.\n     *\n     */\n    dismiss(reason?: any, manualDismiss: boolean = false): void {\n        if (manualDismiss) {\n            this.elRef.nativeElement.classList.add('fd-has-display-none');\n            this.elRef.nativeElement.classList.remove('fd-has-display-block');\n        }\n        if (this.alertRef) {\n            this.alertRef.dismiss(reason);\n        } else {\n            this.elRef.nativeElement.classList.add('fd-has-display-none');\n            this.elRef.nativeElement.classList.remove('fd-has-display-block');\n        }\n        this.onDismiss.emit();\n    }\n\n    /**\n     * Opens the alert.\n     */\n    open(): void {\n        if (!this.alertRef) {\n            if (this.elRef.nativeElement.style.display === 'block') {\n                return;\n            }\n            this.elRef.nativeElement.classList.remove('fd-has-display-none');\n            this.elRef.nativeElement.classList.add('fd-has-display-block');\n        }\n\n        if (this.duration >= 0) {\n            setTimeout(() => {\n                if (this.mousePersist) {\n                    const wait = () => {\n                        if (this.mouseInAlert === true) {\n                            setTimeout(wait, 500);\n                        } else {\n                            this.dismiss();\n                        }\n                    };\n                    wait();\n                } else {\n                    this.dismiss();\n                }\n            }, this.duration);\n        }\n    }\n\n    /** @hidden */\n    @HostListener('mouseenter', ['$event'])\n    @HostListener('mouseleave', ['$event'])\n    handleAlertMouseEvent(event): void {\n        if (event.type === 'mouseenter') {\n            this.mouseInAlert = true;\n        } else if (event.type === 'mouseleave') {\n            this.mouseInAlert = false;\n        }\n    }\n\n    /** @hidden */\n    _setProperties(): void {\n        this._addClassToElement('fd-alert');\n        if (this.type) {\n            this._addClassToElement('fd-alert--' + this.type);\n        }\n        if (this.dismissible) {\n            this._addClassToElement('fd-alert--dismissible');\n        }\n    }\n\n    private loadFromTemplate(template: TemplateRef<any>): void {\n        const context = {\n            $implicit: this.alertRef\n        };\n        this.componentRef = this.containerRef.createEmbeddedView(template, context);\n    }\n\n    private loadFromComponent(componentType: Type<any>): void {\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n        this.containerRef.clear();\n        this.componentRef = this.containerRef.createComponent(componentFactory);\n    }\n\n    private loadFromString(contentString: string): void {\n        this.containerRef.clear();\n        this.message = contentString;\n    }\n\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { alertContainerNgIf } from './alert-animations';\n\n@Component({\n    selector: 'fd-alert-container',\n    template: ``,\n    styles: [`\n        .fd-alert-container {\n            position: fixed;\n            display: flex;\n            flex-direction: column;\n            z-index: 5000;\n            align-items: center;\n            top: 0;\n            right: 50%;\n            left: 50%;\n        }\n    `],\n    host: {\n        '[@alertContainerNgIf]': ''\n    },\n    animations: [\n        alertContainerNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AlertContainerComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-alert-container')\n    fdAlertContainerClass: boolean = true;\n}\n","\n/**\n * Configuration for opening an alert with the AlertService.\n */\nexport class AlertConfig {\n\n    /** Whether the alert is dismissible. */\n    dismissible?: boolean = true;\n\n    /** The type of the alert. Can be one of *warning*, *success*, *information*, *error* or null. */\n    type?: string;\n\n    /** Id for the alert component. If omitted, a unique one is generated. */\n    id?: string;\n\n    /** Width of the alert. */\n    width?: string = '33vw';\n\n    /** Minimum width of the alert. */\n    minWidth?: string = '300px';\n\n    /** Data being injected into the child component or template. */\n    data?: any;\n\n    /** Duration of time *in milliseconds* that the alert will be visible. Set to -1 for indefinite. */\n    duration?: number = 10000;\n\n    /** Whether the alert should stay open if the mouse is hovering over it. */\n    mousePersist?: boolean = false;\n\n    /** Id of the element that labels the alert. */\n    ariaLabelledBy?: string = null;\n\n    /** Aria label for the alert component element. */\n    ariaLabel?: string = null;\n}\n","import { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\n\nexport class AlertInjector implements Injector {\n    constructor(private _parentInjector: Injector, private _additionalTokens: WeakMap<any, any>) {}\n\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n\n    get(token: any, notFoundValue?: any);\n\n    get(token: any, notFoundValue?: any, flags?: any) {\n        const value = this._additionalTokens.get(token);\n\n        if (value) {\n            return value;\n        }\n\n        return this._parentInjector.get<any>(token, notFoundValue);\n    }\n}\n","import {\n    ComponentFactoryResolver,\n    Injectable,\n    ApplicationRef,\n    Injector,\n    ComponentRef,\n    EmbeddedViewRef,\n    TemplateRef,\n    Type\n} from '@angular/core';\nimport { AlertComponent } from '../alert.component';\nimport { AlertContainerComponent } from '../alert-utils/alert-container.component';\nimport { AlertConfig } from '../alert-utils/alert-config';\nimport { AlertInjector } from '../alert-utils/alert-injector';\nimport { AlertRef } from '../alert-utils/alert-ref';\n\n/**\n * Service used to dynamically generate an alert as an overlay.\n */\n@Injectable()\nexport class AlertService {\n    private alerts: ComponentRef<AlertComponent>[] = [];\n    private alertContainerRef: ComponentRef<AlertContainerComponent>;\n\n    /** @hidden */\n    constructor(private componentFactoryResolver: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector) {}\n\n    /**\n     * Returns true if there are some alerts currently open. False otherwise.\n     */\n    public hasOpenAlerts(): boolean {\n        return this.alerts && this.alerts.length > 0;\n    }\n\n    /**\n     * Opens an alert component with a content of type TemplateRef, Component Type or String.\n     * @param content Content of the alert component.\n     * @param alertConfig Configuration of the alert component.\n     */\n    public open(content: TemplateRef<any> | Type<any> | string, alertConfig: AlertConfig = new AlertConfig()): AlertRef {\n\n        // If empty or undefined alert array, create container\n        if (!this.alerts || this.alerts.length === 0) {\n            this.openAlertContainer();\n        }\n\n        // Get default values from alert model\n        alertConfig = Object.assign(new AlertConfig(), alertConfig);\n\n        // Config setup\n        const configMap = new WeakMap();\n        const alertRef = new AlertRef();\n        alertRef.data = (alertConfig ? alertConfig.data : undefined);\n        configMap.set(AlertRef, alertRef);\n\n        // Prepare new component\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent);\n        const componentRef = componentFactory.create(new AlertInjector(this.injector, configMap));\n        componentRef.location.nativeElement.style.marginTop = '10px';\n        this.appRef.attachView(componentRef.hostView);\n\n        // Subscription to close alert from ref\n        const refSub = alertRef.afterDismissed.subscribe(() => {\n            this.destroyAlertComponent(componentRef);\n            refSub.unsubscribe();\n        });\n\n        // Prepare component data items\n        const configObj = Object.assign({}, alertConfig);\n        Object.keys(configObj).forEach(key => {\n            if (key !== 'data') {\n                componentRef.instance[key] = configObj[key];\n            }\n        });\n        componentRef.instance.childComponentType = content;\n\n        // Render new component\n        const domElem = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        this.alertContainerRef.location.nativeElement.appendChild(domElem);\n\n        // Log new component\n        this.alerts.push(componentRef);\n        return alertRef;\n    }\n\n    /**\n     * Dismisses all service-opened alerts.\n     */\n    public dismissAll(): void {\n        this.alerts.forEach(ref => {\n            this.destroyAlertComponent(ref);\n        });\n    }\n\n    private destroyAlertComponent(alert: ComponentRef<AlertComponent>): void {\n        this.alerts[this.alerts.indexOf(alert)] = null;\n        this.alerts = this.alerts.filter(item => item !== null && item !== undefined);\n        this.appRef.detachView(alert.hostView);\n        alert.destroy();\n\n        if (this.alertContainerRef && (!this.alerts || this.alerts.length === 0)) {\n            this.destroyAlertContainer();\n        }\n    }\n\n    private openAlertContainer(): void {\n        const factory = this.componentFactoryResolver.resolveComponentFactory(AlertContainerComponent);\n        const componentRef = factory.create(this.injector);\n        this.appRef.attachView(componentRef.hostView);\n\n        const domElement = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        document.body.appendChild(domElement);\n        this.alertContainerRef = componentRef;\n    }\n\n    private destroyAlertContainer(): void {\n        this.appRef.detachView(this.alertContainerRef.hostView);\n        this.alertContainerRef.destroy();\n        this.alertContainerRef = undefined;\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '../icon/icon.module';\n\nimport { AlertComponent } from './alert.component';\nimport { AlertService } from './alert-service/alert.service';\nimport { AlertContainerComponent } from './alert-utils/alert-container.component';\n\n@NgModule({\n    declarations: [AlertComponent, AlertContainerComponent],\n    imports: [CommonModule, IconModule],\n    exports: [AlertComponent, AlertContainerComponent],\n    entryComponents: [AlertContainerComponent, AlertComponent],\n    providers: [AlertService]\n})\nexport class AlertModule {}\n","import { Input, Directive, ElementRef, HostBinding } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Badge directive, used to indicate status.\n * Colors, generally in combination with text, are used to easily highlight the state of an object.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-badge]'\n})\nexport class BadgeDirective extends AbstractFdNgxClass {\n    /** Color coded status for the badge. Options are 'success', 'warning', and 'error'. Leave empty for default badge. */\n    @Input() status;\n\n    /** Modifier for the badge. Options are 'pill' and 'filled'. Leave empty for normal. */\n    @Input() modifier;\n\n    /** @hidden */\n    @HostBinding('class.fd-badge')\n    fdBadgeClass: boolean = true;\n\n    /** @hidden */\n    _setProperties() {\n        if (this.status) {\n            this._addClassToElement('fd-badge--' + this.status);\n        }\n        if (this.modifier) {\n            this._addClassToElement('fd-badge--' + this.modifier);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Label directive, used to indicate status, without any background or border\n * Colors, generally in combination with text, are used to easily highlight the state of an object.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-label]'\n})\nexport class LabelDirective extends AbstractFdNgxClass {\n    /** Color coded status for the label. Options are 'success', 'warning', and 'error'. Leave empty for default label. */\n    @Input() status: string = '';\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-label');\n        if (this.status) {\n            this._addClassToElement('fd-label--' + this.status);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive, ElementRef, Input} from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Status Label directive with some default icons based on status input used to indicate status.\n * Icons are used to easily highlight the state of an object.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-status-label]'\n})\nexport class StatusLabelDirective extends AbstractFdNgxClass {\n    /** Color coded status for the label. Options are 'success', 'warning', and 'error'. Leave empty for default label. */\n    @Input() status: string = '';\n\n    /** Built-in status icon. Options include 'available', 'away', 'busy', and 'offline'. */\n    @Input() statusIcon: string = '';\n\n    /** The icon used with the status indicator. See the icon page for the list of icons. */\n    @Input() icon: string = '';\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-status-label');\n        if (this.status) {\n            this._addClassToElement('fd-status-label--' + this.status);\n        }\n        if (this.statusIcon) {\n            this._addClassToElement('fd-status-label--' + this.statusIcon);\n        }\n        if (this.icon) {\n            this._addClassToElement('sap-icon--' + this.icon);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BadgeDirective } from './badge.directive';\nimport { LabelDirective } from './label.directive';\nimport { StatusLabelDirective } from './status-label.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [BadgeDirective, LabelDirective, StatusLabelDirective],\n    declarations: [BadgeDirective, LabelDirective, StatusLabelDirective]\n})\nexport class BadgeLabelModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * Breadcrumb parent wrapper directive. Must have breadcrumb item child directives.\n *\n * ```html\n * <fd-breadcrumb>\n *     <fd-breadcrumb-item>\n *         <a fd-breadcrumb-link [routerLink]=\"'#'\">Breadcrumb Link</a>\n *     </fd-breadcrumb-item>\n * </fd-breadcrumb>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: 'fd-breadcrumb',\n    host: {\n        class: 'fd-breadcrumb'\n    }\n})\nexport class BreadcrumbDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * Breadcrumb item directive. Must have child breadcrumb link directives.\n *\n * ```html\n * <fd-breadcrumb-item>\n *     <a fd-breadcrumb-link [routerLink]=\"'#'\">Breadcrumb Link</a>\n * </fd-breadcrumb-item>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: 'fd-breadcrumb-item',\n    host: {\n        class: 'fd-breadcrumb__item'\n    }\n})\nexport class BreadcrumbItemDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * Breadcrumb link directive. Use Angular router options (such as 'routerLink' and 'queryParams') with this directive.\n *\n * ```html\n * <a fd-breadcrumb-link [routerLink]=\"'some-url'\" [queryParams]=\"'params'\">Breadcrumb Link</a>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-breadcrumb-link]',\n    host: {\n        class: 'fd-breadcrumb__link'\n    }\n})\nexport class BreadcrumbLinkDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BreadcrumbDirective } from './breadcrumb.directive';\nimport { BreadcrumbItemDirective } from './breadcrumb-item.directive';\nimport { BreadcrumbLinkDirective } from './breadcrumb-link.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [BreadcrumbDirective, BreadcrumbItemDirective, BreadcrumbLinkDirective],\n    declarations: [BreadcrumbDirective, BreadcrumbItemDirective, BreadcrumbLinkDirective]\n})\nexport class BreadcrumbModule {}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Container for grouped buttons.\n *\n * ```html\n * <fd-button-group>\n *     <button fd-button-grouped>Button</button>\n * </fd-button-group>\n * ```\n */\n@Component({\n    selector: 'fd-button-group',\n    templateUrl: './button-group.component.html',\n    host: {\n        'role': 'group'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ButtonGroupComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-button-group')\n    fdButtonGroupClass: boolean = true;\n}\n","import { Directive, ElementRef, HostBinding, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Directive to be applied to buttons that are members of a button group.\n *\n * ```html\n * <button fd-button-grouped>Button</button>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-button-grouped]'\n})\nexport class ButtonGroupedDirective extends AbstractFdNgxClass {\n\n    /** Size of the button. Can be `xs`, `s`, or left blank for large size. */\n    @Input()\n    size: string;\n\n    /** Glyph (icon) of the button. */\n    @Input()\n    glyph: string;\n\n    /** State of the button. Can be `selected` or `disabled`. */\n    @Input()\n    state: string;\n\n    /** Whether the button should be in compact form. */\n    @Input()\n    @HostBinding('class.fd-button--compact')\n    compact: boolean = false;\n\n    /** @hidden */\n    @HostBinding('class.fd-button--grouped')\n    fdButtonGroupedClass: boolean = true;\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    /** @hidden */\n    _setProperties() {\n        if (this.size) {\n            this._addClassToElement('fd-button--' + this.size);\n        }\n        if (this.glyph) {\n            this._addClassToElement('sap-icon--' + this.glyph);\n        }\n        if (this.state) {\n            this._addClassToElement('is-' + this.state);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonGroupComponent } from './button-group.component';\nimport { ButtonGroupedDirective } from './button-grouped.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ButtonGroupComponent, ButtonGroupedDirective],\n    declarations: [ButtonGroupComponent, ButtonGroupedDirective]\n})\nexport class ButtonGroupModule {}\n","import { Injectable } from '@angular/core';\n\n/**\n * Provides i18n support for labels inside the calendar component.\n */\n@Injectable({providedIn: 'root'})\nexport class CalendarI18nLabels {\n\n    // This will be needed when we use OnPush change detection.\n    // readonly labelsChange: Subject<void> = new Subject<void>();\n\n    /** Year selection aria label. Used on the button to navigate to the years view. */\n    yearSelectionLabel: string = 'Year selection';\n\n    /** Previous year aria label. Used on the button to switch to a previous year in the years view. */\n    previousYearLabel: string = 'Previous year';\n\n    /** Next year aria label. Used on the button to switch to a next year in the years view. */\n    nextYearLabel: string = 'Next year';\n\n    /** Month selection aria label. Used on the button to navigate to the months view. */\n    monthSelectionLabel: string = 'Month selection';\n\n    /** Previous month aria label. Used on the button to switch to a previous month in the months view. */\n    previousMonthLabel: string = 'Previous month';\n\n    /** Next month aria label. Used on the button to switch to a next month in the months view. */\n    nextMonthLabel: string = 'Next month';\n\n}\n","import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';\nimport { FormStyle, getLocaleDayNames, getLocaleMonthNames, TranslationWidth } from '@angular/common';\nimport { Subject } from 'rxjs';\n\nexport function CALENDAR_I18N_FACTORY(locale) {\n    return new CalendarI18nDefault(locale);\n}\n\n/**\n * Abstract class which defines the behaviour calendar internationalization. See calendar examples for usage details.\n */\n@Injectable({\n    providedIn: 'root',\n    useFactory: CALENDAR_I18N_FACTORY,\n    deps: [LOCALE_ID]\n})\nexport abstract class CalendarI18n {\n\n    /**\n     * Aria label for a specific date.\n     * @param date Native date object to use for the label.\n     */\n    abstract getDayAriaLabel(date: Date): string;\n\n    /** Get all short week day names, such as Mo for Monday. */\n    abstract getAllShortWeekdays(): string[];\n\n    /** Get all short month names, such as Nov for November. */\n    abstract getAllShortMonthNames(): string[];\n\n    /** Get all full month names. */\n    abstract getAllFullMonthNames(): string[];\n}\n\n/**\n * Default implementation of the CalendarI18n service. It will get dates from the application locale if it is present.\n */\n@Injectable()\nexport class CalendarI18nDefault extends CalendarI18n {\n\n    private weekdaysShort: string[];\n    private monthsShort: string[];\n    private monthsFull: string[];\n\n    private weekdaysFallback: string[] = [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ];\n\n    private monthsFullFallback: string[] = [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July',\n        'August', 'September', 'October', 'November', 'December'\n    ];\n\n    private monthsShortFallback: string[] = [\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n        'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    ];\n\n    /** Constructor takes in a locale_id and gets the appropriate data from Angular. */\n    constructor(@Optional() @Inject(LOCALE_ID) private locale: string) {\n        super();\n        if (locale) {\n            const sundayStartWeekdays = getLocaleDayNames(locale, FormStyle.Standalone, TranslationWidth.Short);\n            this.weekdaysShort = sundayStartWeekdays.map((day, index) => sundayStartWeekdays[index % 7]);\n            this.monthsShort = getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Abbreviated);\n            this.monthsFull = getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Wide);\n        }\n\n        this.checkForFallback();\n    }\n\n    /**\n     * Aria label for a specific date. Default implementation produces the label: {Date} {Month} {Year}.\n     *\n     * @param date Native date object to use for the label.\n     */\n    getDayAriaLabel(date: Date): string {\n        return date.getDate() + ' ' + this.monthsFull[date.getMonth()] + ' ' + date.getFullYear();\n    }\n\n    /** Get all full month names. */\n    getAllFullMonthNames(): string[] {\n        return this.monthsFull;\n    }\n\n    /** Get all short month names, such as Nov for November. */\n    getAllShortMonthNames(): string[] {\n        return this.monthsShort;\n    }\n\n    /** Get all short week day names, such as Mo for Monday. */\n    getAllShortWeekdays(): string[] {\n        return this.weekdaysShort;\n    }\n\n    /** Checks if a fallback is needed. Older versions of Angular may need this. */\n    private checkForFallback(): void {\n        if (!this.weekdaysShort || this.weekdaysShort.length === 0) {\n            this.weekdaysShort = this.weekdaysFallback;\n        }\n\n        if (!this.monthsShort || this.monthsShort.length === 0) {\n            this.monthsShort = this.monthsShortFallback;\n        }\n\n        if (!this.monthsFull || this.monthsFull.length === 0) {\n            this.monthsFull = this.monthsFullFallback;\n        }\n    }\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { CalendarI18nLabels } from '../i18n/calendar-i18n-labels';\nimport { CalendarI18n } from '../i18n/calendar-i18n';\nimport { FdCalendarView } from '../calendar.component';\nimport { CalendarCurrent } from '../models/calendar-current';\n\n/**\n * Internal use only.\n * Header of the calendar component.\n */\n@Component({\n    selector: 'fd-calendar-header',\n    templateUrl: './calendar-header.component.html',\n    styleUrls: ['./calendar-header.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[attr.id]': 'id + \"-header\"'\n    }\n})\nexport class CalendarHeaderComponent {\n\n    /** Currently active view. Needed for a11y labels. */\n    @Input()\n    activeView: FdCalendarView;\n\n    /** Currently displayed date on the calendar. */\n    @Input()\n    currentlyDisplayed: CalendarCurrent;\n\n    /** Id */\n    @Input()\n    id: string;\n\n    /** Event emitted when the active view should change. */\n    @Output()\n    readonly activeViewChange: EventEmitter<FdCalendarView>\n        = new EventEmitter<FdCalendarView>();\n\n    /** Event emitted when the previous button is clicked. */\n    @Output()\n    readonly previousClicked: EventEmitter<void>\n        = new EventEmitter<void>();\n\n    /** Event emitted when the next button is clicked. */\n    @Output()\n    readonly nextClicked: EventEmitter<void>\n        = new EventEmitter<void>();\n\n    constructor(\n        public calendarI18nLabels: CalendarI18nLabels,\n        public calendarI18n: CalendarI18n\n    ) {}\n\n    /** Get the aria label for the previous button. Depends on the active view. */\n    get previousLabel(): string {\n        return this.activeView !== 'year' ? this.calendarI18nLabels.previousMonthLabel\n            : this.calendarI18nLabels.previousYearLabel;\n    }\n\n    /** Get the aria label for the next button. Depends on the active view. */\n    get nextLabel(): string {\n        return this.activeView !== 'year' ? this.calendarI18nLabels.nextMonthLabel\n            : this.calendarI18nLabels.nextMonthLabel;\n    }\n\n    /** Get aria label for the month shown. */\n    get monthLabel(): string {\n        return this.calendarI18n.getAllFullMonthNames()[this.currentlyDisplayed.month - 1];\n    }\n\n    isOnMonthView(): boolean {\n        return this.activeView === 'month';\n    }\n\n    isOnYearView(): boolean {\n        return this.activeView === 'year';\n    }\n\n    processViewChange(type: FdCalendarView): void {\n        if (type === this.activeView) {\n            this.activeView = 'day';\n        } else {\n            this.activeView = type;\n        }\n        this.activeViewChange.emit(this.activeView);\n    }\n\n}\n","import { FdDate } from './models/fd-date';\nimport { Subject } from 'rxjs';\n\nexport class CalendarService {\n\n    /** Event thrown, when the element is selected by space or enter keys */\n    public onKeySelect: Subject<number> = new Subject<number>();\n\n    /** Event thrown, when the focus goes after list of elements */\n    public onListEndApproach: Subject<void> = new Subject<void>();\n\n    /** Event thrown, when the focus goes before list of elements */\n    public onListStartApproach: Subject<void> = new Subject<void>();\n\n    /** Event thrown, when the focus is changed. */\n    public onFocusIdChange: Subject<number> = new Subject<number>();\n\n    /** Function that is called when the focus would escape the element. */\n    focusEscapeFunction: Function;\n\n    /**\n     * Method that provides, amount of day depending on month and year passed\n     * @param month which is number 1-12\n     * @param year which is number\n     */\n    static getDaysInMonth(month: number, year: number): number {\n\n        const isLeapYear = (_year: number): boolean => {\n            if (_year % 4 !== 0) {\n                return false;\n            } else if (_year % 400 === 0) {\n                return true;\n            } else {\n                return _year % 100 !== 0;\n            }\n        };\n\n        if (month === 2) {\n            return isLeapYear(year) ? 29 : 28;\n        } else if ((month % 2 === 0 && month < 8) || (month % 2 === 1 && month > 8)) {\n            return 30;\n        } else {\n            return 31;\n        }\n    }\n\n    /**\n     * Method that check equality of 2 dates.\n     */\n    static datesEqual(date1: FdDate, date2: FdDate): boolean {\n        if (!date1 || !date2) {\n            return false;\n        } else {\n            return date1.toDateString() === date2.toDateString();\n        }\n    }\n\n    /**\n     * Method that handles keydown events, dedicated for Month and Year views, which have a list with 12 elements.\n     * Triggers the events, when the focus approaches start and end of list. Or when there is basic change of focus.\n     * Triggers also event, when the element is selected by enter key, or space bar.\n     * @param event KeyboardEvent\n     * @param index which is number (0 - 11)\n     */\n    public onKeydownHandler(event: KeyboardEvent, index: number): void {\n        switch (event.code) {\n            case 'Enter':\n            case 'Space': {\n                event.preventDefault();\n                this.onKeySelect.next(index);\n                break;\n            }\n            case 'ArrowLeft': {\n                event.preventDefault();\n                if (index === 0) {\n                    this.onListStartApproach.next();\n                    this.onFocusIdChange.next(11)\n                } else {\n                    this.onFocusIdChange.next(index - 1)\n                }\n                break;\n            }\n            case 'ArrowRight': {\n                event.preventDefault();\n                if (index === 11) {\n                    this.onListEndApproach.next();\n                    this.onFocusIdChange.next(0)\n                } else {\n                    this.onFocusIdChange.next(index + 1)\n                }\n                break;\n            }\n            case 'ArrowUp': {\n                event.preventDefault();\n                if (index <= 3) {\n                    this.onListStartApproach.next();\n                    this.onFocusIdChange.next(index + 8);\n                } else {\n                    this.onFocusIdChange.next(index - 4);\n                }\n                break;\n            }\n            case 'ArrowDown': {\n                event.preventDefault();\n                if (index >= 8) {\n                    this.onListEndApproach.next();\n                    this.onFocusIdChange.next(index - 8);\n                } else {\n                    this.onFocusIdChange.next(index + 4);\n                }\n                break;\n            }\n            case 'Tab': {\n                if (this.focusEscapeFunction && !event.shiftKey) {\n                    event.preventDefault();\n                    this.focusEscapeFunction();\n                }\n                break;\n            }\n        }\n    }\n\n}\n","/**\n * Default date model used by the fundamental components.\n */\nimport { CalendarService } from '../calendar.service';\n\nexport class FdDate {\n\n    /**\n     * The year of the date.\n     */\n    public year: number;\n\n    /**\n     * The month of the date. 1 = January, 12 = December.\n     */\n    public month: number;\n\n    /**\n     * Day of the date. Starts at 1.\n     */\n    public day: number;\n\n    /**\n     * Static function to get the current date in FdDate form.\n     */\n    static getToday(): FdDate {\n        const tempDate: Date = new Date();\n        return new FdDate(tempDate.getFullYear(), tempDate.getMonth() + 1, tempDate.getDate());\n    }\n\n    /**\n     *  Static function allowing convert js date object to FdDate model\n     */\n    static getModelFromDate(date: Date): FdDate {\n        if (date) {\n            return new FdDate(date.getFullYear(), date.getMonth() + 1, date.getDate());\n        }\n    }\n\n    /**\n     * Constructor to build a FdDate object from a year, month and day.\n     * @param year The year of the date.\n     * @param month The month of the date (1-12).\n     * @param day The day of the date (1-31, generally).\n     */\n    constructor(year: number, month: number, day: number) {\n        this.year = year;\n        this.month = month;\n        this.day = day;\n    }\n\n    /**\n     * Get Luxon date object converted to string from FdDate.\n     */\n    public toDateString(): string {\n        if (this.year && this.month && this.day && this.isDateValid()) {\n            return this.toDate().toDateString();\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Get amount of milliseconds from 01.01.1970\n     * -1 is thrown when some some of properties (day,month,year) are not defined\n     */\n    public getTimeStamp(): number {\n        if (this.year && this.month && this.day) {\n            return this.toDate().getTime();\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Get number of weekday ex. Sunday = 1, Monday = 2, Tuesday = 3 etc.\n     * -1 is thrown when some some of properties (day,month,year) are not defined\n     * Native javascript date getDay() function returns Sunday as 0, Monday as 1, etc, to it's needed to increment value\n     *\n     */\n    public getDay(): number {\n        if (this.year && this.month && this.day) {\n            return this.toDate().getDay() + 1;\n        } else {\n            return -1;\n        }\n    }\n\n    /** Get next day */\n    public nextDay(): FdDate {\n        const maxDays = CalendarService.getDaysInMonth(this.month, this.year);\n        const day = this.day >= maxDays ? 1 : this.day + 1;\n        const month = day !== 1 ? this.month : (this.month > 11 ? 1 : this.month + 1);\n        const year = month !== 1 ? this.year : this.year + 1;\n        return new FdDate(year, month, day);\n    }\n\n    /** Get previous day  */\n    public previousDay(): FdDate {\n        const maxDays = CalendarService.getDaysInMonth(this.month, this.year);\n        const day = this.day === 1 ? maxDays : this.day - 1;\n        const month = day !== maxDays ? this.month : (this.month === 1 ? 12 : this.month - 1);\n        const year = month !== 12 ? this.year : this.year - 1;\n        return new FdDate(year, month, day);\n    }\n\n    /**\n     * Get native date object from FdDate.\n     */\n    public toDate(): Date {\n        return new Date(this.year, this.month - 1, this.day);\n    }\n\n    /**\n     * Method that checks validity of current FdDate object.\n     */\n    public isDateValid(): boolean {\n        if (!this) {\n            return false;\n        }\n\n        if (!this.year || !this.month || !this.day) {\n            return false;\n        }\n\n        if (this.year <= 0 || this.month < 1 || this.month > 12) {\n            return false;\n        }\n\n        if (this.day < 1 || this.day > CalendarService.getDaysInMonth(this.month, this.year)) {\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","import {\n    AfterViewChecked,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input, OnChanges,\n    OnInit,\n    Output,\n    ViewEncapsulation\n} from '@angular/core';\nimport { CalendarI18n } from '../../i18n/calendar-i18n';\nimport { FdDate } from '../../models/fd-date';\nimport { CalendarCurrent } from '../../models/calendar-current';\nimport { CalendarType, DaysOfWeek } from '../../calendar.component';\nimport { CalendarDay } from '../../models/calendar-day';\nimport { CalendarService } from '../../calendar.service';\nimport { FdRangeDate } from '../../models/fd-range-date';\n\n/** Component representing the day view of the calendar. */\n@Component({\n    selector: 'fd-calendar-day-view',\n    templateUrl: './calendar-day-view.component.html',\n    styleUrls: ['./calendar-day-view.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[attr.id]': 'id + \"-day-view\"'\n    }\n})\nexport class CalendarDayViewComponent implements OnInit, AfterViewChecked, OnChanges {\n\n    /** @hidden */\n    newFocusedDayId: string = '';\n\n    /** Actual day grid with previous/current/next month days */\n    public dayViewGrid: CalendarDay[][];\n\n    /** @hidden */\n    @HostBinding('class.fd-calendar__dates')\n    public fdCalendarDateViewClass: boolean = true;\n\n    /** Currently displayed month and year for days */\n    @Input()\n    public currentlyDisplayed: CalendarCurrent;\n\n    /** The currently selected FdDate model in single mode. */\n    @Input()\n    public selectedDate: FdDate;\n\n    /** The currently selected FdDates model start and end in range mode. */\n    @Input()\n    public selectedRangeDate: FdRangeDate;\n\n    /** The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on. */\n    @Input()\n    public startingDayOfWeek: DaysOfWeek;\n\n    /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n    @Input()\n    calType: CalendarType = 'single';\n\n    /** Id of the calendar. If none is provided, one will be generated. */\n    @Input() id: string;\n\n    /** Function that allows to specify which function would be called, when focus wants to escape */\n    @Input()\n    focusEscapeFunction: Function;\n\n    /** Event emitted always, when model is changed in range mode */\n    @Output()\n    public readonly selectedRangeDateChange: EventEmitter<FdRangeDate> = new EventEmitter<FdRangeDate>();\n\n    /** Event emitted always, when next month is selected, by focus */\n    @Output()\n    public readonly nextMonthSelect: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted always, when previous month is selected, by focus */\n    @Output()\n    public readonly previousMonthSelect: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted always, when model is changed in single mode */\n    @Output()\n    public readonly selectedDateChange: EventEmitter<FdDate> = new EventEmitter<FdDate>();\n\n    /**\n     * Function used to disable certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeStartFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeEndFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeStartFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeEndFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockFunction = function (fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /** @hidden */\n    constructor(\n        private calendarI18n: CalendarI18n,\n        private eRef: ElementRef\n    ) {\n    }\n\n    /**\n     * Function for selecting a date on the calendar. Typically called when a date is clicked, but can also be called programmatically.\n     * @param day CalendarDay object to be selected.\n     */\n    selectDate(day: CalendarDay, event?: MouseEvent): void {\n        if (event) {\n            /**\n             * There are some problems with popup integration. After clicking inside day component, the popover closes.\n             */\n            event.stopPropagation();\n            event.preventDefault();\n            this.newFocusedDayId = day.id;\n            this.focusElement(this.newFocusedDayId);\n        }\n        if (!day.blocked && !day.disabled) {\n            if (this.calType === 'single') {\n                this.selectedDate = day.date;\n                this.selectedDateChange.emit(day.date);\n                this.buildDayViewGrid();\n            } else {\n                if (this.selectCounter === 0 || this.selectCounter === 2) {\n                    this.selectedRangeDate = { start: day.date, end: null };\n                    this.selectedRangeDateChange.emit(this.selectedRangeDate);\n                    this.buildDayViewGrid();\n                } else if (this.selectCounter === 1) {\n                    // Check if date picked is higher than already chosen, otherwise just first one\n                    if (this.selectedRangeDate.start.getTimeStamp() < day.date.getTimeStamp()) {\n                        this.selectedRangeDate = { start: this.selectedRangeDate.start, end: day.date };\n                    } else {\n                        this.selectedRangeDate = { start: day.date, end: null };\n                    }\n                    this.selectedRangeDateChange.emit(this.selectedRangeDate);\n                    this.buildDayViewGrid();\n                }\n\n            }\n        }\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.buildDayViewGrid();\n    }\n\n    /** @hidden\n     *  Amount of selected days\n     *  0, when none,\n     *  1, when only startDate, or endDate same as startDate,\n     *  2, when both\n     */\n    get selectCounter(): number {\n        if (!this.selectedRangeDate || !this.selectedRangeDate.start) {\n            return 0;\n        } else if (this.selectedRangeDate.start &&\n            (!this.selectedRangeDate.end ||\n                CalendarService.datesEqual(this.selectedRangeDate.start, this.selectedRangeDate.end)\n            )\n        ) {\n            return 1;\n        } else if (this.selectedRangeDate.start && this.selectedRangeDate.end) {\n            return 2;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that handles day cells keydown events,\n     * @param event KeyboardEvent\n     * @param cell CalendarDay\n     * @param grid with specified column and row as a x and y\n     */\n    onKeydownDayHandler(event, cell: CalendarDay, grid: { x: number, y: number }): void {\n        if (event.code === 'Tab' && !event.shiftKey) {\n            if (this.focusEscapeFunction) {\n                event.preventDefault();\n                this.focusEscapeFunction();\n            }\n        } else {\n            switch (event.code) {\n                case ('Space'):\n                case ('Enter'): {\n                    event.preventDefault();\n                    this.selectDate(cell);\n                    this.newFocusedDayId = cell.id;\n                    break;\n                }\n                case ('ArrowUp'): {\n                    event.preventDefault();\n                    if (grid.y > 0) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y - 1][grid.x].id;\n                    } else {\n                        this.selectPreviousMonth();\n                        this.newFocusedDayId = this.dayViewGrid[this.dayViewGrid.length - 1][grid.x].id;\n                    }\n                    break;\n                }\n                case ('ArrowDown'): {\n                    event.preventDefault();\n                    if (grid.y < this.dayViewGrid.length - 1) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y + 1][grid.x].id;\n                    } else {\n                        this.selectNextMonth();\n                        this.newFocusedDayId = this.dayViewGrid[0][grid.x].id;\n                    }\n                    break;\n                }\n                case ('ArrowLeft'): {\n                    event.preventDefault();\n                    if (grid.x > 0) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y][grid.x - 1].id;\n                    } else if (grid.y > 0) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y - 1][this.dayViewGrid[0].length - 1].id;\n                    } else {\n                        this.selectPreviousMonth();\n                        this.newFocusedDayId =\n                            this.dayViewGrid[this.dayViewGrid.length - 1][this.dayViewGrid[0].length - 1].id\n                            ;\n                    }\n                    break;\n                }\n                case ('ArrowRight'): {\n                    event.preventDefault();\n                    if (grid.x < this.dayViewGrid[0].length - 1) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y][grid.x + 1].id;\n                    } else if (grid.y < this.dayViewGrid.length - 1) {\n                        this.newFocusedDayId = this.dayViewGrid[grid.y + 1][0].id;\n                    } else {\n                        this.selectNextMonth();\n                        this.newFocusedDayId = this.dayViewGrid[0][0].id;\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (this.newFocusedDayId) {\n            this.focusElement(this.newFocusedDayId);\n        }\n    }\n\n    /** @hidden */\n    public ngOnChanges(): void {\n        this.buildDayViewGrid();\n    }\n\n    /** @hidden */\n    ngAfterViewChecked(): void {\n        if (this.newFocusedDayId) {\n            this.focusElement(this.newFocusedDayId);\n            this.newFocusedDayId = null;\n        }\n    }\n\n    /** @hidden\n     *  Method that allow to focus elements inside this component\n     */\n    public focusElement(elementSelector): void {\n        const elementToFocus = this.eRef.nativeElement.querySelector('#' + elementSelector);\n        if (elementToFocus) {\n            elementToFocus.focus();\n        }\n    }\n\n    /** Active day means that with tabindex = 0, it's selected day or today or first day */\n    public focusActiveDay(): void {\n        this.newFocusedDayId = this.getActiveCell(\n            this.calendarDayList.filter(cell => cell.monthStatus === 'current')\n        ).id;\n    }\n\n    /** Function that gives array of all displayed CalendarDays */\n    public get calendarDayList(): CalendarDay[] {\n        return this.dayViewGrid.reduce((totalCalendarRows: CalendarDay[], calendarRow: CalendarDay[]) => {\n            if (!calendarRow) {\n                calendarRow = [];\n            }\n            return totalCalendarRows.concat(calendarRow);\n        });\n    }\n\n    /**\n     * Method that selects previous month\n     * Triggered only when the month is changed during changing focus\n     * Also triggers event to parent calendar component and rebuilds day view grid\n     */\n    private selectPreviousMonth(): void {\n        if (this.currentlyDisplayed.month > 1) {\n            this.currentlyDisplayed = { ...this.currentlyDisplayed, month: this.currentlyDisplayed.month - 1 };\n        } else {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year - 1, month: 12 };\n        }\n        this.buildDayViewGrid();\n        this.previousMonthSelect.emit();\n    }\n\n    /**\n     * Method that selects next month\n     * Triggered only when the month is changed during changing focus\n     * Also triggers event to parent calendar component and rebuilds day view grid\n     */\n    private selectNextMonth(): void {\n        if (this.currentlyDisplayed.month > 1) {\n            this.currentlyDisplayed = { ...this.currentlyDisplayed, month: this.currentlyDisplayed.month + 1 };\n        } else {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year + 1, month: 1 };\n        }\n        this.buildDayViewGrid();\n        this.nextMonthSelect.emit();\n    }\n\n    /**\n     * Method that creates array of CalendarDay models which will be shown on day grid,\n     * depending on current month and year.\n     */\n    private populateCalendar(): CalendarDay[] {\n        let calendar: CalendarDay[] = [];\n\n        calendar = this.getPreviousMonthDays(calendar);\n        calendar = calendar.concat(this.getCurrentMonthDays());\n        calendar = this.getNextMonthDays(calendar);\n\n        calendar.forEach((call, index: number) => call.id = this.id + '-fd-day-' + (Math.floor(index / 7) + 1) + '' + (index % 7));\n\n        return calendar;\n    }\n\n    /**\n     * Method that builds 2 dimensions day view grid, also sets up currently displayed month, or year,\n     * when there is not any.\n     */\n    private buildDayViewGrid(): void {\n        if (!this.currentlyDisplayed) {\n            if (this.selectedDate) {\n                this.currentlyDisplayed = { month: this.selectedDate.month, year: this.selectedDate.year };\n            } else {\n                this.currentlyDisplayed = { month: FdDate.getToday().month, year: FdDate.getToday().year };\n            }\n        }\n\n        const calendarDays = this.populateCalendar();\n        const dayViewGrid: CalendarDay[][] = [];\n\n        while (calendarDays.length > 0) {\n            dayViewGrid.push(calendarDays.splice(0, 7));\n        }\n        this.dayViewGrid = dayViewGrid;\n        return;\n    }\n\n    /**\n     * Method which provides array of CalendarDay, which contains every single day of currently shown month/year.\n     */\n    private getCurrentMonthDays(): CalendarDay[] {\n        const month = this.currentlyDisplayed.month;\n        const year = this.currentlyDisplayed.year;\n        const calendarDays: CalendarDay[] = [];\n        const amountOfDaysInCurrentMonth: number = CalendarService.getDaysInMonth(month, year);\n        for (let dayNumber = 1; dayNumber <= amountOfDaysInCurrentMonth; dayNumber++) {\n            const fdDate: FdDate = new FdDate(year, month, dayNumber);\n            calendarDays.push({\n                ...this.getDay(fdDate),\n                monthStatus: 'current',\n                today: CalendarService.datesEqual(FdDate.getToday(), fdDate)\n            });\n        }\n        this.getActiveCell(calendarDays).isTabIndexed = true;\n        return calendarDays;\n    }\n\n    /**\n     * Method that returns active cell, which means:\n     * if there is any selected day, return selected day\n     * if there is no selected day, but there is today day, return today day\n     * if there is no today, or selected, return first one\n     */\n    private getActiveCell(calendarDays: CalendarDay[]): CalendarDay {\n        if (calendarDays.find(cell => cell.selected)) {\n            return calendarDays.find(cell => cell.selected);\n        } else if (calendarDays.find(cell => cell.today)) {\n            return calendarDays.find(cell => cell.today);\n        } else {\n            return calendarDays[0];\n        }\n    }\n\n    /**\n     * Method which provides array of CalendarDay, which contains last 0-6 days of previous month/year. Theses days\n     * fills the gap between starting startingDayOfWeek and first day of current month\n     */\n    private getPreviousMonthDays(calendarDays: CalendarDay[]): CalendarDay[] {\n        const month = this.currentlyDisplayed.month > 1 ? this.currentlyDisplayed.month - 1 : 12;\n        const year = this.currentlyDisplayed.month > 1 ? this.currentlyDisplayed.year : this.currentlyDisplayed.year - 1;\n        const amountOfDaysInCurrentMonth: number = CalendarService.getDaysInMonth(month, year);\n        const prevMonthLastDate = new FdDate(year, month, amountOfDaysInCurrentMonth);\n        const prevMonthLastDay = amountOfDaysInCurrentMonth;\n        let prevMonthLastWeekDay = prevMonthLastDate.getDay() - this.startingDayOfWeek;\n\n        /** Checking if there are some days cut by startingDayOfWeek option\n         *  If yes, there is whole week added, to avoid hiding\n         */\n        if (prevMonthLastWeekDay < 0) {\n            prevMonthLastWeekDay = prevMonthLastWeekDay + 7;\n        }\n\n        if (prevMonthLastWeekDay < 6) {\n            while (prevMonthLastWeekDay >= 0) {\n                const prevMonthDay = prevMonthLastDay - prevMonthLastWeekDay;\n                const fdDate = new FdDate(year, month, prevMonthDay);\n                calendarDays.push({ ...this.getDay(fdDate), monthStatus: 'previous' });\n                prevMonthLastWeekDay--;\n            }\n        }\n        return calendarDays;\n    }\n\n    /**\n     * Method which provides array of CalendarDay, which contains first days of next month/year. Theses days\n     * fills the gap between last day of current day and end of 6-weeks calendar grid.\n     */\n    private getNextMonthDays(calendarDays: CalendarDay[]): CalendarDay[] {\n        const month = this.currentlyDisplayed.month < 12 ? this.currentlyDisplayed.month + 1 : 1;\n        const year = this.currentlyDisplayed.month < 12 ? this.currentlyDisplayed.year : this.currentlyDisplayed.year + 1;\n\n        // The calendar grid can have 6 (42 days) weeks\n        const nextMonthDisplayedDays = 42 - calendarDays.length;\n\n        for (let nextD = 1; nextD <= nextMonthDisplayedDays; nextD++) {\n            const fdDate = new FdDate(year, month, nextD);\n            calendarDays.push({ ...this.getDay(fdDate), monthStatus: 'next' });\n        }\n        return calendarDays;\n    }\n\n    /**\n     * Method that generates whole day model basing on fdDate, disabling functions, block functions, and actually\n     * chosen range / single date.\n     */\n    private getDay(fdDate: FdDate): CalendarDay {\n        const day: CalendarDay = {\n            date: fdDate,\n            weekDay: fdDate.getDay(),\n            disabled: this.disableFunction(fdDate),\n            blocked: this.blockFunction(fdDate),\n            selected: (\n                (this.calType === 'single' && CalendarService.datesEqual(fdDate, this.selectedDate)) ||\n                (this.selectedRangeDate && CalendarService.datesEqual(fdDate, this.selectedRangeDate.start)) ||\n                (this.selectedRangeDate && CalendarService.datesEqual(fdDate, this.selectedRangeDate.end))\n            ),\n            selectedFirst: (this.selectedRangeDate && CalendarService.datesEqual(fdDate, this.selectedRangeDate.start)),\n            selectedLast: (this.selectedRangeDate && CalendarService.datesEqual(fdDate, this.selectedRangeDate.end)),\n            selectedRange: (this.selectedRangeDate && (\n                (this.selectedRangeDate.start && (this.selectedRangeDate.start.getTimeStamp() < fdDate.getTimeStamp())) &&\n                (this.selectedRangeDate.end && (this.selectedRangeDate.end.getTimeStamp() > fdDate.getTimeStamp()))\n            )),\n            ariaLabel: this.calendarI18n.getDayAriaLabel(fdDate.toDate())\n        };\n\n        if (this.calType === 'range' && (this.selectCounter === 0 || this.selectCounter === 2)) {\n            if (this.disableRangeStartFunction && !day.disabled) {\n                day.disabled = this.disableRangeStartFunction(day.date);\n            }\n            if (this.blockRangeStartFunction && !day.blocked) {\n                day.blocked = this.blockRangeStartFunction(day.date);\n            }\n        } else if (this.selectCounter === 1) {\n            if (this.disableRangeEndFunction && !day.disabled) {\n                day.disabled = this.disableRangeEndFunction(day.date);\n            }\n\n            if (this.blockRangeEndFunction && !day.blocked) {\n                day.blocked = this.blockRangeEndFunction(day.date);\n            }\n        }\n\n        return day;\n    }\n\n    /**\n     * Method that returns first letter of every weekday, basing on CalendarI18nDefault. Can be changed by user by\n     * providing other class which implements CalendarI18n\n     */\n    get shortWeekDays(): string[] {\n        return this.calendarI18n.getAllShortWeekdays()\n            .slice(this.startingDayOfWeek - 1)\n            .concat(this.calendarI18n.getAllShortWeekdays().slice(0, this.startingDayOfWeek - 1))\n            .map(weekday => weekday[0].toLocaleUpperCase());\n    }\n}\n","import { Component, Input, Output, ViewEncapsulation, EventEmitter, ElementRef, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { FdDate } from '../../models/fd-date';\nimport { CalendarI18n } from '../../i18n/calendar-i18n';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CalendarService } from '../../calendar.service';\n\n/** Component representing the month view of the calendar. */\n@Component({\n    selector: 'fd-calendar-month-view',\n    templateUrl: './calendar-month-view.component.html',\n    styleUrls: ['./calendar-month-view.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[attr.id]': 'id + \"-month-view\"'\n    }\n})\nexport class CalendarMonthViewComponent implements OnInit, OnDestroy {\n\n    /** A number offset used to achieve the 1-12 representation of the calendar */\n    private readonly _monthOffset: number = 1;\n\n    /** An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)  */\n    private readonly onDestroy$: Subject<void> = new Subject<void>();\n\n    /** The id of the calendar passed from the parent component */\n    @Input()\n    id: string;\n\n    /** A number (1-12) representing the selected month */\n    @Input()\n    monthSelected: number;\n\n    /** A function that handles escape focus */\n    @Input()\n    focusEscapeFunction: Function;\n\n    /** An event fired when a new month is selected */\n    @Output()\n    readonly monthClicked: EventEmitter<number> = new EventEmitter<number>();\n\n    constructor(\n        private eRef: ElementRef,\n        private cdRef: ChangeDetectorRef,\n        private calendarI18n: CalendarI18n,\n        private calendarService: CalendarService\n    ) {}\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.calendarService.focusEscapeFunction = this.focusEscapeFunction;\n\n        this.calendarService.onFocusIdChange\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => this.focusElement('#' + this.id + '-fd-month-' + index))\n        ;\n\n        this.calendarService.onKeySelect\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => this.selectMonth(index))\n        ;\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n\n    /** Get a number (1-12) representing the current month  */\n    get currentMonth(): number {\n        return FdDate.getToday().month;\n    }\n\n    /**  Getter for the private class member _monthOffset */\n    get monthOffset(): number {\n        return this._monthOffset;\n    }\n\n    /** Method for handling the mouse click event when a month is selected  */\n    selectMonth(selectedMonth: number, event?: MouseEvent): void {\n        if (event) {\n            event.stopPropagation();\n        }\n        this.monthSelected = selectedMonth + this.monthOffset;\n        this.monthClicked.emit(this.monthSelected);\n    }\n\n    /** Method for handling the keyboard events (a11y) */\n    onKeydownMonthHandler(event, index: number): void {\n       this.calendarService.onKeydownHandler(event, index)\n    }\n\n    /** Method that allows to focus elements inside this component */\n    focusElement(elementSelector: string): void {\n        const elementToFocus: HTMLElement = this.eRef.nativeElement.querySelector(elementSelector);\n        if (elementToFocus) {\n            elementToFocus.focus();\n        }\n    }\n\n    /** Method that returns list of short month names from currently provided calendarI18n service */\n    get shortMonthNames(): string[] {\n        return this.calendarI18n.getAllShortMonthNames();\n    }\n}\n","import { Component, OnInit, ViewEncapsulation, Output, Input, EventEmitter, ElementRef, AfterViewChecked, OnDestroy } from '@angular/core';\nimport { FdDate } from '../../models/fd-date';\nimport { takeUntil } from 'rxjs/operators';\nimport { CalendarService } from '../../calendar.service';\nimport { Subject } from 'rxjs';\n\n/** Component representing the YearView of the Calendar Component. */\n@Component({\n    selector: 'fd-calendar-year-view',\n    templateUrl: './calendar-year-view.component.html',\n    styleUrls: ['./calendar-year-view.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[attr.id]': 'id + \"-year-view\"'\n    }\n})\nexport class CalendarYearViewComponent implements AfterViewChecked, OnInit, OnDestroy {\n\n    /** @hidden\n     *  This variable is used to define which year from calendarYearList should be focusable by tab key\n     */\n    activeYear: number;\n\n    /** Parameter that stores the dozen of years that are currently being displayed. */\n    calendarYearList: number[];\n\n    /** Parameter storing the year of the present day. */\n    currentYear: number = FdDate.getToday().year;\n\n    /** Parameter storing first shown year on list */\n    firstYearInList: number = this.currentYear;\n\n    /** An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)  */\n    private readonly onDestroy$: Subject<void> = new Subject<void>();\n\n    /** @hidden */\n    private newFocusedYearId: string;\n\n    /** Parameter used in id of years used for help with focusing on the correct element during keyboard navigation. */\n    @Input()\n    id: string;\n\n    /** Function that is called when the focus would escape the element. */\n    @Input()\n    focusEscapeFunction: Function;\n\n    /** Parameter holding the year that is currently selected. */\n    @Input()\n    yearSelected: number;\n\n    /** Event fired when a year is selected. */\n    @Output()\n    readonly yearClicked: EventEmitter<number> = new EventEmitter<number>();\n\n    /** @hidden */\n    constructor(private eRef: ElementRef, private calendarService: CalendarService) {\n    }\n\n    /** @hidden */\n    ngAfterViewChecked(): void {\n        if (this.newFocusedYearId) {\n            this.focusElement(this.newFocusedYearId);\n            this.newFocusedYearId = null;\n        }\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.firstYearInList = this.yearSelected;\n        this.constructYearList();\n\n        this.calendarService.onFocusIdChange\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => {\n                this.newFocusedYearId = this.id + '-fd-year-' + index;\n                this.focusElement(this.newFocusedYearId);\n            })\n        ;\n        this.calendarService.focusEscapeFunction = this.focusEscapeFunction;\n\n        this.calendarService.onKeySelect\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => this.selectYear(this.calendarYearList[index]))\n        ;\n\n        this.calendarService.onListStartApproach\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => this.loadPreviousYearList())\n        ;\n\n        this.calendarService.onListEndApproach\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => this.loadNextYearList())\n        ;\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n\n    /**\n     * Method that returns active cell, which means:\n     * if there is any selected year, return selected year\n     * if there is no selected year, but there is current year, return current year\n     * if there is no current year, or selected, return first one\n     */\n    private getActiveYear(): number {\n        const selectedYear: number = this.calendarYearList.find(year => year === this.yearSelected);\n        if (selectedYear) {\n            return selectedYear;\n        }\n\n        const currentYear: number = this.calendarYearList.find(year => year === this.currentYear);\n        if (currentYear) {\n            return currentYear;\n        }\n\n        return this.calendarYearList[0];\n    }\n\n    /** Method for handling the keyboard navigation. */\n    onKeydownYearHandler(event, index: number): void {\n        this.calendarService.onKeydownHandler(event, index);\n    }\n\n    /** Method used to load the previous 12 years to be displayed. */\n    loadNextYearList(): void {\n        this.firstYearInList += 12;\n        this.constructYearList();\n    }\n\n    /** Method used to load the next 12 years to be displayed. */\n    loadPreviousYearList(): void {\n        this.firstYearInList -= 12;\n        this.constructYearList();\n    }\n\n    /** Method allowing focusing on elements within this component. */\n    focusElement(elementSelector: string): void {\n        const elementToFocus: HTMLElement = this.eRef.nativeElement.querySelector('#' + elementSelector);\n        if (elementToFocus) {\n            this.eRef.nativeElement.querySelector('#' + elementSelector).focus();\n        }\n    }\n\n    /** Method that sends the year to the parent component when it is clicked. */\n    selectYear(selectedYear: number, event?: MouseEvent) {\n        if (event) {\n            event.stopPropagation();\n        }\n        this.yearSelected = selectedYear;\n        this.yearClicked.emit(this.yearSelected);\n    }\n\n    /** @hidden */\n    private constructYearList(): void {\n        const displayedYearsAmount: number = 12;\n        this.calendarYearList = [];\n        for (let x = 0; x < displayedYearsAmount; ++x) {\n            this.calendarYearList.push(this.firstYearInList + x);\n        }\n        this.activeYear = this.getActiveYear();\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { CalendarI18n } from './i18n/calendar-i18n';\nimport { FdDate } from './models/fd-date';\nimport { CalendarCurrent } from './models/calendar-current';\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\nimport { CalendarDayViewComponent } from './calendar-views/calendar-day-view/calendar-day-view.component';\nimport { FdRangeDate } from './models/fd-range-date';\nimport { CalendarYearViewComponent } from './calendar-views/calendar-year-view/calendar-year-view.component';\n\nlet calendarUniqueId: number = 0;\n\n/** Type of calendar */\nexport type CalendarType = 'single' | 'range';\n\n/** Type for the calendar view */\nexport type FdCalendarView = 'day' | 'month' | 'year';\n\n/** Type for the days of the week. */\nexport type DaysOfWeek = 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\n/**\n * Months: 1 = January, 12 = december.\n * Days: 1 = Sunday, 7 = Saturday\n *\n * Calendar component used for selecting dates, typically used by the DatePicker and DateTimePicker components.\n * Supports the Angular forms module, enabling form validity, ngModel, etc.\n */\n@Component({\n    selector: 'fd-calendar',\n    templateUrl: './calendar.component.html',\n    styleUrls: ['./calendar.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CalendarComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => CalendarComponent),\n            multi: true\n        }\n    ],\n    host: {\n        '(blur)': 'onTouched()',\n        '[attr.id]': 'id'\n    }\n})\nexport class CalendarComponent implements OnInit, ControlValueAccessor, Validator {\n\n    /** @hidden */\n    @ViewChild(CalendarDayViewComponent) dayViewComponent: CalendarDayViewComponent;\n\n    /** @hidden */\n    @ViewChild(CalendarYearViewComponent) yearViewComponent: CalendarYearViewComponent;\n\n    /** @hidden */\n    @HostBinding('class.fd-calendar')\n    fdCalendarClass: boolean = true;\n\n    /** @hidden */\n    @HostBinding('class.fd-has-display-block')\n    fdHasDisplayBlockClass: boolean = true;\n\n    /** Currently displayed days depending on month and year */\n    currentlyDisplayed: CalendarCurrent;\n\n    /** The currently selected FdDate model in single mode. */\n    @Input()\n    public selectedDate: FdDate = FdDate.getToday();\n\n    /** The currently selected FdDates model start and end in range mode. */\n    @Input()\n    public selectedRangeDate: FdRangeDate;\n\n    /** Actually shown active view one of 'day' | 'month' | 'year' */\n    @Input()\n    public activeView: FdCalendarView = 'day';\n\n    /** The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on. */\n    @Input()\n    public startingDayOfWeek: DaysOfWeek = 1;\n\n    /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n    @Input()\n    public calType: CalendarType = 'single';\n\n    /** Id of the calendar. If none is provided, one will be generated. */\n    @Input()\n    id = 'fd-calendar-' + calendarUniqueId++;\n\n    /** Event thrown every time active view is changed */\n    @Output()\n    public readonly activeViewChange: EventEmitter<FdCalendarView> = new EventEmitter<FdCalendarView>();\n\n    /** Event thrown every time selected date in single mode is changed */\n    @Output()\n    public readonly selectedDateChange: EventEmitter<FdDate> = new EventEmitter<FdDate>();\n\n    /** Event thrown every time selected first or last date in range mode is changed */\n    @Output()\n    public readonly selectedRangeDateChange: EventEmitter<FdRangeDate> = new EventEmitter<FdRangeDate>();\n\n    /** Event thrown every time when value is overwritten from outside and throw back isValid */\n    @Output()\n    public readonly isValidDateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event thrown every time when calendar should be closed */\n    @Output()\n    public readonly closeCalendar: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden */\n    onChange: Function = () => {\n    };\n\n    /** @hidden */\n    onTouched: Function = () => {\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /** That allows to define function that should happen, when focus should normally escape of component */\n    @Input()\n    escapeFocusFunction: Function = (): void => {\n        if (document.getElementById(this.id + '-left-arrow')) {\n            document.getElementById(this.id + '-left-arrow').focus();\n        }\n    };\n\n    /** @hidden */\n    constructor(\n        public calendarI18n: CalendarI18n,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.prepareDisplayedView();\n    }\n\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms.\n     */\n    writeValue(selected: FdRangeDate | FdDate): void {\n        let valid: boolean = true;\n        if (selected) {\n            if (this.calType === 'single') {\n                selected = <FdDate>selected;\n\n                valid = selected.isDateValid();\n                this.selectedDate = selected;\n\n                if (selected.isDateValid()) {\n                    this.prepareDisplayedView();\n                }\n            } else if (this.calType === 'range') {\n                selected = <FdRangeDate>selected;\n\n                if (!selected.start || !selected.end) {\n                    valid = false;\n                }\n                if (selected.start && !selected.start.isDateValid()) {\n                    valid = false;\n                }\n                if (selected.end && !selected.end.isDateValid()) {\n                    valid = false;\n                }\n                this.selectedRangeDate = { start: selected.start, end: selected.end };\n                if (valid) {\n                    this.prepareDisplayedView();\n                }\n            }\n        }\n        this.isValidDateChange.emit(valid);\n    }\n\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any\n    } {\n        return this.isModelValid() ? null : {\n            dateValidation: {\n                valid: false\n            }\n        };\n    }\n\n    /** @hidden */\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState?(isDisabled: boolean): void {\n        // Not needed\n    }\n\n    /**\n     * Method that handle active view change and throws event.\n     */\n    public handleActiveViewChange(activeView: FdCalendarView): void {\n        this.activeView = activeView;\n        this.activeViewChange.emit(activeView);\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from day view component, when there is selected single date changed\n     */\n    selectedDateChanged(date: FdDate): void {\n        this.selectedDate = date;\n        this.onChange(date);\n        this.onTouched();\n        this.selectedDateChange.emit(date);\n        this.closeCalendar.emit();\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from day view component, when there is selected range date changed\n     */\n    public selectedRangeDateChanged(dates: FdRangeDate): void {\n        if (dates) {\n            this.selectedRangeDate = { start: dates.start, end: dates.end ? dates.end : dates.start };\n            this.selectedRangeDateChange.emit(this.selectedRangeDate);\n            this.onChange(this.selectedRangeDate);\n            this.onTouched();\n            this.closeCalendar.emit();\n        }\n    }\n\n    /** Function that handles next arrow icon click, depending on current view it changes month, year or list of years */\n    public handleNextArrowClick(): void {\n        switch (this.activeView) {\n            case 'day':\n                this.displayNextMonth();\n                break;\n            case 'month':\n                this.displayNextYear();\n                break;\n            case 'year':\n                this.displayNextYearList();\n                break;\n        }\n        this.onTouched();\n    }\n\n    /** Function that handles previous arrow icon click, depending on current view it changes month, year or list of years */\n    public handlePreviousArrowClick(): void {\n        switch (this.activeView) {\n            case 'day':\n                this.displayPreviousMonth();\n                break;\n            case 'month':\n                this.displayPreviousYear();\n                break;\n            case 'year':\n                this.displayPreviousYearList();\n                break;\n        }\n        this.onTouched();\n    }\n\n    /** Function that allows to switch actual view to next month */\n    public displayNextMonth(): void {\n        if (this.currentlyDisplayed.month === 12) {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year + 1, month: 1 };\n        } else {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year, month: this.currentlyDisplayed.month + 1 };\n        }\n    }\n\n    /** Function that allows to switch actual view to previous month */\n    public displayPreviousMonth(): void {\n        if (this.currentlyDisplayed.month <= 1) {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year - 1, month: 12 };\n        } else {\n            this.currentlyDisplayed = { year: this.currentlyDisplayed.year, month: this.currentlyDisplayed.month - 1 };\n        }\n    }\n\n    /** Function that allows to switch actual view to next year */\n    public displayNextYear(): void {\n        this.currentlyDisplayed = { month: this.currentlyDisplayed.month, year: this.currentlyDisplayed.year + 1 };\n    }\n\n    /** Function that allows to switch actual view to previous year */\n    public displayPreviousYear(): void {\n        this.currentlyDisplayed = { month: this.currentlyDisplayed.month, year: this.currentlyDisplayed.year - 1 };\n    }\n\n    /** Function that allows to switch actually displayed list of year to next year list*/\n    public displayNextYearList(): void {\n        this.yearViewComponent.loadNextYearList();\n    }\n\n    /** Function that allows to switch actually displayed list of year to previous year list*/\n    public displayPreviousYearList(): void {\n        this.yearViewComponent.loadPreviousYearList();\n    }\n\n    /** Function that allows to change currently displayed month/year configuration,\n     * which are connected to days displayed\n     */\n    public setCurrentlyDisplayed(fdDate: FdDate): void {\n        this.currentlyDisplayed = { month: fdDate.month, year: fdDate.year };\n    }\n\n    /**\n     * @hidden\n     * Function that handles changes from month view child component, changes actual view and changes currently displayed month\n     */\n    public handleMonthViewChange(month: number): void {\n        this.currentlyDisplayed = { month: month, year: this.currentlyDisplayed.year };\n        this.activeView = 'day';\n        this.activeViewChange.emit(this.activeView);\n        this.changeDetectorRef.detectChanges();\n        this.dayViewComponent.focusActiveDay();\n    }\n\n    public selectedYear(yearSelected: number) {\n        this.activeView = 'day';\n        this.currentlyDisplayed.year = yearSelected;\n        this.changeDetectorRef.detectChanges();\n        this.dayViewComponent.focusActiveDay();\n    }\n\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    public isModelValid(): boolean {\n        if (this.calType === 'single') {\n            return this.selectedDate &&\n                this.selectedDate instanceof FdDate &&\n                this.selectedDate.isDateValid();\n        } else {\n            return this.selectedRangeDate &&\n                (\n                    this.selectedRangeDate.start &&\n                    this.selectedRangeDate.start instanceof FdDate &&\n                    this.selectedRangeDate.start.isDateValid()\n                ) && (\n                    this.selectedRangeDate.end &&\n                    this.selectedRangeDate.end instanceof FdDate &&\n                    this.selectedRangeDate.start.isDateValid()\n                );\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that sets up the currently displayed variables, like shown month and year.\n     * Day grid is based on currently displayed month and year\n     */\n    private prepareDisplayedView(): void {\n        if (this.calType === 'single' && this.selectedDate && this.selectedDate.month && this.selectedDate.year) {\n            this.currentlyDisplayed = { month: this.selectedDate.month, year: this.selectedDate.year };\n        } else if (this.selectedRangeDate && this.selectedRangeDate.start) {\n            this.currentlyDisplayed = {\n                month: this.selectedRangeDate.start.month,\n                year: this.selectedRangeDate.start.year\n            };\n        } else if (this.selectedRangeDate && this.selectedRangeDate.end) {\n            this.currentlyDisplayed = {\n                month: this.selectedRangeDate.end.month,\n                year: this.selectedRangeDate.end.year\n            };\n        } else {\n            const tempDate = FdDate.getToday();\n            this.currentlyDisplayed = { month: tempDate.month, year: tempDate.year };\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '../icon/icon.module';\n\nimport { CalendarHeaderComponent } from './calendar-header/calendar-header.component';\nimport { CalendarDayViewComponent } from './calendar-views/calendar-day-view/calendar-day-view.component';\nimport { CalendarMonthViewComponent } from './calendar-views/calendar-month-view/calendar-month-view.component';\nimport { CalendarYearViewComponent } from './calendar-views/calendar-year-view/calendar-year-view.component';\nimport { CalendarService } from './calendar.service';\nimport { CalendarComponent } from './calendar.component';\n\n@NgModule({\n    declarations: [CalendarComponent, CalendarHeaderComponent,\n        CalendarDayViewComponent, CalendarMonthViewComponent, CalendarYearViewComponent],\n    imports: [CommonModule, IconModule],\n    exports: [CalendarComponent, CalendarDayViewComponent,\n        CalendarHeaderComponent, CalendarYearViewComponent, CalendarMonthViewComponent],\n    providers: [CalendarService]\n})\nexport class CalendarModule {}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component, ElementRef, EmbeddedViewRef,\n    EventEmitter, HostBinding,\n    HostListener, OnDestroy,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport focusTrap from 'focus-trap';\n\n/**\n * Not intended for external use.\n */\n@Component({\n    selector: 'fd-popover-container',\n    template: `\n        <span class=\"fd-popover__arrow\" x-arrow></span>\n        <ng-container #vc>\n            {{contentString}}\n        </ng-container>\n    `,\n    styleUrls: ['./popover-container.scss'],\n    host: {\n        class: 'fd-popover__popper fd-popover-container-custom',\n        'tabindex': '-1'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopoverContainer implements AfterViewInit, OnDestroy {\n\n    @ViewChild('vc', { read: ViewContainerRef })\n    containerRef: ViewContainerRef;\n\n    @HostBinding('class.fd-popover__popper--no-arrow')\n    noArrow: boolean = true;\n\n    @Output()\n    isSetup = new EventEmitter<undefined>();\n\n    content: TemplateRef<any> | string;\n\n    contentString: string;\n\n    context: any;\n\n    placement: string;\n\n    focusTrapped: boolean;\n\n    closeOnEscapeKey: boolean;\n\n    private componentRef: EmbeddedViewRef<any>;\n    private focusTrap: any;\n\n    constructor(private elRef: ElementRef,\n                private cdRef: ChangeDetectorRef) {\n    }\n\n    ngAfterViewInit(): void {\n        if (this.content instanceof TemplateRef) {\n            this.loadFromTemplate(this.content);\n        } else {\n            this.contentString = this.content;\n        }\n        this.setupFocusTrap();\n        this.isSetup.emit();\n        this.cdRef.detectChanges();\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusTrap) {\n            this.focusTrap.deactivate();\n        }\n    }\n\n    private loadFromTemplate(content: TemplateRef<any>): void {\n        this.containerRef.clear();\n        const context = {\n            $implicit: this.context\n        };\n        this.componentRef = this.containerRef.createEmbeddedView(content, context);\n    }\n\n    private setupFocusTrap(): void {\n        if (this.focusTrapped) {\n            try {\n                this.focusTrap = focusTrap(this.elRef.nativeElement, {\n                    clickOutsideDeactivates: true,\n                    escapeDeactivates: false,\n                    initialFocus: this.elRef.nativeElement\n                });\n                this.focusTrap.activate();\n            } catch (e) {\n                console.warn('Attempted to focus trap the popover, but no tabbable elements were found.');\n            }\n        }\n    }\n\n    @HostListener('keydown.escape')\n    escapeHandler(): void {\n        if (this.containerRef && this.context.isOpen && this.closeOnEscapeKey) {\n            this.context.close();\n        }\n    }\n}\n","import {\n    ApplicationRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    ElementRef, EmbeddedViewRef, EventEmitter, HostListener,\n    Injector, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { PopoverContainer } from './popover-container';\nimport Popper, { Placement, PopperOptions } from 'popper.js';\n\nexport type PopoverFillMode = 'at-least' | 'equal';\n\n/**\n * Directive which manages the popper and popover components of the library.\n * It can be attached to any element. To bind it to a body, use the following syntax.\n * ```html\n * <div [fdPopover]=\"template\">Control Element</div>\n * <ng-template #template>\n *     Popover Body\n * </ng-template>\n * ```\n */\n@Directive({\n    selector: '[fdPopover]'\n})\nexport class PopoverDirective implements OnInit, OnDestroy, OnChanges {\n\n    /** Content of the popover. Used through the actual directive tag. Accepts strings or TemplateRefs. */\n    @Input('fdPopover')\n    content: TemplateRef<any> | string;\n\n    /** Whether the popover is open. Can be used through two-way binding. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** The trigger events that will open/close the popover.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /** Whether the popover should display the default arrow. */\n    @Input()\n    noArrow: boolean = true;\n\n    /** The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end. */\n    @Input()\n    placement: Placement;\n\n    /** Whether the popover should be focusTrapped. */\n    @Input()\n    focusTrapped: boolean = false;\n\n    /** Whether the popover should close when the escape key is pressed. */\n    @Input()\n    closeOnEscapeKey: boolean = true;\n\n    /** Whether the popover is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether the popover should close when a click is made outside its boundaries. */\n    @Input()\n    closeOnOutsideClick: boolean = true;\n\n    /** The element to which the popover should be appended. */\n    @Input()\n    appendTo: HTMLElement | 'body' = 'body';\n\n    /** The Popper.js options to attach to this popover.\n     * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details. */\n    @Input()\n    options: PopperOptions = {\n        placement: 'bottom-start',\n        modifiers: {\n            preventOverflow: {\n                enabled: true,\n                escapeWithReference: true,\n                boundariesElement: 'scrollParent'\n            }\n        }\n    };\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode;\n\n    /** Event emitted when the state of the isOpen property changes. */\n    @Output()\n    isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private containerRef: ComponentRef<PopoverContainer>;\n    private popper: Popper;\n    private eventRef: Function[] = [];\n    private isSetup: boolean = false;\n    private _outsideClickEventReference: () => void;\n\n    /** @hidden */\n    constructor(private elRef: ElementRef,\n                private cdRef: ChangeDetectorRef,\n                private resolver: ComponentFactoryResolver,\n                private injector: Injector,\n                private appRef: ApplicationRef,\n                private renderer: Renderer2) {\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.isOpen) {\n            this.open();\n        }\n\n        this.setupFillBehaviour();\n        this.initPlacement();\n\n        this.addTriggerListeners();\n        this.isSetup = true;\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        if (this.popper) {\n            this.popper.destroy();\n        }\n\n        if (this.containerRef) {\n            this.destroyContainer();\n        }\n\n        this.destroyTriggerListeners();\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isSetup) {\n            return;\n        }\n\n        if (changes.triggers) {\n            setTimeout(() => {\n                this.destroyTriggerListeners();\n                this.addTriggerListeners();\n            });\n        }\n\n        if (changes.isOpen) {\n            if (changes.isOpen.currentValue) {\n                setTimeout(() => {\n                    this.isOpen = false;\n                    this.open(false);\n                });\n            } else {\n                setTimeout(() => {\n                    this.isOpen = true;\n                    this.close(false);\n                });\n            }\n        }\n\n        if (changes.placement) {\n            setTimeout(() => {\n                this.initPlacement();\n            });\n        }\n\n        if (changes.fillControl) {\n            setTimeout(() => {\n                this.setupFillBehaviour();\n            });\n        }\n    }\n\n    /**\n     * Toggles the popover open state.\n     */\n    public toggle(fireEvent: boolean = true): void {\n        if (this.isOpen) {\n            this.close(fireEvent);\n        } else {\n            this.open(fireEvent);\n        }\n    }\n\n    /**\n     * Opens the popover.\n     */\n    public open(fireEvent: boolean = true): void {\n        if (!this.isOpen && !this.disabled) {\n            this.createContainer();\n            this._addListenerForOutsideClick();\n            this.isOpen = true;\n\n            if (fireEvent) {\n                this.isOpenChange.emit(this.isOpen);\n            }\n        }\n    }\n\n    /**\n     * Closes the popover.\n     */\n    public close(fireEvent: boolean = true): void {\n        if (this.isOpen) {\n            this.destroyContainer();\n            this.isOpen = false;\n\n            if (fireEvent) {\n                this.isOpenChange.emit(this.isOpen);\n            }\n        }\n    }\n\n    /**\n     * Forces an update of the popover's positioning calculation.\n     */\n    public updatePopper(): void {\n        if (this.popper) {\n            this.popper.scheduleUpdate();\n        }\n    }\n\n    private createContainer(): void {\n        if (this.containerRef) {\n            return;\n        }\n\n        const factory = this.resolver.resolveComponentFactory(PopoverContainer);\n        this.containerRef = factory.create(this.injector);\n\n        // Set instance properties\n        this.containerRef.instance.context = this;\n        this.containerRef.instance.content = this.content;\n        this.containerRef.instance.focusTrapped = this.focusTrapped;\n        this.containerRef.instance.noArrow = this.noArrow;\n        this.containerRef.instance.closeOnEscapeKey = this.closeOnEscapeKey;\n\n        this.appRef.attachView(this.containerRef.hostView);\n        const setupRef = this.containerRef.instance.isSetup.subscribe(() => {\n            this.createPopper();\n            setupRef.unsubscribe();\n        });\n\n        const containerEl = (this.containerRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n        if (this.appendTo === 'body') {\n            document.body.appendChild(containerEl);\n        } else {\n            this.appendTo.appendChild(containerEl);\n        }\n\n    }\n\n    private destroyTriggerListeners(): void {\n        if (this.eventRef && this.eventRef.length > 0) {\n            this.eventRef.forEach(event => {\n                event();\n            });\n            this.eventRef = [];\n        }\n    }\n\n    private addTriggerListeners(): void {\n        if (this.triggers && this.triggers.length > 0) {\n            this.triggers.forEach(trigger => {\n                this.eventRef.push(this.renderer.listen(this.elRef.nativeElement, trigger, () => {\n                    this.toggle();\n                }));\n            });\n        }\n    }\n\n    private destroyContainer(): void {\n        if (this.containerRef) {\n            this.appRef.detachView(this.containerRef.hostView);\n            this.containerRef.destroy();\n            this.containerRef = null;\n        }\n\n        if (this.popper) {\n            this.popper.destroy();\n            this.popper = null;\n        }\n    }\n\n    private createPopper(): void {\n        this.popper = new Popper(\n            this.elRef.nativeElement as HTMLElement,\n            this.containerRef.location.nativeElement as HTMLElement,\n            this.options\n        );\n    }\n\n    private fillReference(data): any {\n        data.offsets.popper.left = data.offsets.reference.left;\n        data.offsets.popper.right = data.offsets.reference.right;\n        data.offsets.popper.width = data.styles.width = data.offsets.reference.width;\n        return data;\n    }\n\n    private atLeastReference(data): any {\n        data.offsets.popper.left = data.offsets.reference.left;\n        data.offsets.popper.right = data.offsets.reference.right;\n        data.styles.minWidth = data.offsets.reference.width + 'px';\n        return data;\n    }\n\n    private initPlacement(): void {\n        if (this.placement) {\n            if (this.options) {\n                this.options.placement = this.placement;\n            } else {\n                this.options = {placement: this.placement}\n            }\n        }\n    }\n\n    private setupFillBehaviour(): void {\n        if (this.fillControlMode) {\n            if (this.options && this.options.modifiers) {\n                this.options.modifiers.fillReference = {\n                    enabled: true,\n                    fn: this.fillControlMode === 'equal' ? this.fillReference : this.atLeastReference,\n                    order: 840\n                }\n            } else {\n                this.options = {\n                    modifiers: {\n                        fillReference: {\n                            enabled: true,\n                            fn: this.fillControlMode === 'equal' ? this.fillReference : this.atLeastReference,\n                            order: 840\n                        }\n                    }\n                };\n            }\n        }\n    }\n\n    private _addListenerForOutsideClick(): void {\n        if (!this._outsideClickEventReference) {\n            this._outsideClickEventReference = this.renderer.listen('document', 'click', (event: MouseEvent) => {\n                if (this._shouldClose(event)) {\n                    this.close();\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            });\n        }\n    }\n\n    private _shouldClose(event: MouseEvent): boolean {\n        return this.containerRef &&\n            this.isOpen &&\n            this.closeOnOutsideClick &&\n            event.target !== this.elRef.nativeElement &&\n            !this.elRef.nativeElement.contains(event.target) &&\n            !this.containerRef.location.nativeElement.contains(event.target)\n        ;\n    }\n}\n","import { Component, Host, Inject, Input, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { PopoverComponent } from '../popover.component';\n/**\n * A component used to enforce a certain layout for the popover. With additional styling\n * ```html\n * <fd-popover>\n *     <fd-dropdown>Dropdown</fd-dropdown>\n *     <fd-popover-body>Popover Body</fd-popover-body>\n * </fd-popover>\n * ```\n */\n@Component({\n    selector: 'fd-dropdown-control',\n    host: {\n        class: 'fd-dropdown',\n    },\n    templateUrl: 'popover-dropdown.component.html',\n    encapsulation: ViewEncapsulation.None,\n})\nexport class PopoverDropdownComponent {\n    /** Whether the popover should have an arrow. */\n    @Input()\n    noArrow: boolean = true;\n\n    /** Whether the popover is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** The glyph to display. */\n    @Input()\n    glyph: string;\n\n    /** The btnType to display. */\n    @Input()\n    btnType: string = '';\n\n    /** Whether the dropdown is in compact format. */\n    @Input()\n    compact: boolean = false;\n\n    /** Whether the dropdown is in a toolbar. */\n    @Input()\n    toolbar: boolean = false;\n\n    /** Whether the dropdown is opened. */\n    @Input()\n    isOpen: boolean = false;\n\n}\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild, ViewEncapsulation, ContentChild\n} from '@angular/core';\nimport { Placement, PopperOptions } from 'popper.js';\nimport { PopoverDirective, PopoverFillMode } from './popover-directive/popover.directive';\nimport { PopoverDropdownComponent } from './popover-dropdown/popover-dropdown.component';\n\nlet popoverUniqueId: number = 0;\n\n/**\n * The popover is a wrapping component that accepts a *control* as well as a *body*.\n * The control is what will trigger the opening of the actual popover, which is called the body.\n * By default, popovers are triggered by click. This can be customized through the *triggers* input.\n * PopoverComponent is an abstraction of PopoverDirective.\n */\n@Component({\n    selector: 'fd-popover',\n    templateUrl: './popover.component.html',\n    styleUrls: ['./popover.component.scss'],\n    host: {\n        '[class.fd-popover-custom]': 'true',\n        '[attr.id]': 'id'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopoverComponent {\n\n    /** @hidden */\n    @ViewChild(PopoverDirective)\n    directiveRef: PopoverDirective;\n    /** @hidden */\n    @ContentChild(PopoverDropdownComponent) dropdownComponent: PopoverDropdownComponent;\n\n    /** Whether the popover should have an arrow. */\n    @Input()\n    noArrow: boolean = true;\n\n    /** Whether the popover is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether the popover should be treated as a dropdown. */\n    @Input()\n    isDropdown: boolean = false;\n\n    /** The element to which the popover should be appended. */\n    @Input()\n    appendTo: HTMLElement | 'body';\n\n    /** The trigger events that will open/close the popover.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /** The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end. */\n    @Input()\n    placement: Placement;\n\n    /** Whether the popover is open. Can be used through two-way binding. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** The Popper.js options to attach to this popover.\n     * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details. */\n    @Input()\n    options: PopperOptions = {\n        placement: 'bottom-start',\n        modifiers: {\n            preventOverflow: {\n                enabled: true,\n                escapeWithReference: true,\n                boundariesElement: 'scrollParent'\n            }\n        }\n    };\n\n    /** Whether the popover should be focusTrapped. */\n    @Input()\n    focusTrapped: boolean = false;\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode;\n\n    /** Whether the popover should close when a click is made outside its boundaries. */\n    @Input()\n    closeOnOutsideClick: boolean = true;\n\n    /** Whether the popover should close when the escape key is pressed. */\n    @Input()\n    closeOnEscapeKey: boolean = true;\n\n    /** Event emitted when the state of the isOpen property changes. */\n    @Output()\n    isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Id of the popover. If none is provided, one will be generated. */\n    @Input()\n    id: string = 'fd-popover-' + popoverUniqueId++;\n\n    /**\n     * Toggles the popover open state.\n     */\n    public toggle(): void {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Closes the popover.\n     */\n    public close(): void {\n        if (this.isOpen) {\n            this.isOpen = false;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Opens the popover.\n     */\n    public open(): void {\n        if (!this.isOpen) {\n            this.isOpen = true;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Forces an update of the popover's positioning calculation.\n     */\n    public updatePopover(): void {\n        this.directiveRef.updatePopper();\n    }\n\n    /**\n     * Function is called every time popover changes open attribute\n     */\n    public openChanged(isOpen: boolean) {\n        this.isOpenChange.emit(isOpen);\n        this.updateDropdownIsOpen(isOpen);\n    }\n\n\n    /** @hidden\n     *  Function that allows us to control aria-expanded on dropdown child\n     * */\n    private updateDropdownIsOpen(isOpen: boolean) {\n        if (this.dropdownComponent) {\n            this.dropdownComponent.isOpen = isOpen;\n        }\n    }\n\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * A component used to enforce a certain layout for the popover.\n * ```html\n * <fd-popover>\n *     <fd-popover-control>Control Element</fd-popover-control>\n *     <fd-popover-body>Popover Body</fd-popover-body>\n * </fd-popover>\n * ```\n */\n@Component({\n    selector: 'fd-popover-control',\n    templateUrl: './popover-control.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopoverControlComponent {}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * A component used to enforce a certain layout for the popover.\n * ```html\n * <fd-popover>\n *     <fd-popover-control>Control Element</fd-popover-control>\n *     <fd-popover-body>Popover Body</fd-popover-body>\n * </fd-popover>\n * ```\n */\n@Component({\n    selector: 'fd-popover-body',\n    templateUrl: './popover-body.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopoverBodyComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PopoverComponent } from './popover.component';\nimport { PopoverControlComponent } from './popover-control/popover-control.component';\nimport { PopoverBodyComponent } from './popover-body/popover-body.component';\nimport { PopoverDirective } from './popover-directive/popover.directive';\nimport { PopoverContainer } from './popover-directive/popover-container';\nimport { PopoverDropdownComponent } from './popover-dropdown/popover-dropdown.component';\n\n@NgModule({\n    declarations: [\n        PopoverComponent,\n        PopoverControlComponent,\n        PopoverBodyComponent,\n        PopoverDirective,\n        PopoverContainer,\n        PopoverDropdownComponent,\n    ],\n    imports: [CommonModule],\n    exports: [PopoverComponent, PopoverControlComponent, PopoverBodyComponent, PopoverDirective, PopoverDropdownComponent],\n    entryComponents: [PopoverContainer]\n})\nexport class PopoverModule {}\n","import {\n    Component, HostBinding,\n    ViewEncapsulation\n} from '@angular/core';\n\n/**\n * The component that represents a menu.\n */\n@Component({\n    selector: 'fd-menu',\n    templateUrl: './menu.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['menu.component.scss']\n})\nexport class MenuComponent {\n    /** @hidden */\n    @HostBinding('class.fd-menu')\n    fdMenuClass: boolean = true;\n\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a menu group.\n */\n@Component({\n    selector: 'fd-menu-group',\n    templateUrl: './menu-group.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class MenuGroupComponent {\n    /** @hidden*/\n    @HostBinding('class.fd-has-display-block')\n    fdHasDisplayBlockClass: boolean = true;\n\n    /** @hidden*/\n    @HostBinding('class.fd-menu__group')\n    fdMenuGroupClass: boolean = true;\n\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * The directive that represents the menu title.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-menu-title]'\n})\nexport class MenuTitleDirective {\n    /** @hidden */\n    @HostBinding('class')\n    elementClass = 'fd-menu__title';\n\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * The directive that represents a listing structure of the menu.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-menu-list]'\n})\nexport class MenuListDirective {\n    /** @hidden */\n    @HostBinding('class.fd-menu__list')\n    fdMenuListClass: boolean = true;\n}\n","import { Directive, ElementRef, HostBinding } from '@angular/core';\n\n/**\n * The directive that represents a menu item.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-menu-item]',\n})\nexport class MenuItemDirective {\n\n    /** @hidden*/\n    @HostBinding('class.fd-menu__item')\n    fdMenuItemClass: boolean = true;\n\n    /** @hidden */\n    constructor (public itemEl: ElementRef) {}\n\n    public focus(): void {\n        this.itemEl.nativeElement.focus();\n    }\n\n    public click(): void {\n        this.itemEl.nativeElement.click();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MenuComponent } from './menu.component';\nimport { MenuGroupComponent } from './menu-group.component';\nimport { MenuTitleDirective } from './menu-title.directive';\nimport { MenuListDirective } from './menu-list.directive';\nimport { MenuItemDirective } from './menu-item.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [MenuComponent, MenuGroupComponent, MenuTitleDirective, MenuListDirective, MenuItemDirective],\n    declarations: [MenuComponent, MenuGroupComponent, MenuTitleDirective, MenuListDirective, MenuItemDirective]\n})\nexport class MenuModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'displayFnPipe'\n})\n\nexport class DisplayFnPipe implements PipeTransform {\n\n    transform(value: any, displayFn: Function): string {\n        return displayFn(value);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'highlight'\n})\n\nexport class SearchHighlightPipe implements PipeTransform {\n\n    transform(value: string, args: string, active: boolean = true): string {\n        if (args && value && active) {\n            const startIndex = value.toLowerCase().indexOf(args.toLowerCase());\n            if (startIndex !== -1) {\n                const matchingString = value.substr(startIndex, args.length);\n                return value.replace(matchingString, '<strong>' + matchingString + '</strong>');\n            }\n\n        }\n        return value;\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { DisplayFnPipe } from './displayFn.pipe';\nimport { SearchHighlightPipe } from './search-highlight.pipe';\n\n@NgModule({\n    declarations: [\n        DisplayFnPipe,\n        SearchHighlightPipe\n    ],\n    exports: [\n        DisplayFnPipe,\n        SearchHighlightPipe\n    ]\n})\nexport class PipeModule {}\n","import { Subject } from 'rxjs';\nimport { MenuItemDirective } from './menu-item.directive';\nimport { Output } from '@angular/core';\n\nexport class MenuKeyboardService {\n\n    /** Event emitted when an item link is clicked.*/\n    @Output()\n    public readonly itemClicked: Subject<number> = new Subject<number>();\n\n    /** Whether user wants to remove keyboard handling */\n    disableKeydownHandling: boolean = false;\n\n    /** Function that is supposed to be called, when focus escape before list */\n    focusEscapeBeforeList: Function;\n\n    /** Function that is supposed to be called, when focus escape after list */\n    focusEscapeAfterList: Function;\n\n    /** Function that should be called every time, keydown event is used on some menu item,\n     * it provides whole functionality for handling\n     * ArrowDown - focus, ArrowUp - focus, Space bar - simulate click, Enter key - simulate click.\n     * @param event KeyboardEvent\n     * @param index index of items starts from 0\n     * @param menuItems array of menu item directives\n     * */\n    keyDownHandler(event: KeyboardEvent, index: number, menuItems: MenuItemDirective[]): void {\n\n        if (this.disableKeydownHandling) {\n            return;\n        }\n\n        switch (event.code) {\n            case ('ArrowDown'): {\n                if (menuItems.length > index + 1) {\n                    menuItems[index + 1].focus();\n                } else {\n                    if (this.focusEscapeAfterList) {\n                        this.focusEscapeAfterList();\n                    } else {\n                        menuItems[0].focus();\n                    }\n                }\n                event.preventDefault();\n                break;\n            }\n            case ('ArrowUp'): {\n                if (index > 0) {\n                    menuItems[index - 1].focus();\n                } else {\n                    if (this.focusEscapeBeforeList) {\n                        this.focusEscapeBeforeList();\n                    } else {\n                        menuItems[menuItems.length - 1].focus();\n                    }\n                }\n                event.preventDefault();\n                break;\n            }\n            case ('Space'): {\n                if (menuItems[index]) {\n                    menuItems[index].click();\n                    event.preventDefault();\n                }\n                break;\n            }\n            case ('Enter'): {\n                if (menuItems[index]) {\n                    menuItems[index].click();\n                    event.preventDefault();\n                }\n                break;\n            }\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges, OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    SimpleChanges, TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MenuItemDirective } from '../menu/menu-item.directive';\nimport { ComboboxItem } from './combobox-item';\nimport { MenuKeyboardService } from '../menu/menu-keyboard.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Allows users to filter through results and select a value.\n *\n * Supports Angular Forms.\n */\n@Component({\n    selector: 'fd-combobox',\n    templateUrl: './combobox.component.html',\n    styleUrls: ['./combobox.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ComboboxComponent),\n            multi: true\n        },\n        MenuKeyboardService\n    ],\n    host: {\n        '[class.fd-combobox-custom-class]': 'true',\n        '[class.fd-combobox-input]': 'true'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ComboboxComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n    /** Values to be filtered in the search input. */\n    @Input()\n    dropdownValues: any[] = [];\n\n    /** Filter function. Accepts an array of objects and a search term as arguments\n     * and returns a string. See search input examples for details. */\n    @Input()\n    filterFn: Function = this.defaultFilter;\n\n    /** Whether the search input is disabled. **/\n    @Input()\n    disabled: boolean;\n\n    /** Placeholder of the search input. **/\n    @Input()\n    placeholder: string;\n\n    /** Icon to display in the right-side button. */\n    @Input()\n    glyph: string = 'navigation-down-arrow';\n\n    /**\n     * The template with which to display the individual listed items.\n     * Use it by passing an ng-template with implicit content. See examples for more info.\n     */\n    @Input()\n    itemTemplate: TemplateRef<any>;\n\n    /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n    @Input()\n    maxHeight: string = '200px';\n\n    /** Search function to execute when the Enter key is pressed on the main input. */\n    @Input()\n    searchFunction: Function;\n\n    /** Whether the search input should be displayed in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Whether the matching string should be highlighted during filtration. */\n    @Input()\n    highlighting: boolean = true;\n\n    /** Whether the popover should close when a user selects a result. */\n    @Input()\n    closeOnSelect: boolean = true;\n\n    /** Whether the input field should be populated with the result picked by the user. */\n    @Input()\n    fillOnSelect: boolean = true;\n\n    /** Display function. Accepts an object of the same type as the\n     * items passed to dropdownValues as argument, and outputs a string.\n     * An arrow function can be used to access the *this* keyword in the calling component.\n     * See search input examples for details. */\n    @Input()\n    displayFn: Function = this.defaultDisplay;\n\n    /** Event emitted when an item is clicked. Use *$event* to retrieve it. */\n    @Output()\n    itemClicked: EventEmitter<ComboboxItem> = new EventEmitter<ComboboxItem>();\n\n    /** @hidden */\n    @ViewChildren(MenuItemDirective)\n    menuItems: QueryList<MenuItemDirective>;\n\n    /** @hidden */\n    @ViewChild('searchInputElement')\n    searchInputElement: ElementRef;\n\n    /** @hidden */\n    displayedValues: any[] = [];\n\n    /** @hidden */\n    isOpen: boolean = false;\n\n    /** @hidden */\n    inputTextValue: string;\n\n    /** @hidden */\n    private readonly onDestroy$: Subject<void> = new Subject<void>();\n\n    /** @hidden */\n    onChange: any = () => { };\n\n    /** @hidden */\n    onTouched: any = () => { };\n\n    constructor(private menuKeyboardService: MenuKeyboardService) { }\n\n    /** @hidden */\n    ngOnInit() {\n        if (this.dropdownValues) {\n            this.displayedValues = this.dropdownValues;\n        }\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {\n            if (this.inputText) {\n                this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n            } else {\n                this.displayedValues = this.dropdownValues;\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.onDestroy$.next();\n        this.onDestroy$.complete();\n    }\n\n    /** @hidden */\n    ngAfterViewInit(): void {\n        this.menuKeyboardService.itemClicked\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(index => this.onMenuClickHandler(index));\n        this.menuKeyboardService.focusEscapeBeforeList = () => this.searchInputElement.nativeElement.focus();\n        this.menuKeyboardService.focusEscapeAfterList = () => { };\n    }\n\n    /** @hidden */\n    onInputKeydownHandler(event) {\n        if (event.code === 'Enter' && this.searchFunction) {\n            this.searchFunction();\n        } else if (event.code === 'ArrowDown') {\n            event.preventDefault();\n            if (this.menuItems && this.menuItems.first) {\n                this.menuItems.first.focus();\n            }\n        }\n    }\n\n    /** @hidden */\n    onInputKeyupHandler() {\n        if (this.inputText && this.inputText.length) {\n            this.isOpen = true;\n        }\n    }\n\n    /** @hidden */\n    onMenuKeydownHandler(event: KeyboardEvent, index: number) {\n        this.menuKeyboardService.keyDownHandler(event, index, this.menuItems.toArray());\n    }\n\n    /** @hidden */\n    onMenuClickHandler(index: number) {\n        const selectedItem = this.displayedValues[index];\n        if (selectedItem) {\n            this.handleClickActions(selectedItem);\n            this.itemClicked.emit({ item: selectedItem, index: index });\n        }\n    }\n\n    /** Get the input text of the input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the input text of the input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    handleSearchTermChange(): void {\n        this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n    }\n\n    /** @hidden */\n    onPrimaryButtonClick(): void {\n        if (this.searchFunction) {\n            this.searchFunction();\n        }\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    private defaultDisplay(str: any): string {\n        return str;\n    }\n\n    private defaultFilter(contentArray: any[], searchTerm: string): any[] {\n        const searchLower = searchTerm.toLocaleLowerCase();\n        return contentArray.filter(item => {\n            if (item) {\n                return this.displayFn(item).toLocaleLowerCase().includes(searchLower);\n            }\n        });\n    }\n\n    private handleClickActions(term): void {\n        if (this.closeOnSelect) {\n            this.isOpen = false;\n        }\n        if (this.fillOnSelect) {\n            this.inputText = this.displayFn(term);\n            this.handleSearchTermChange();\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PopoverModule } from '../popover/popover.module';\nimport { FormsModule } from '@angular/forms';\nimport { MenuModule } from '../menu/menu.module';\nimport { PipeModule } from '../utils/pipes/pipe.module';\nimport { ComboboxComponent } from './combobox.component';\nimport { ButtonModule } from '../button/button.module';\n\n@NgModule({\n    declarations: [ComboboxComponent],\n    imports: [CommonModule, PopoverModule, FormsModule, MenuModule, PipeModule, ButtonModule],\n    exports: [ComboboxComponent]\n})\nexport class ComboboxModule {}\n","import { Injectable } from '@angular/core';\nimport { FdDate } from '../../calendar/models/fd-date';\n\nexport function DATE_FORMAT_FACTORY() {\n    return new DateFormatParserDefault();\n}\n\n/**\n * Abstract class which defines the behaviour of the date format and parser.\n */\n@Injectable({\n    providedIn: 'root',\n    useFactory: DATE_FORMAT_FACTORY\n})\nexport abstract class DateFormatParser {\n\n    /**\n     * Delimiter for the range. This should not show up in the string representation of the dates.\n     */\n    rangeDelimiter: string = ' - ';\n\n    /**\n     * Should take in a string value and return a FdDate model object.\n     * @param value String to concert to a FdDate model object.\n     */\n    abstract parse(value: string): FdDate;\n\n    /**\n     * Should take in a FdDate model object and return a string representation.\n     * @param date FdDate to format to string value.\n     */\n    abstract format(date: FdDate): string;\n}\n\n/**\n * Default implementation of the DateFormatParser service.\n */\n@Injectable()\nexport class DateFormatParserDefault extends DateFormatParser {\n\n    /**\n     * Takes in a string value and return a FdDate model object.\n     * @param value String to concert to a FdDate model object.\n     */\n    public parse(value: string): FdDate {\n        if (value) {\n            const str = value.toString().split('/').map(Number);\n            return new FdDate(str[2], str[0], str[1]);\n        } else {\n            return new FdDate(null, null, null);\n        }\n    }\n\n    /**\n     * Takes in a FdDate model object and return a string representation.\n     * @param date FdDate to format to string value.\n     */\n    public format(date: FdDate): string {\n        return date.month + '/' + date.day + '/' + date.year;\n    }\n}\n","import {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { CalendarType, DaysOfWeek, FdCalendarView } from '../calendar/calendar.component';\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\nimport { Placement } from 'popper.js';\nimport { FdDate } from '../calendar/models/fd-date';\nimport { CalendarService } from '../calendar/calendar.service';\nimport { CalendarComponent } from '../calendar/calendar.component';\nimport { FdRangeDate } from '../calendar/models/fd-range-date';\nimport { DateFormatParser } from './format/date-parser';\n\n@Component({\n    selector: 'fd-date-picker',\n    templateUrl: './date-picker.component.html',\n    styleUrls: ['./date-picker.component.scss'],\n    host: {\n        '(blur)': 'onTouched()',\n        '[class.fd-date-picker]': 'true',\n        '[class.fd-date-picker-custom]': 'true'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DatePickerComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => DatePickerComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DatePickerComponent implements ControlValueAccessor, Validator {\n\n    /** @hidden The value of the input */\n    inputFieldDate = null;\n\n    /** @hidden Whether the date input is invalid */\n    isInvalidDateInput: boolean = false;\n\n    /** @hidden Whether the date picker is open */\n    isOpen: boolean = false;\n\n    /** @hidden */\n    @ViewChild(CalendarComponent) calendarComponent: CalendarComponent;\n\n    /** The type of calendar, 'single' for single date selection or 'range' for a range of dates. */\n    @Input()\n    type: CalendarType = 'single';\n\n    /** Date picker input placeholder string */\n    @Input()\n    placeholder: string = 'mm/dd/yyyy';\n\n    /** Whether this is the compact input date picker */\n    @Input()\n    compact: boolean = false;\n\n    /** The currently selected CalendarDay model */\n    @Input()\n    selectedDate: FdDate;\n\n    /** The currently selected FdDates model start and end in range mode. */\n    @Input()\n    public selectedRangeDate: FdRangeDate = { start: null, end: null };\n\n    /** The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on. */\n    @Input()\n    startingDayOfWeek: DaysOfWeek = 1;\n\n    /** Whether to validate the date picker input. */\n    @Input()\n    useValidation: boolean = true;\n\n    /** Aria label for the datepicker input. */\n    @Input()\n    dateInputLabel: string = 'Date input';\n\n    /** Aria label for the button to show/hide the calendar. */\n    @Input()\n    displayCalendarToggleLabel: string = 'Display calendar toggle';\n\n    /** Whether a null input is considered valid. */\n    @Input()\n    allowNull: boolean = true;\n\n    /** Actually shown active view one of 'day' | 'month' | 'year' in calendar component*/\n    @Input()\n    public activeView: FdCalendarView = 'day';\n\n    /**\n     *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n     */\n    @Input()\n    placement: Placement = 'bottom-start';\n\n    /** Whether the date picker is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Fired when a new date is selected. */\n    @Output()\n    public readonly selectedDateChange: EventEmitter<FdDate> = new EventEmitter<FdDate>();\n\n    /** Event thrown every time selected first or last date in range mode is changed */\n    @Output()\n    public readonly selectedRangeDateChange: EventEmitter<FdRangeDate> = new EventEmitter<FdRangeDate>();\n\n    /** Event thrown every time calendar active view is changed */\n    @Output()\n    public readonly activeViewChange: EventEmitter<FdCalendarView> = new EventEmitter<FdCalendarView>();\n\n    /** @hidden */\n    onChange: any = (selected: any) => {\n    };\n\n    /** @hidden */\n    onTouched: any = () => {\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Method that handle calendar active view change and throws event.\n     */\n    public handleCalendarActiveViewChange(activeView: FdCalendarView): void {\n        this.activeViewChange.emit(activeView);\n    }\n\n    /** @hidden */\n    public closeFromCalendar(): void {\n        if (this.type === 'single') {\n            this.closeCalendar();\n        }\n    }\n\n    /** Opens the calendar */\n    openCalendar(): void {\n        if (!this.disabled) {\n            this.onTouched();\n            this.isOpen = true;\n        }\n    }\n\n    /** Toggles the calendar open or closed */\n    public toggleCalendar(): void {\n        this.onTouched();\n        this.isOpen = !this.isOpen;\n    }\n\n    /** Closes the calendar if it is open */\n    public closeCalendar(): void {\n        if (this.isOpen) {\n            this.isOpen = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected single date changed\n     */\n    public handleSingleDateChange(date: FdDate): void {\n        if (date) {\n            this.inputFieldDate = this.dateAdapter.format(date);\n            this.selectedDate = date;\n            this.selectedDateChange.emit(date);\n            this.onChange(date);\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected range date changed\n     */\n    public handleRangeDateChange(dates: FdRangeDate): void {\n        if (dates &&\n            (!CalendarService.datesEqual(this.selectedRangeDate.start, dates.start) ||\n                !CalendarService.datesEqual(this.selectedRangeDate.end, dates.end))\n        ) {\n            this.inputFieldDate = this.dateAdapter.format(dates.start) + this.dateAdapter.rangeDelimiter\n                + this.dateAdapter.format(dates.end)\n            ;\n            this.selectedRangeDate = { start: dates.start, end: dates.end };\n            this.selectedRangeDateChange.emit(this.selectedRangeDate);\n            this.onChange(this.selectedRangeDate);\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered when the text input is confirmed to ba changed, by clicking enter, or blur\n     */\n    public handleInputChange(strDate: string): void {\n        this.dateStringUpdate(strDate);\n    }\n\n    /** @hidden */\n    constructor(\n        public dateAdapter: DateFormatParser\n    ) {\n    }\n\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any\n    } {\n        return this.isModelValid() ? null : {\n            dateValidation: {\n                valid: false\n            }\n        }\n    }\n\n    /** @hidden */\n    registerOnChange(fn: (selected: any) => { void }): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms\n     */\n    writeValue(selected: FdRangeDate | FdDate): void {\n        /** If written value is not defined, null, empty string */\n        if (!selected) {\n            this.inputFieldDate = '';\n            return;\n        }\n        if (this.type === 'single') {\n            /**\n             * For single mode, if the date is invalid, model is changed, it refresh currently\n             * input field text, but it does not refresh currently displayed day\n             */\n            selected = <FdDate>selected;\n            this.selectedDate = selected;\n            this.inputFieldDate = this.dateAdapter.format(selected);\n            if (this.isModelValid()) {\n                this.calendarComponent.setCurrentlyDisplayed(this.selectedDate);\n            }\n\n        } else {\n            /**\n             * For range mode, if the date is invalid, model is changed, but it does not refresh currently\n             * displayed day view, or input field text\n             */\n            selected = <FdRangeDate>selected;\n\n            if (selected.start) {\n                this.selectedRangeDate = { start: selected.start, end: selected.end };\n\n                if (this.isModelValid()) {\n                    this.calendarComponent.setCurrentlyDisplayed(this.selectedRangeDate.start);\n                    this.inputFieldDate = this.dateAdapter.format(selected.start) +\n                        this.dateAdapter.rangeDelimiter + this.dateAdapter.format(selected.end);\n                }\n            } else {\n                this.inputFieldDate = '';\n            }\n        }\n        this.isInvalidDateInput = !this.isModelValid();\n    }\n\n    /**\n     * @hidden\n     * Method, which is responsible for transforming string to date, depending on type or\n     * validation the results are different. It also changes to state of isInvalidDateInput\n     */\n    dateStringUpdate(date: string): void {\n        /** Case when there is single mode */\n        if (this.type === 'single') {\n\n            const fdDate = this.dateAdapter.parse(date);\n\n            /**\n             * Check if dates are equal, if dates are the same there is no need to make any changes\n             * Date in model is changed no matter if the parsed date fro string is valid or not.\n             */\n            if (!CalendarService.datesEqual(fdDate, this.selectedDate)) {\n                this.isInvalidDateInput = !fdDate.isDateValid();\n                this.selectedDate = fdDate;\n                this.onChange(this.selectedDate);\n                this.selectedDateChange.emit(this.selectedDate);\n\n                /** Check if date is valid, if it's not, there is no need to refresh calendar */\n                if (!this.isInvalidDateInput) {\n                    this.calendarComponent.setCurrentlyDisplayed(fdDate);\n                }\n            }\n\n\n            /** Case when there is range mode */\n        } else {\n            const currentDates = date.split(this.dateAdapter.rangeDelimiter);\n            const firstDate = this.dateAdapter.parse(currentDates[0]);\n            const secondDate = this.dateAdapter.parse(currentDates[1]);\n\n            /**\n             * Check if dates are equal, if dates are the same there is no need to make any changes\n             * Date in model is changed no matter if the parsed dates from string are valid or not.\n             */\n            if (!CalendarService.datesEqual(firstDate, this.selectedRangeDate.start) ||\n                !CalendarService.datesEqual(secondDate, this.selectedRangeDate.end)) {\n\n                this.isInvalidDateInput = !firstDate.isDateValid() || !secondDate.isDateValid();\n\n                /** If the end date is before the start date, there is need to replace them  */\n                if ((firstDate.getTimeStamp() > secondDate.getTimeStamp()) && secondDate.isDateValid()) {\n                    this.selectedRangeDate = { start: secondDate, end: firstDate };\n                } else {\n                    this.selectedRangeDate = { start: firstDate, end: secondDate };\n                }\n\n                this.selectedRangeDateChange.emit(this.selectedRangeDate);\n                this.onChange({ start: this.selectedRangeDate.start, end: this.selectedRangeDate.end });\n\n                /** Check if dates are valid, if it's not, there is no need o refresh calendar */\n                if (!this.isInvalidDateInput) {\n                    this.calendarComponent.setCurrentlyDisplayed(this.selectedRangeDate.start);\n                }\n            }\n        }\n\n        if (!date && this.allowNull) {\n            this.isInvalidDateInput = false;\n        }\n    }\n\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    public isModelValid(): boolean {\n        if (this.type === 'single') {\n            return this.selectedDate &&\n                this.selectedDate instanceof FdDate &&\n                this.selectedDate.isDateValid();\n        } else {\n            return this.selectedRangeDate &&\n                (\n                    this.selectedRangeDate.start &&\n                    this.selectedRangeDate.start instanceof FdDate &&\n                    this.selectedRangeDate.start.isDateValid()\n                ) && (\n                    this.selectedRangeDate.end &&\n                    this.selectedRangeDate.end instanceof FdDate &&\n                    this.selectedRangeDate.end.isDateValid()\n                );\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '../icon/icon.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { CalendarModule } from '../calendar/calendar.module';\nimport { FormsModule } from '@angular/forms';\n\nimport { DatePickerComponent } from './date-picker.component';\n\n@NgModule({\n    declarations: [DatePickerComponent],\n    imports: [CommonModule, IconModule, PopoverModule, CalendarModule, FormsModule],\n    exports: [DatePickerComponent]\n})\nexport class DatePickerModule {}\n","export class TimeObject {\n    hour: number;\n    minute: number;\n    second: number;\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Provides i18n support for labels inside the time component.\n */\n@Injectable({providedIn: 'root'})\nexport class TimeI18nLabels {\n\n    /** Aria label for the 'increase hours' button */\n    increaseHoursLabel: string = 'Increase hours';\n\n    /** Aria label for the 'hours' input */\n    hoursLabel: string = 'Hours';\n\n    /** Aria label for the 'decrease hours' button */\n    decreaseHoursLabel: string = 'Decrease hours';\n\n    /** Aria label for the 'increase minutes' button */\n    increaseMinutesLabel: string = 'Increase minutes';\n\n    /** Aria label for the 'minutes' input */\n    minutesLabel: string = 'Minutes';\n\n    /** Aria label for the 'decrease minutes' button */\n    decreaseMinutesLabel: string = 'Decrease minutes';\n\n    /** Aria label for the 'increase seconds' button */\n    increaseSecondsLabel: string = 'Increase seconds';\n\n    /** Aria label for the 'seconds' input */\n    secondsLabel: string = 'Seconds';\n\n    /** Aria label for the 'decrease seconds' button */\n    decreaseSecondsLabel: string = 'Decrease seconds';\n\n    /** Aria label for the 'increase period' button */\n    increasePeriodLabel: string = 'Increase period';\n\n    /** Aria label for the 'period' input */\n    periodLabel: string = 'Period';\n\n    /** Aria label for the 'decrease period' button */\n    decreasePeriodLabel: string = 'Decrease period';\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Provides i18n support for placeholders and meridian modifiers naming in the time component.\n */\n@Injectable({providedIn: 'root'})\nexport class TimeI18n {\n\n    /**\n     * Ante Meridian naming label. The value written in the input should match this or Post Meridian. Otherwise it would be\n     * treated as invalid\n     * */\n    meridianAm: string = 'am';\n\n    /**\n     * Post Meridian naming label. The value written in the input should match this or Ante Meridian. Otherwise it would be\n     * treated as invalid\n     * */\n    meridianPm: string = 'pm';\n\n    /**\n     * Placeholder on the Ante Meridian / Post Meridian input\n     * */\n    meridianPlaceholder: string = 'am';\n\n    /**\n     * Placeholder for hours input\n     * */\n    hoursPlaceholder: string = 'hh';\n\n    /**\n     * Placeholder for minutes input\n     * */\n    minutesPlaceholder: string = 'mm';\n\n    /**\n     * Placeholder for seconds input\n     * */\n    secondsPlaceholder: string = 'ss';\n\n    /**\n     * Defines if the meridian validation should be case sensitive.\n     * */\n    meridianCaseSensitive: boolean = false;\n\n}\n","import { Component, EventEmitter, forwardRef, Input, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { TimeObject } from './time-object';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TimeI18nLabels } from './i18n/time-i18n-labels';\nimport { TimeI18n } from './i18n/time-i18n';\n\n@Component({\n    selector: 'fd-time',\n    templateUrl: './time.component.html',\n    styleUrls: ['./time.component.scss'],\n    host: {\n        '(blur)': 'onTouched()',\n        class: 'fd-time fd-has-display-block'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TimeComponent implements OnChanges, ControlValueAccessor {\n\n    /**\n     * @Input When set to false, uses the 24 hour clock (hours ranging from 0 to 23)\n     * and does not display a period control.\n     */\n    @Input() meridian: boolean = false;\n\n    /**\n     *  @Input When set to false, does not set the input field to invalid state on invalid entry.\n     */\n    @Input() validate: boolean = true;\n\n    /**\n     * @Input Disables the component.\n     */\n    @Input() disabled: boolean;\n\n    /**\n     * @Input When set to false, hides the buttons that increment and decrement the corresponding input.\n     */\n    @Input() spinners: boolean = true;\n\n    /**\n     * @Input When set to false, hides the input for seconds.\n     */\n    @Input() displaySeconds: boolean = true;\n\n    /** @Input When set to false, hides the input for minutes. */\n    @Input()\n    displayMinutes: boolean = true;\n\n    /**\n     * When set to false, hides the input for hours\n     */\n    @Input()\n    displayHours: boolean = true;\n\n    /**\n     * @Input An object that contains three integer properties: 'hour' (ranging from 0 to 23),\n     * 'minute' (ranging from 0 to 59), and 'second' (ranging from 0 to 59). This is the model the component consumes. Example:\n     *\n     * ```json\n     * { hour: 12, minute: 0, second: 0 }\n     * ```\n     */\n    @Input()\n    time: TimeObject = { hour: 0, minute: 0, second: 0 };\n\n    /** @hidden */\n    @Output()\n    readonly focusArrowLeft: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden\n     * Used only in meridian mode. Stores information the current am/pm state.\n     */\n    period: string;\n\n    /** @hidden\n     * Variable that is displayed as an hour.\n     * For meridian mode ranging from 0 to 12,\n     * For non-meridian mode ranging from 0 to 23, and reflects the hour value\n     */\n    displayedHour: number = 0;\n\n    /** @hidden */\n    onChange = (time: TimeObject) => {\n    };\n\n    /** @hidden */\n    onTouched = () => {\n    };\n\n    /** @hidden */\n    registerOnChange(fn: (time: TimeObject) => void): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    constructor(\n        public timeI18nLabels: TimeI18nLabels,\n        public timeI18n: TimeI18n\n    ) {}\n\n    /** @hidden */\n    writeValue(time: TimeObject): void {\n        if (!time) {\n            return;\n        }\n        this.time = time;\n        this.setDisplayedHour();\n    }\n\n    /** @hidden\n     * Reacts only when there is meridian or time input change\n     */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.meridian || changes.time) {\n            this.setDisplayedHour();\n        }\n    }\n\n    /** @hidden\n     * Changes displayed hour value, used mostly when the model hour is changed\n     */\n    setDisplayedHour(): void {\n        if (!this.meridian) {\n            this.displayedHour = this.time.hour;\n        } else if (this.time.hour === 0) {\n            this.displayedHour = 12;\n            this.period = this.timeI18n.meridianAm;\n        } else if (this.time.hour > 12) {\n            this.displayedHour = this.time.hour - 12;\n            this.period = this.timeI18n.meridianPm;\n        } else if (this.time.hour === 12) {\n            this.displayedHour = 12;\n            this.period = this.timeI18n.meridianPm;\n        } else {\n            this.displayedHour = this.time.hour;\n            this.period = this.timeI18n.meridianAm;\n        }\n    }\n\n    /** @hidden\n     * Handles changes of displayed hour value from template.\n     */\n    displayedHourChanged(): void {\n        if (!this.meridian) {\n            this.time.hour = this.displayedHour;\n        } else {\n            if (this.period === this.timeI18n.meridianAm) {\n                if (this.displayedHour === 12) {\n                    this.time.hour = 0;\n                } else {\n                    this.time.hour = this.displayedHour;\n                }\n            } else if (this.period === this.timeI18n.meridianPm) {\n                if (this.displayedHour === 12) {\n                    this.time.hour = this.displayedHour;\n                } else {\n                    this.time.hour = this.displayedHour + 12;\n                }\n            }\n        }\n        this.onChange(this.time);\n    }\n\n    /** @hidden\n     * Handles the blur events from inputs. Also rewrite values if they are incorrect, prevents from negative or too big\n     * values. Also changes period if it's on meridian type and hour is bigger than 12.\n     */\n    inputBlur(inputType: string): void {\n        switch (inputType) {\n            case 'hour': {\n                this.displayedHour = Math.round(Math.abs(this.displayedHour)) % 24;\n                this.time.hour = this.displayedHour;\n\n                if (this.meridian) {\n                    if (this.displayedHour > 12) {\n                        this.period = this.timeI18n.meridianPm;\n                        this.displayedHour = this.displayedHour !== 12 ? this.displayedHour % 12 : this.displayedHour;\n                    } else if (this.displayedHour === 0) {\n                        this.displayedHour = 12;\n                        this.period = this.timeI18n.meridianAm;\n                    } else if (this.isAm(this.period) && this.displayedHour === 12) {\n                        this.time.hour = 0;\n                    }\n                }\n                break;\n            }\n            case 'minute': {\n                this.time.minute = Math.abs(Math.round(this.time.minute) % 60);\n                break;\n            }\n            case 'second': {\n                this.time.second = Math.abs(Math.round(this.time.second) % 60);\n                break;\n            }\n            case 'period': {\n                /**\n                 * When there is invalid period, function changes period to valid basing on actual hour\n                 */\n                if (!this.period ||\n                    (!this.isPm(this.period) && !this.isAm(this.period))\n                ) {\n                    this.setDisplayedHour();\n                }\n            }\n        }\n        this.onChange(this.time);\n    }\n\n    /** Increases the hour value by one. */\n    increaseHour(): void {\n        if (this.time.hour === null) {\n            this.time.hour = 0;\n        } else if (this.time.hour === 23) {\n            this.time.hour = 0;\n        } else {\n            this.time.hour = this.time.hour + 1;\n        }\n        this.setDisplayedHour();\n        this.onChange(this.time);\n    }\n\n    /** Decreases the hour value by one. */\n    decreaseHour(): void {\n        if (this.time.hour === null) {\n            this.time.hour = 0;\n        } else if (this.time.hour === 0) {\n            this.time.hour = 23;\n        } else {\n            this.time.hour = this.time.hour - 1;\n        }\n        this.setDisplayedHour();\n        this.onChange(this.time);\n    }\n\n    /** Increases the minute value by one. */\n    increaseMinute(): void {\n        if (this.time.minute === null) {\n            this.time.minute = 0;\n        } else if (this.time.minute === 59) {\n            this.time.minute = 0;\n            this.increaseHour();\n        } else {\n            this.time.minute = this.time.minute + 1;\n        }\n        this.onChange(this.time);\n    }\n\n    /** Decreases the minute value by one. */\n    decreaseMinute(): void {\n        if (this.time.minute === null) {\n            this.time.minute = 0;\n        } else if (this.time.minute === 0) {\n            this.time.minute = 59;\n            this.decreaseHour();\n        } else {\n            this.time.minute = this.time.minute - 1;\n        }\n        this.onChange(this.time);\n    }\n\n    /** Increases the second value by one. */\n    increaseSecond(): void {\n        if (this.displaySeconds) {\n            if (this.time.second === null) {\n                this.time.second = 0;\n            } else if (this.time.second === 59) {\n                this.time.second = 0;\n                this.increaseMinute();\n            } else {\n                this.time.second = this.time.second + 1;\n            }\n        }\n        this.onChange(this.time);\n    }\n\n    /** Decreases the second value by one. */\n    decreaseSecond(): void {\n        if (this.displaySeconds) {\n            if (this.time.second === null) {\n                this.time.second = 0;\n            } else if (this.time.second === 0) {\n                this.time.second = 59;\n                this.decreaseMinute();\n            } else {\n                this.time.second = this.time.second - 1;\n            }\n        }\n        this.onChange(this.time);\n    }\n\n    /** Toggles the period (am/pm). */\n    togglePeriod(): void {\n        if (this.time.hour < 24 && this.time.hour >= 0) {\n            if (this.isAm(this.period)) {\n                this.period = this.timeI18n.meridianPm;\n                this.periodModelChange();\n            } else if (this.isPm(this.period)) {\n                this.period = this.timeI18n.meridianAm;\n                this.periodModelChange();\n            }\n        }\n    }\n\n    /** @hidden\n     * Handles minutes model change from template\n     * */\n    minuteModelChange(): void {\n        if (!(this.time.minute > 59 || this.time.minute < 0) || !this.validate) {\n            this.onChange(this.time);\n        }\n    }\n\n    /** @hidden\n     * Handles seconds model change from template\n     * */\n    secondModelChange(): void {\n        if (!(this.time.second > 59 || this.time.second < 0) || !this.validate) {\n            this.onChange(this.time);\n        }\n    }\n\n    /** @hidden\n     * Handles period model change. depending on current hour and new period changes hours by +/- 12\n     */\n    periodModelChange(): void {\n        if (this.time && !this.time.hour) {\n            this.time.hour = 0;\n        }\n        if (this.time.hour < 24 && this.time.hour >= 0) {\n            if (this.isPm(this.period) && this.time.hour < 12) {\n                this.time.hour = this.time.hour + 12;\n            } else if (this.time.hour >= 12 && this.isAm(this.period)) {\n                this.time.hour = this.time.hour - 12;\n            }\n            this.onChange(this.time);\n        }\n    }\n\n    /** @hidden\n     * Handles last button keyboard events\n     */\n    lastButtonKeydown(event: KeyboardEvent): void {\n        if (event.code === 'Tab' && !event.shiftKey) {\n            event.preventDefault();\n            this.focusArrowLeft.emit();\n        }\n    }\n\n    /**\n     * @hidden\n     * Defines if period is PM, Considers the fact that period should be case sensitive\n     */\n    private isPm(period: string): boolean {\n        const pmMeridian = this.timeI18n.meridianCaseSensitive ? this.timeI18n.meridianPm : this.timeI18n.meridianPm.toLocaleUpperCase();\n        period = this.timeI18n.meridianCaseSensitive ? period : period.toLocaleUpperCase();\n        return period === pmMeridian;\n    }\n\n    /**\n     * @hidden\n     * Defines if period is AM, Considers the fact that period should be case sensitive\n     */\n    private isAm(period: string): boolean {\n        const amMeridian = this.timeI18n.meridianCaseSensitive ? this.timeI18n.meridianAm : this.timeI18n.meridianAm.toLocaleUpperCase();\n        period = this.timeI18n.meridianCaseSensitive ? period : period.toLocaleUpperCase();\n        return period === amMeridian;\n    }\n}\n","/**\n * Default date with time model used by the fundamental components.\n */\n\nimport { FdDate } from '../../calendar/models/fd-date';\nimport { TimeObject } from '../../time/time-object';\n\nexport class FdDatetime {\n\n    date: FdDate;\n    time: TimeObject;\n\n    /**\n     * Static function to get the current date in FdDateTime form.\n     */\n    static getToday(): FdDatetime {\n        const date: Date = new Date();\n        const time: TimeObject = {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds()};\n        return new FdDatetime(FdDate.getToday(), time);\n    }\n\n    /**\n     * Constructor to build a FdDateTime object from a FdDate and TimeObject.\n     * @param date the FdDate object.\n     * @param time the TimeObject object.\n     */\n    constructor(\n        date: FdDate,\n        time: TimeObject\n    ) {\n        this.date = date;\n        this.time = time;\n    }\n\n    /**\n     * Get Luxon date object converted to string from FdDate.\n     */\n    public toLocaleDateString(): string {\n        if (this.toDate() && this.isTimeValid() && this.isDateValid()) {\n            return this.toDate().toLocaleString();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Method that checks validity of time on FdDateTime object.\n     */\n    public isTimeValid(): boolean {\n\n        if (!this.time ||\n            this.hour === undefined ||\n            this.minute === undefined ||\n            this.second === undefined\n        ) {\n            return false;\n        }\n\n        if (this.hour > 23 || this.hour < 0) {\n            return false;\n        }\n\n        if (this.minute > 59 || this.minute < 0) {\n            return false;\n        }\n\n        if (this.second > 59 || this.second < 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Method that checks validity of date on FdDateTime object.\n     */\n    public isDateValid(): boolean {\n        return this.date && this.date.isDateValid();\n    }\n\n    public get year(): number {\n        if (this.date) {\n            return this.date.year;\n        }\n    }\n\n    public get month(): number {\n        if (this.date) {\n            return this.date.month;\n        }\n    }\n\n    public get day(): number {\n        if (this.date) {\n            return this.date.day;\n        }\n    }\n\n    public get hour(): number {\n        if (this.time) {\n            return this.time.hour;\n        }\n    }\n\n    public get minute(): number {\n        if (this.time) {\n            return this.time.minute;\n        }\n    }\n\n    public get second(): number {\n        if (this.time) {\n            return this.time.second;\n        }\n    }\n\n    /**\n     * Get native date object from FdDate.\n     */\n    public toDate(): Date {\n        return new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { FdDatetime } from '../models/fd-datetime';\nimport { FdDate } from '../../calendar/models/fd-date';\nimport { TimeObject } from '../../time/time-object';\n\nexport function DATE_TIME_FORMAT_FACTORY() {\n    return new DateTimeFormatParserDefault();\n}\n\n/**\n * Abstract class which defines the behaviour of the datetime format and parser.\n */\n@Injectable({\n    providedIn: 'root',\n    useFactory: DATE_TIME_FORMAT_FACTORY\n})\nexport abstract class DateTimeFormatParser {\n\n    /**\n     * Should take in a string value and return a FdDatetime model object.\n     * @param value String to concert to a FdDatetime model object.\n     */\n    abstract parse(value: string): FdDatetime;\n\n    /**\n     * Should take in a FdDatetime model object and return a string representation.\n     * @param date FdDatetime object to concert to a date string.\n     */\n    abstract format(date: FdDatetime): string;\n}\n\n/**\n * Default implementation of the DateFormatParser service.\n */\n@Injectable()\nexport class DateTimeFormatParserDefault extends DateTimeFormatParser {\n\n    /**\n     * Takes in a string representation of a date and returns a FdDatetime object.\n     * @param value String to convert to a FdDatetime model object.\n     */\n    public parse(value: string): FdDatetime {\n        if (!value) {\n            return FdDatetime.getToday();\n        } else {\n            let time: TimeObject;\n            let date: FdDate;\n            const dateStr = value.split(',')[0];\n            if (dateStr) {\n                const dateSplitStr = dateStr.split('.').map(Number);\n                date = new FdDate(dateSplitStr[2], dateSplitStr[1], dateSplitStr[0]);\n            }\n            const timeStr = value.split(',')[1];\n            if (timeStr) {\n                const timeSplitStr = timeStr.split(':').map(Number);\n                time = { hour: timeSplitStr[0], minute: timeSplitStr[1], second: timeSplitStr[2] };\n            }\n            if (date) {\n                return new FdDatetime(date, time);\n            }\n        }\n    }\n\n    /**\n     * Takes in a FdDatetime object and returns the string representation.\n     * @param date FdDatetime model object to convert to a string.\n     */\n    public format(date: FdDatetime): string {\n        return date.day + '.' +\n            date.month + '.' +\n            date.year + ', ' +\n            date.hour + ':' +\n            date.minute + ':' +\n            date.second\n        ;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeObject } from '../time/time-object';\nimport { TimeComponent } from '../time/time.component';\nimport { Placement } from 'popper.js';\nimport { DateTimeFormatParser } from './format/datetime-parser';\nimport { FdDate } from '../calendar/models/fd-date';\nimport { CalendarComponent, DaysOfWeek, FdCalendarView } from '../calendar/calendar.component';\nimport { FdDatetime } from './models/fd-datetime';\n\n/**\n * The datetime picker component is an opinionated composition of the fd-popover,\n * fd-calendar and fd-time components to accomplish the UI pattern for picking a date and time.\n */\n@Component({\n    selector: 'fd-datetime-picker',\n    templateUrl: './datetime-picker.component.html',\n    styleUrls: ['./datetime-picker.component.scss'],\n    host: {\n        '(blur)': 'onTouched()',\n        '[class.fd-datetime-host]': 'true'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DatetimePickerComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => DatetimePickerComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DatetimePickerComponent implements OnInit, OnDestroy, ControlValueAccessor, Validator {\n\n    /** @hidden Reference to the inner time component. */\n    @ViewChild(TimeComponent)\n    timeComponent: TimeComponent;\n\n    /** @hidden Reference to the inner calendar component. */\n    @ViewChild(CalendarComponent)\n    calendarComponent: CalendarComponent;\n\n    /**\n     * @hidden Date of the input field. Internal use.\n     * For programmatic selection, use two-way binding on the date input.\n     */\n    inputFieldDate: string = null;\n\n    /** @hidden The Time object which interacts with the inner Time component. Internal use. */\n    isInvalidDateInput: boolean = false;\n\n    /** @hidden The Time object which interacts with the inner Time component. Internal use. */\n    time: TimeObject = { hour: 0, minute: 0, second: 0 };\n\n    /** @hidden The CalendarDay object which interacts with the inner Calendar component. Internal use. */\n    selectedDate: FdDate;\n\n    /** Subscription of the dateFromInput. */\n    private dateFromInputSubscription: Subscription;\n\n    /** Placeholder for the inner input element. */\n    @Input()\n    placeholder: string = 'mm/dd/yyyy, hh:mm:ss am';\n\n    /** Whether the component should be in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /**\n     *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n     */\n    @Input()\n    placement: Placement = 'bottom-start';\n\n    /** Whether the time component should be meridian (am/pm). */\n    @Input()\n    meridian: boolean = true;\n\n    /** Whether the component is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Whether the time component shows spinners for changing the time. */\n    @Input()\n    spinners: boolean = true;\n\n    /** Whether the time component shows seconds. */\n    @Input()\n    displaySeconds: boolean = true;\n\n    /** Whether the time component shows minutes. */\n    @Input()\n    displayMinutes: boolean = true;\n\n    /** Whether the time component shows hours. */\n    @Input()\n    displayHours: boolean = true;\n\n    /** Whether to perform visual validation on the picker input. */\n    @Input()\n    useValidation: boolean = true;\n\n    /** Current selected date. Two-way binding is supported. */\n    @Input()\n    date: FdDatetime = FdDatetime.getToday();\n\n    /** Whether the popover is open. Two-way binding is supported. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** The disableFunction for the calendar. */\n    @Input()\n    startingDayOfWeek: DaysOfWeek = 1;\n\n    /** Actually shown active view one of 'day' | 'month' | 'year' in calendar component*/\n    @Input()\n    public activeView: FdCalendarView = 'day';\n\n    /** Aria label for the datetime picker input. */\n    @Input()\n    datetimeInputLabel: string = 'Datetime input';\n\n    /** Aria label for the button to show/hide the calendar. */\n    @Input()\n    displayDatetimeToggleLabel: string = 'Display calendar toggle';\n\n    /** Whether a null input is considered valid. */\n    @Input()\n    allowNull: boolean = true;\n\n    /** Event thrown every time calendar active view is changed */\n    @Output()\n    public readonly activeViewChange: EventEmitter<FdCalendarView> = new EventEmitter<FdCalendarView>();\n\n    /** Event emitted when the date changes. This can be a time or day change. */\n    @Output()\n    readonly dateChange: EventEmitter<FdDatetime> = new EventEmitter<FdDatetime>();\n\n    /** Event emitted when the day changes from the calendar. */\n    @Output()\n    readonly calendarChange: EventEmitter<FdDatetime> = new EventEmitter<FdDatetime>();\n\n    /** Event emitted when the time changes from the time component. */\n    @Output()\n    readonly timeChange: EventEmitter<FdDatetime> = new EventEmitter<FdDatetime>();\n\n    /** Event emitted when popover closes. */\n    @Output()\n    readonly onClose: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden */\n    onChange: any = (selected: any) => {\n    };\n\n    /** @hidden */\n    onTouched: any = () => {\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to disable certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    disableRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range start selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeStartFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar for the range end selection.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockRangeEndFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * Function used to block certain dates in the calendar.\n     * @param fdDate FdDate\n     */\n    @Input()\n    blockFunction = function(fdDate: FdDate): boolean {\n        return false;\n    };\n\n    /**\n     * @hidden\n     * Function that implements Validator Interface, adds validation support for forms\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any\n    } {\n        return this.isModelValid() ? null : {\n            dateValidation: {\n                valid: false\n            }\n        };\n    }\n\n    /** Toggles the popover. */\n    togglePopover(): void {\n        this.onTouched();\n        if (this.isOpen) {\n            this.closePopover();\n        } else {\n            this.openPopover();\n        }\n    }\n\n    /**\n     * Method that handle calendar active view change and throws event.\n     */\n    public handleCalendarActiveViewChange(activeView: FdCalendarView): void {\n        this.activeViewChange.emit(activeView);\n    }\n\n    /** Opens the popover. */\n    openPopover(): void {\n        if (!this.isOpen && !this.disabled) {\n            this.onTouched();\n            this.isOpen = true;\n        }\n    }\n\n    /** Closes the popover and refresh model */\n    closePopover(): void {\n        if (this.isOpen) {\n            this.handleInputChange(this.inputFieldDate);\n            this.onClose.emit();\n            this.isOpen = false;\n        }\n    }\n\n    /** @hidden */\n    isInvalidDateInputHandler(e): void {\n        this.isInvalidDateInput = e;\n    }\n\n    /** @hidden */\n    @HostListener('document:keydown.escape', [])\n    onEscapeKeydownHandler(): void {\n        this.closePopover();\n    }\n\n    /** @hidden */\n    @HostListener('document:click', ['$event'])\n    public onGlobalClick(event: MouseEvent): void {\n        if (!this.elRef.nativeElement.contains(event.target)) {\n            this.closePopover();\n        }\n    }\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.date && this.inputFieldDate !== null) {\n            this.selectedDate = this.date.date;\n            this.time = this.date.time;\n        }\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        if (this.dateFromInputSubscription) {\n            this.dateFromInputSubscription.unsubscribe();\n        }\n    }\n\n    /** @hidden */\n    constructor(private elRef: ElementRef,\n                private changeDetRef: ChangeDetectorRef,\n                public dateTimeAdapter: DateTimeFormatParser\n    ) {\n    }\n\n    /** @hidden */\n    registerOnChange(fn: (selected: any) => { void }): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms\n     */\n    writeValue(selected: FdDatetime): void {\n        if (!selected || !(selected instanceof FdDatetime)) {\n            return;\n        }\n        this.selectedDate = selected.date;\n        this.time = selected.time;\n        this.date = new FdDatetime(this.selectedDate, this.time);\n        if (this.isModelValid()) {\n            this.calendarComponent.setCurrentlyDisplayed(this.date.date);\n            this.setInput(this.date);\n        }\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from calendar component, when there is selected date changed.\n     * If invalid time model is detected, it takes time model data from TimeComponent.\n     */\n    handleDateChange(date: FdDate): void {\n        this.selectedDate = date;\n        if (!this.date.isTimeValid()) {\n            this.time = this.timeComponent.time;\n        }\n        this.date = new FdDatetime(this.selectedDate, this.time);\n        this.isInvalidDateInput = !this.isModelValid();\n        this.setInput(this.date);\n        this.onChange(this.date);\n    }\n\n    /**\n     * @hidden\n     * Method that is triggered by events from time component, when there is selected time changed\n     */\n    handleTimeChange(time: TimeObject): void {\n        this.time = time;\n        this.date = new FdDatetime(this.selectedDate, this.time);\n        this.isInvalidDateInput = !this.isModelValid();\n        this.setInput(this.date);\n        this.onChange(this.date);\n    }\n\n    /** @hidden */\n    focusArrowLeft(): void {\n        if (this.elRef.nativeElement.querySelector('#' + this.calendarComponent.id + '-left-arrow')) {\n            this.elRef.nativeElement.querySelector('#' + this.calendarComponent.id + '-left-arrow').focus();\n        }\n    }\n\n    /**\n     * @hidden\n     * Method, which is responsible for transforming string to datetime, depending on type or\n     * validation the results are different. It also changes to state of isInvalidDateInput.\n     */\n    handleInputChange(date: string): void {\n        const fdTimeDate = this.dateTimeAdapter.parse(date);\n        this.selectedDate = fdTimeDate.date;\n        this.time = fdTimeDate.time;\n        this.date = new FdDatetime(this.selectedDate, this.time);\n        this.isInvalidDateInput = !this.isModelValid();\n        this.onChange(fdTimeDate);\n        if (!this.isInvalidDateInput) {\n            this.calendarComponent.setCurrentlyDisplayed(fdTimeDate.date);\n        }\n        if (!date && this.allowNull) {\n            this.isInvalidDateInput = false;\n            this.date = FdDatetime.getToday();\n            this.selectedDate = this.date.date;\n            this.time = this.date.time;\n            this.calendarComponent.setCurrentlyDisplayed(this.date.date);\n            this.onChange(null);\n        } else if (!this.allowNull) {\n            this.isInvalidDateInput = true;\n        }\n    }\n\n    /** Method that provides information if model selected date/dates have properly types and are valid */\n    public isModelValid(): boolean {\n        return this.date &&\n            this.date instanceof FdDatetime &&\n            this.date.isDateValid() && this.date.isTimeValid();\n    }\n\n    private setInput(fdDateTime: FdDatetime): void {\n        this.inputFieldDate = this.dateTimeAdapter.format(fdDateTime);\n        this.changeDetRef.detectChanges();\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { TimeComponent } from './time.component';\n\n\n@NgModule({\n    declarations: [TimeComponent],\n    imports: [CommonModule, FormsModule],\n    exports: [TimeComponent]\n})\nexport class TimeModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '../icon/icon.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { CalendarModule } from '../calendar/calendar.module';\nimport { FormsModule } from '@angular/forms';\nimport { DatetimePickerComponent } from './datetime-picker.component';\nimport { TimeModule } from '../time/time.module';\n\n@NgModule({\n    declarations: [DatetimePickerComponent],\n    imports: [CommonModule, IconModule, PopoverModule, CalendarModule, FormsModule, TimeModule],\n    exports: [DatetimePickerComponent]\n})\nexport class DatetimePickerModule {}\n","import { Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * Tool to facilitate the input of files from the user.\n * It supports drag and drop, multiple input, max file size and more.\n * The drag events make it very easy to create and style elements like a dropzone.\n */\n@Component({\n    selector: 'fd-file-input',\n    templateUrl: './file-input.component.html',\n    styleUrls: ['./file-input.component.scss'],\n    host: {\n        '(blur)': 'onTouched()'\n    },\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => FileInputComponent),\n        multi: true,\n    }],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FileInputComponent implements ControlValueAccessor {\n\n    /** @hidden */\n    @HostBinding('class.fd-file-input')\n    fdFileInputClass: boolean = true;\n\n    /** @hidden */\n    @ViewChild('input')\n    inputRef: ElementRef;\n\n    /** Whether the file input is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether the file input should accept multiple files. */\n    @Input()\n    multiple: boolean = true;\n\n    /** Accepted file extensions. Format: `'.png,.jpg'`. */\n    @Input()\n    accept: string;\n\n    /** Whether the file input accepts drag and dropped files. */\n    @Input()\n    dragndrop: boolean = true;\n\n    /** Max file size in bytes that the input will accept. */\n    @Input()\n    maxFileSize: number;\n\n    /** Event fired when files are selected. Passed object is the array of files selected. */\n    @Output()\n    readonly onSelect: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Event fired when some invalid files are selected. Passed object is the array of invalid files. */\n    @Output()\n    readonly onInvalidFiles: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Event fired when the dragged file enters the component boundaries. */\n    @Output()\n    readonly onDragEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event fired when the dragged file exits the component boundaries. */\n    @Output()\n    readonly onDragLeave: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden */\n    onChange: Function = () => {};\n\n    /** @hidden */\n    onTouched: Function = () => {};\n\n    /** @hidden */\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden */\n    writeValue(files: File[]): void {\n        // not needed - should be handled by user.\n    }\n\n    /** @hidden */\n    selectHandler(event: File[]) {\n        if (this.maxFileSize) {\n            const valid_files: File[] = [];\n            const invalid_files: File[] = [];\n            event.forEach(file => {\n                if (file.size < this.maxFileSize) {\n                    valid_files.push(file);\n                } else {\n                    invalid_files.push(file);\n                }\n            });\n            if (valid_files.length > 0) {\n                this.onChange(valid_files);\n                this.onSelect.emit(valid_files);\n            }\n            if (invalid_files.length > 0) {\n                this.onInvalidFiles.emit(invalid_files);\n            }\n        } else {\n            this.onChange(event);\n            this.onSelect.emit(event);\n        }\n    }\n\n    /**\n     * Opens the file selector.\n     */\n    public open(): void {\n        this.inputRef.nativeElement.click();\n    }\n\n    /**\n     * Clears the files from the input.\n     */\n    public clear(): void {\n        this.inputRef.nativeElement.value = '';\n        this.onChange([]);\n    }\n\n}\n","import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding } from '@angular/core';\n\n/**\n * Directive tool to facilitate interacting with a native file input element.\n */\n@Directive({\n    selector: '[fdFileSelect]',\n})\nexport class FileSelectDirective {\n\n    /** Whether the input should accept multiple file selections. */\n    @Input()\n    private multiple: boolean = true;\n\n    /** Event emitted when files are selected. */\n    @Output()\n    readonly onFileSelect: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** @hidden */\n    @HostBinding('attr.multiple')\n    get multipleBinding(): string {\n        return this.multiple ? '' : undefined;\n    }\n\n    /** @hidden */\n    @HostListener('change', ['$event'])\n    onChange(event: Event): void {\n        if (event.target instanceof HTMLInputElement) {\n            const elRef: HTMLInputElement = (<HTMLInputElement>event.target);\n            const files: FileList = elRef.files;\n            const fileArray: File[] = Array.from(files);\n            if (files.length) {\n                this.onFileSelect.emit(fileArray);\n            }\n        }\n    }\n}\n","import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n/**\n * Directive that handles the drag and drop feature of the file input.\n */\n@Directive({\n    selector: '[fdFileDragnDrop]'\n})\nexport class FileDragndropDirective {\n\n    /** Whether multiple files can be dropped at once. */\n    @Input()\n    multiple: boolean = true;\n\n    /** Accepted file extensions. Format: `'.png,.jpg'`. */\n    @Input()\n    accept: string;\n\n    /** Whether selecting of new files is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether drag and drop is enabled. Disables this directive. */\n    @Input()\n    dragndrop: boolean = true;\n\n    /** Event emitted when files are selected. Passes back an array of files. */\n    @Output()\n    readonly onFileChange: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Event emitted when invalid files are selected. Passes back an array of files. */\n    @Output()\n    readonly onInvalidFiles: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Event emitted when the dragged file enters the dropzone. */\n    @Output()\n    readonly onDragEnter: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the dragged file exits the dropzone. */\n    @Output()\n    readonly onDragLeave: EventEmitter<void> = new EventEmitter<void>();\n\n    private elementStateCounter: number = 0;\n\n    /** @hidden */\n    @HostListener('dragover', ['$event'])\n    public onDragover(event) {\n        if (this.dragndrop) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('dragenter', [])\n    public onDragenter() {\n        ++this.elementStateCounter;\n        if (this.dragndrop && this.elementStateCounter === 1) {\n            this.onDragEnter.emit();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('dragleave', ['$event'])\n    public onDragleave(event) {\n        --this.elementStateCounter;\n        if (this.dragndrop && this.elementStateCounter === 0) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.onDragLeave.emit();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('drop', ['$event'])\n    public onDrop(event) {\n        this.elementStateCounter = 0;\n\n        if (!this.dragndrop || this.disabled) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        const rawFiles = event.dataTransfer.files;\n        const files: File[] = Array.from(rawFiles);\n\n        if (!this.multiple && files.length > 1) {\n            this.onInvalidFiles.emit(files);\n            return;\n        }\n\n        const valid_files: File[] = [];\n        const invalid_files: File[] = [];\n        if (files.length > 0) {\n            if (!this.accept) {\n                files.forEach((file: File) => {\n                    valid_files.push(file);\n                });\n            } else {\n                const allowed_extensions = this.accept.toLocaleLowerCase().replace(/[\\s.]/g, '').split(',');\n                files.forEach((file: File) => {\n                    const ext = file.name.split('.')[file.name.split('.').length - 1];\n                    if (allowed_extensions.lastIndexOf(ext) !== -1) {\n                        valid_files.push(file);\n                    } else {\n                        invalid_files.push(file);\n                    }\n                });\n            }\n            this.onFileChange.emit(valid_files);\n            if (invalid_files.length > 0) {\n                this.onInvalidFiles.emit(invalid_files);\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FileInputComponent } from './file-input.component';\nimport { FormsModule } from '@angular/forms';\nimport { FileSelectDirective } from './directives/file-select.directive';\nimport { FileDragndropDirective } from './directives/file-dragndrop.directive';\n\n@NgModule({\n    imports: [CommonModule, FormsModule],\n    exports: [FileInputComponent, FileSelectDirective, FileDragndropDirective],\n    declarations: [FileInputComponent, FileSelectDirective, FileDragndropDirective]\n})\nexport class FileInputModule {}\n","import { Directive } from '@angular/core';\n\n/**\n * Used for easily displaying forms with a margin. Not necessary for fundamental forms to be functional.\n *\n * ```html\n * <div fd-form-set>\n *     <div fd-form-item>\n *         ...\n *     </div>\n * </div>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-set]',\n    host: {\n        class: 'fd-form__set'\n    }\n})\nexport class FormSetDirective {}\n","import { Directive, Input, ElementRef } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Directive intended for use on form controls.\n *\n * ```html\n * <input type=\"text\" fd-form-control />\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-control]'\n})\nexport class FormControlDirective extends AbstractFdNgxClass {\n\n    /**\n     *  The state of the form control - applies css classes.\n     *  Can be `valid`, `error`, `warning` or blank for default.\n     */\n    @Input()\n    state: string;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-form__control');\n        if (this.state) {\n            this._addClassToElement('is-' + this.state);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive, Input, HostBinding } from '@angular/core';\n\n/**\n * Directive to be applied to the parent of a form control.\n *\n * ```html\n * <div fd-form-item>\n *     <input fd-form-control type=\"text\" />\n * </div>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-item]'\n})\nexport class FormItemDirective {\n\n    /** Whether the form item is a checkbox. */\n    @Input()\n    @HostBinding('class.fd-form__item--check')\n    isCheck: boolean = false;\n\n    /** Whether the form item is inline. */\n    @Input()\n    @HostBinding('class.fd-form__item--inline')\n    isInline: boolean = false;\n\n    /** @hidden */\n    @HostBinding('class.fd-form__item')\n    fdFormItemClass: boolean = true;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Label to be linked to a form control.\n *\n * ```html\n * <label fd-form-label for=\"input-id\">Label Text</label>\n * <input fd-form-control type=\"text\" id=\"input-id\" />\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-label]',\n})\nexport class FormLabelDirective {\n    /** @hidden */\n    @HostBinding('class.fd-form__label')\n    fdFormLabelClass: boolean = true;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Applies css to a legend html element.\n *\n * <legend fd-form-legend>Legend</legend>\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-form-legend]',\n})\nexport class FormLegendDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-form__legend')\n    fdFormLegendClass: boolean = true;\n}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * Form message. Intended to be displayed under a form control for validation purposes.\n */\n@Component({\n    selector: 'fd-form-message',\n    templateUrl: './form-message.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormMessageComponent {\n\n    /** Type of the message. Can be `text`, `help`, `error` and `warning`. */\n    @Input()\n    type: string = '';\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Represents a form group element.\n *\n * ```html\n * <fd-form-group>\n *     <div fd-form-item [isCheck]=\"true\">\n *         <input fd-form-control type=\"radio\" checked>\n *         <fd-form-label>Option One</fd-form-label>\n *     </div>\n * </fd-form-group>\n * ```\n */\n@Component({\n    selector: 'fd-form-group',\n    templateUrl: './form-group.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormGroupComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-form__group')\n    fdFormGroupClass: boolean = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FormSetDirective } from './form-set/form-set.directive';\nimport { FormControlDirective } from './form-control/form-control.directive';\nimport { FormItemDirective } from './form-item/form-item.directive';\nimport { FormLabelDirective } from './form-label/form-label.directive';\nimport { FormLegendDirective } from './form-legend/form-legend.directive';\nimport { FormMessageComponent } from './form-message/form-message.component';\nimport { FormGroupComponent } from './form-group/form-group.component';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        FormSetDirective,\n        FormControlDirective,\n        FormItemDirective,\n        FormLabelDirective,\n        FormLegendDirective,\n        FormMessageComponent,\n        FormGroupComponent\n    ],\n    declarations: [\n        FormSetDirective,\n        FormControlDirective,\n        FormItemDirective,\n        FormLabelDirective,\n        FormLegendDirective,\n        FormMessageComponent,\n        FormGroupComponent\n    ]\n})\nexport class FormModule {}\n","import { Directive, ElementRef, Inject, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * The directive that represents an identifier. \n * Identifier is a way to visually present something using an icon or user initials.\n *\n * ```html\n * <span fd-identifier [size]=\"'l'\" [glyph]=\"'washing-machine'\"></span>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-identifier]',\n    host: {\n        role: 'presentation'\n    }\n})\nexport class IdentifierDirective extends AbstractFdNgxClass {\n    /** \n     * The size of the identifier. \n     * The predefined values for the size are *xxs*, *xs*, *s*, *m*, *l*, *xl* and *xxl*.\n     *  *size* can accept any other string, for example *xxxs*, which will be translated into class *fd-identifier--xxxs*.\n     */\n    @Input() size: string;\n\n    /** \n     * Whether to render a circle style for the identifier. \n     */\n    @Input() circle: boolean;\n\n    /** \n     * Whether to render a transparent style for the identifier. \n     */\n    @Input() transparent: boolean;\n\n    /** A number specifying the background color of the identifier. */\n    @Input() colorAccent: number;\n\n    /** The glyph name */\n    @Input() glyph: string;\n\n    /** @hidden */\n    _setProperties() {\n        if (this.size) {\n            this._addClassToElement('fd-identifier--' + this.size);\n        }\n        if (this.circle) {\n            this._addClassToElement('fd-identifier--circle');\n        }\n        if (this.transparent) {\n            this._addClassToElement('fd-identifier--transparent');\n        }\n        if (this.colorAccent) {\n            this._addClassToElement('fd-has-background-color-accent-' + this.colorAccent);\n        }\n        if (this.glyph) {\n            this._addClassToElement('sap-icon--' + this.glyph);\n        }\n    }\n\n    /** @hidden */\n    constructor(@Inject(ElementRef) elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IdentifierDirective } from './identifier.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [IdentifierDirective],\n    declarations: [IdentifierDirective]\n})\nexport class IdentifierModule {}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents an image. \n *\n * ```html\n * <fd-image style=\"margin-right: 10px;\" [size]=\"'l'\" [circle]=\"true\" [photo]=\"'https://placeimg.com/400/400/nature'\"></fd-image>\n * ```\n */\n@Component({\n    selector: 'fd-image',\n    templateUrl: './image.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ImageComponent {\n    /** \n     * The size of the image. \n     * The predefined values for the size are *s*, *m*, and *l*.\n     */\n    @Input() size: string = 'm';\n\n    /** \n     * Whether to render a circle style for the image. \n     */\n    @Input() circle: boolean = false;\n\n    /** \n     * The image label. \n     */\n    @Input() label: string = 'Image label';\n\n    /** \n     * The image url. \n     */\n    @Input() photo: string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ImageComponent } from './image.component';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ImageComponent],\n    declarations: [ImageComponent]\n})\nexport class ImageModule {}\n","import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { fromEvent, Observable, Subscription } from 'rxjs';\n\n/**\n * Tool directive used to achieve the infinite scroll mechanism.\n */\n@Directive({\n    selector: '[fdInfiniteScroll]'\n})\nexport class InfiniteScrollDirective implements OnInit, OnDestroy {\n\n    /** Scroll percentage at which the onScrollAction event is fired. */\n    @Input()\n    scrollPercent: number = 75;\n\n    /** Event emitted when the scrollPercent threshold is met. */\n    @Output()\n    onScrollAction = new EventEmitter<any>();\n\n    private scrollEvent: Observable<any>;\n    private subscription: Subscription;\n\n    /** @hidden */\n    constructor(private element: ElementRef) {}\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.scrollEvent = fromEvent(this.element.nativeElement, 'scroll');\n\n        this.subscription = this.scrollEvent.subscribe((e: any) => {\n            if ((e.target.scrollTop + e.target.offsetHeight) / e.target.scrollHeight > this.scrollPercent / 100) {\n                this.onScrollAction.emit(null);\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\n\n@NgModule({\n    declarations: [InfiniteScrollDirective],\n    exports: [InfiniteScrollDirective]\n})\nexport class InfiniteScrollModule {}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { Placement } from 'popper.js';\n/**\n * The component that represents an inline-help. \n * Inline help is used to display help text in a popover, often inline with headers, body text and form labels.\n *\n * ```html\n * <fd-inline-help [placement]=\"'bottom-left'\">\n *      Lorem ipsum dolor sit amet, consectetur adipiscing.\n * </fd-inline-help>\n * ```\n */\n@Component({\n    selector: 'fd-inline-help',\n    templateUrl: './inline-help.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['inline-help.component.scss']\n})\nexport class InlineHelpComponent {\n\n    /** The placement of the inline help component. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.\n     *   The default placement is *bottom start*\n     */\n    @Input()\n    placement: Placement = 'bottom-start';\n\n    /** The trigger events that will open/close the inline help component.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['mouseenter', 'mouseleave'];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { InlineHelpComponent } from './inline-help.component';\nimport { PopoverModule } from '../popover/public_api';\n\n@NgModule({\n    imports: [CommonModule, PopoverModule],\n    exports: [InlineHelpComponent],\n    declarations: [InlineHelpComponent]\n})\nexport class InlineHelpModule {}\n","import { Component, Input, Output, EventEmitter, forwardRef, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * The component that represents an input group.\n * The input group includes form inputs with add-ons that allow the user to better understand the information being entered.\n *\n * ```html\n * <fd-input-group [placement]=\"'after'\" [addOnText]=\"'$'\" [placeholder]=\"'Amount'\">\n * </fd-input-group>\n * ```\n */\n@Component({\n    selector: 'fd-input-group',\n    templateUrl: './input-group.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputGroupComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InputGroupComponent implements ControlValueAccessor {\n    /** \n     * The placement of the add-on. \n     * Options include *before* and *after*\n     */\n    @Input()\n    placement: string;\n\n    /** Whether the input group is in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Whether the input group is inline. */\n    @Input()\n    inline: boolean;\n\n    /** Placeholder for the input group. */\n    @Input()\n    placeholder: string;\n\n    /** The text for the add-on. */\n    @Input()\n    addOnText: string;\n\n    /** The icon value for the add-on. */\n    @Input()\n    glyph: string;\n\n    /** Whether the icon add-on or the text add-on is a button. */\n    @Input()\n    button: boolean;\n\n    /** Whether the input group is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Event emitted when the add-on button is clicked. */\n    @Output()\n    addOnButtonClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    /** @hidden */\n    inputTextValue: string;\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Get the value of the text input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the value of the text input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    buttonClicked($event) {\n        this.addOnButtonClicked.emit($event);\n    }\n}\n","import { Component, forwardRef, Input, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * The component that represents an integer value input.\n * The value is increased or decreased using the spinner add-on.\n *\n * ```html\n * <fd-input-group-number [disabled]=\"false\" [(ngModel)]=\"numberValue\"></fd-input-group-number>\n * ```\n */\n@Component({\n    selector: 'fd-input-group-number',\n    templateUrl: './input-group-number.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputGroupNumberComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InputGroupNumberComponent implements ControlValueAccessor {\n    /** Whether the input is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Placeholder for the input field. */\n    @Input()\n    placeholder: string;\n\n    /** Aria label for the 'step up' button. */\n    @Input()\n    stepUpLabel: string = 'Step up';\n\n    /** Aria label for the 'step down' button. */\n    @Input()\n    stepDownLabel: string = 'Step down';\n\n    /** @hidden */\n    inputTextValue: number;\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Get the value of the text input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the value of the text input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    stepUpClicked() {\n        this.inputTextValue++;\n        this.onChange(this.inputTextValue);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    stepDownClicked() {\n        this.inputTextValue--;\n        this.onChange(this.inputTextValue);\n        this.onTouched();\n    }\n}\n","import { Component, Input, forwardRef, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * The component that represents a search input group.\n *\n * ```html\n * <fd-input-group-search [disabled]=\"false\" [(ngModel)]=\"searchTerm\"></fd-input-group-search>\n * ```\n */\n@Component({\n    selector: 'fd-input-group-search',\n    templateUrl: './input-group-search.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputGroupSearchComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InputGroupSearchComponent implements ControlValueAccessor {\n    /** Whether the input is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Placeholder for the input field. */\n    @Input()\n    placeholder;\n\n    /** Aria label for the 'clear' button. */\n    @Input()\n    clearLabel: string = 'Clear';\n\n    /** @hidden */\n    inputTextValue: string;\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Get the value of the text input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the value of the text input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { InputGroupComponent } from './input-group.component';\nimport { InputGroupNumberComponent } from './input-group-number.component';\nimport { InputGroupSearchComponent } from './input-group-search.component';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\n\n@NgModule({\n    declarations: [InputGroupSearchComponent, InputGroupNumberComponent, InputGroupComponent],\n    imports: [CommonModule, ButtonModule, IconModule, FormsModule],\n    exports: [InputGroupSearchComponent, InputGroupNumberComponent, InputGroupComponent]\n})\nexport class InputGroupModule {}\n","import { Component, Directive, ViewEncapsulation } from '@angular/core';\n\n/**\n * The directive that represents a list.\n * It is used to display a list of items with simple information such as scopes, names, etc. \n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-list]',\n    host: {\n        class: 'fd-list-group'\n    }\n})\nexport class ListDirective {}\n","import { Component, Directive, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a list item.\n * The list item can contain plain text, links or actions.\n * \n * ```html\n * <ul fd-list>\n *    <li fd-list-item>\n *        List item 1\n *    </li>\n * </ul>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-list-item]',\n    host: {\n        'class': 'fd-list-group__item'\n    }\n})\nexport class ListItemDirective {}\n","import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nlet listCheckboxUniqueId: number = 0;\n\n/**\n * The component that represents a checkbox list.\n *\n * ```html\n * <fd-list>\n *    <li fd-list-item>\n *       <fd-list-checkbox>List item 1</fd-list-checkbox>\n *    </li>\n * </fd-list>\n * ```\n */\n@Component({\n    selector: 'fd-list-checkbox',\n    host: {\n        class: 'fd-form__item fd-form__item--check',\n        '[attr.id]': 'id'\n    },\n    templateUrl: './list-checkbox.component.html',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ListCheckboxComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ListCheckboxComponent implements ControlValueAccessor {\n\n    /** Whether the list item checkbox is checked. */\n    @Input()\n    checked: boolean = false;\n\n    /** Whether the list item checkbox is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Event fired when the state of the checkbox changes. Passes back the id and the value. */\n    @Output()\n    readonly onToggle: EventEmitter<{id: string, value: boolean}> = new EventEmitter<{id: string, value: boolean}>();\n\n    /** Event fired when the checkbox becomes active. */\n    @Output()\n    readonly onActivated: EventEmitter<string> = new EventEmitter<string>();\n\n    /** The id of the checkbox. */\n    @Input()\n    id: string = 'fd-list-checkbox-' + listCheckboxUniqueId++;\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Set the value of the *isChecked* property. */\n    get isChecked() {\n        return this.checked;\n    }\n\n    /** Set the value of the *isChecked* property. */\n    set isChecked(value) {\n        this.checked = value;\n        this.onChange(value);\n        this.onTouched();\n        this.onToggle.emit({id: this.id, value: value});\n\n        if (this.checked) {\n            this.onActivated.emit(this.id);\n        }\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.checked = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n}\n","import { Directive } from '@angular/core';\n\n/**\n * List item level actions such as add, remove, delete, sort, etc.\n *\n * ```html\n * <fd-list>\n *    <li fd-list-item>List item 1\n *        <fd-list-action>\n *            <button fd-button [options]=\"'light'\" [glyph]=\"'edit'\"></button>\n *       </fd-list-action>\n *    </li>\n * </fd-list> \n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: 'fd-list-action',\n    host: {\n        class: 'fd-list-group__action'\n    }\n})\nexport class ListActionDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ListDirective } from './list.directive';\nimport { ListItemDirective } from './list-item.directive';\nimport { ListCheckboxComponent } from './list-checkbox.component';\nimport { ListActionDirective } from './list-action.directive';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\nimport { FormsModule } from '@angular/forms';\n@NgModule({\n    declarations: [ListDirective, ListItemDirective, ListActionDirective, ListCheckboxComponent],\n    imports: [CommonModule, ButtonModule, IconModule, FormsModule],\n    exports: [ListDirective, ListItemDirective, ListActionDirective, ListCheckboxComponent]\n})\nexport class ListModule {}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a loading spinner. \n *\n * ```html\n * <fd-loading-spinner [loading]=\"true\"></fd-loading-spinner>\n * ```\n */\n@Component({\n    selector: 'fd-loading-spinner',\n    templateUrl: './loading-spinner.component.html',\n    styleUrls: ['./loading-spinner.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class LoadingSpinnerComponent {\n    /** Whether to display the loading indicator animation. */\n    @Input()\n    loading: boolean = false;\n\n    /** Aria label for the 'loading' spinner. */\n    @Input()\n    loadingLabel: string = 'Loading';\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoadingSpinnerComponent } from './loading-spinner.component';\n\n@NgModule({\n    declarations: [LoadingSpinnerComponent],\n    exports: [LoadingSpinnerComponent],\n    imports: [CommonModule]\n})\nexport class LoadingSpinnerModule {}\n","import { Observable, Subject } from 'rxjs';\n\n/**\n * Reference to a modal component generated via the ModalService.\n * It can be injected into the content component through the constructor.\n * For a template, it is declared as part of the implicit context, see examples.\n */\nexport class ModalRef {\n    private readonly _afterClosed = new Subject<any>();\n\n    /**\n     * Observable that is triggered when the modal is closed.\n     * On close a *result* is passed back. On dismiss, an *error* is returned instead.\n     */\n    public afterClosed: Observable<any> = this._afterClosed.asObservable();\n\n    /** Data passed from the calling component to the content.*/\n    public data: any;\n\n    /**\n     * Closes the modal and passes the argument to the afterClosed observable.\n     * @param result Value passed back to the observable as a result.\n     */\n    close(result?: any): void {\n        this._afterClosed.next(result);\n    }\n\n    /**\n     * Dismisses the modal and passes the argument to the afterClosed observable as an error.\n     * @param reason Value passed back to the observable as an error.\n     */\n    dismiss(reason?: any): void {\n        this._afterClosed.error(reason);\n    }\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger } from '@angular/animations';\n\nexport const modalFadeNgIf: AnimationTriggerMetadata = trigger(\n    'modal-fade',\n    [\n        transition(\n            ':enter', [\n                style({opacity: 0}),\n                animate('150ms ease-in-out', style({opacity: 1}))\n            ]\n        ),\n        transition(\n            ':leave', [\n                style({opacity: 1}),\n                animate('75ms ease-in-out', style({opacity: 0}))\n            ]\n        )\n    ]\n);\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    HostListener,\n    OnDestroy,\n    OnInit,\n    Optional,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ModalRef } from './modal-utils/modal-ref';\nimport { modalFadeNgIf } from './modal-utils/modal-animations';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\nimport focusTrap from 'focus-trap';\n\n@Component({\n    selector: 'fd-modal',\n    styleUrls: ['modal.component.scss'],\n    templateUrl: './modal.component.html',\n    host: {\n        'role': 'dialog',\n        '[class.fd-modal]': 'true',\n        '[class.fd-modal-custom]': 'true',\n        '[attr.aria-labelledby]': 'ariaLabelledBy',\n        '[attr.aria-label]': 'ariaLabel',\n        '[attr.aria-describedby]': 'ariaDescribedBy',\n        '[attr.aria-modal]': 'true',\n        '[attr.id]': 'id',\n        'tabindex': '-1',\n        '[@modal-fade]': ''\n    },\n    animations: [\n        modalFadeNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent extends AbstractFdNgxClass implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('vc', {read: ViewContainerRef})\n    containerRef: ViewContainerRef;\n\n    id: string;\n\n    escKeyCloseable: boolean = true;\n\n    focusTrapped: boolean = true;\n\n    ariaLabelledBy: string = null;\n\n    ariaLabel: string = null;\n\n    ariaDescribedBy: string = null;\n\n    childComponentType: TemplateRef<any> | Type<any>;\n\n    backdropClickCloseable: boolean = true;\n\n    hasBackdrop: boolean  = true;\n\n    modalPanelClass: string = '';\n\n    private componentRef: ComponentRef<any> | EmbeddedViewRef<any>;\n\n    private focusTrap: any;\n\n    constructor(private elRef: ElementRef,\n                private componentFactoryResolver: ComponentFactoryResolver,\n                private cdRef: ChangeDetectorRef,\n                @Optional() private modalRef: ModalRef) {\n        super(elRef);\n    }\n\n    ngOnInit(): void {\n        this._setProperties();\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusTrap) {\n            this.focusTrap.deactivate();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.childComponentType) {\n            if (this.childComponentType instanceof Type) {\n                this.loadFromComponent(this.childComponentType);\n            } else if (this.childComponentType instanceof TemplateRef) {\n                this.loadFromTemplate(this.childComponentType);\n            }\n        }\n        if (this.focusTrapped) {\n            try {\n                this.focusTrap = focusTrap(this.elRef.nativeElement, {\n                    clickOutsideDeactivates: this.backdropClickCloseable && this.hasBackdrop,\n                    escapeDeactivates: false,\n                    initialFocus: this.elRef.nativeElement\n                });\n                this.focusTrap.activate();\n            } catch (e) {\n                console.warn('Attempted to focus trap the modal, but no tabbable elements were found.');\n            }\n        }\n        this.cdRef.detectChanges();\n    }\n\n    @HostListener('keyup', ['$event'])\n    closeModalEsc(event: KeyboardEvent): void {\n        if (this.escKeyCloseable && event.key === 'Escape') {\n            this.modalRef.dismiss('escape');\n        }\n    }\n\n    private loadFromComponent(content: Type<any>): void {\n        this.containerRef.clear();\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(content);\n        this.componentRef = this.containerRef.createComponent(componentFactory);\n    }\n\n    private loadFromTemplate(content: TemplateRef<any>): void {\n        this.containerRef.clear();\n        const context = {\n            $implicit: this.modalRef\n        };\n        this.componentRef = this.containerRef.createEmbeddedView(content, context);\n    }\n\n    _setProperties(): void {\n        if (this.modalPanelClass) {\n            this._addClassToElement(this.modalPanelClass);\n        }\n    }\n}\n","import { Component, HostBinding } from '@angular/core';\n\n/**\n * Applies fundamental layout and styling to the contents of a modal header.\n *\n * ```html\n * <fd-modal-header>\n *     <h1 fd-modal-title>Title</h1>\n *     <button fd-modal-close-btn></button>\n * </fd-modal-header>\n * ```\n */\n@Component({\n    selector: 'fd-modal-header',\n    templateUrl: './modal-header.component.html',\n    styles: [':host {display: block;}']\n})\nexport class ModalHeaderComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__header')\n    modalHeader = true;\n}\n","import { Component, HostBinding } from '@angular/core';\n\n/**\n * Applies fundamental layout and styling to the contents of a modal body.\n *\n * ```html\n * <fd-modal-body>\n *     <div>Modal body content</div>\n * </fd-modal-body>\n * ```\n */\n@Component({\n    selector: 'fd-modal-body',\n    templateUrl: './modal-body.component.html',\n    styles: [`\n        :host {\n            display: block;\n            overflow: auto;\n            flex-grow: 1;\n        }\n    `]\n})\nexport class ModalBodyComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__body')\n    modalBody = true;\n}\n","import { Component, HostBinding } from '@angular/core';\n\n/**\n * Applies fundamental layout and styling to the contents of a modal footer.\n *\n * ```html\n * <fd-modal-footer>\n *     <button>Do action</button>\n * </fd-modal-footer>\n * ```\n */\n@Component({\n    selector: 'fd-modal-footer',\n    templateUrl: './modal-footer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            border-top: 1px solid #eeeeef;\n        }\n    `]\n})\nexport class ModalFooterComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__footer')\n    modalFooter = true;\n}\n","import { Component, ElementRef, HostBinding, HostListener, OnInit, ViewEncapsulation } from '@angular/core';\nimport { ModalRef } from './modal-ref';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\nimport { modalFadeNgIf } from './modal-animations';\n\n@Component({\n    selector: 'fd-modal-overlay',\n    template: ``,\n    host: {\n        'tabindex': '-1',\n        '[@modal-fade]': ''\n    },\n    animations: [\n        modalFadeNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ModalBackdrop extends AbstractFdNgxClass implements OnInit {\n\n    backdropClass: string = '';\n    backdropClickCloseable: boolean = true;\n\n    @HostBinding('class.fd-overlay') overlayMain = true;\n    @HostBinding('class.fd-overlay--modal') overlayModal = true;\n\n    constructor(private elRef: ElementRef,\n                private modalRef: ModalRef) {\n        super(elRef);\n    }\n\n    ngOnInit(): void {\n        this._setProperties();\n    }\n\n    _setProperties(): void {\n        if (this.backdropClass) {\n            this._addClassToElement(this.backdropClass);\n        }\n    }\n\n    @HostListener('click')\n    closeModal(): void {\n        if (this.backdropClickCloseable) {\n            this.modalRef.dismiss('backdrop');\n        }\n    }\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\nimport { modalFadeNgIf } from './modal-animations';\n\n@Component({\n    selector: 'fd-modal-container',\n    template: ``,\n    styles: [`\n        .fd-modal-container {\n            position: fixed;\n            top: 0;\n            bottom: 0;\n            right: 0;\n            left: 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 1000;\n        }\n    `],\n    host: {\n        '[@modal-fade]': '',\n        '[class.fd-modal-container]': 'true'\n    },\n    animations: [\n        modalFadeNgIf\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ModalContainer {}\n","/**\n * Configuration for opening a modal with the ModalService.\n */\nimport { ModalPosition } from './modal-position';\n\nexport class ModalConfig {\n\n    /** Id for the modal component. If omitted, a unique one is generated. */\n    id?: string;\n\n    /** Width of the modal. */\n    width?: string;\n\n    /** Height of the modal. */\n    height?: string;\n\n    /** Minimum width of the modal. */\n    minWidth?: string;\n\n    /** Minimum height of the modal. */\n    minHeight?: string;\n\n    /** Maximum width of the modal. */\n    maxWidth?: string;\n\n    /** Maximum height of the modal. */\n    maxHeight?: string;\n\n    /** Position of the modal. */\n    position?: ModalPosition;\n\n    /** Aria label for the modal component element. */\n    ariaLabel?: string = null;\n\n    /** Id of the element that labels the modal. */\n    ariaLabelledBy?: string = null;\n\n    /** Id of the element that describes the modal. */\n    ariaDescribedBy?: string = null;\n\n    /** Whether the modal should have a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** Global classes to apply to the backdrop. */\n    backdropClass?: string = '';\n\n    /** Whether clicking on the backdrop should close the modal. Only works if hasBackdrop is true. */\n    backdropClickCloseable?: boolean = true;\n\n    /** Global classes to apply to the modal panel. */\n    modalPanelClass?: string = '';\n\n    /** Whether the escape key should close the modal. */\n    escKeyCloseable?: boolean = true;\n\n    /** Whether the modal should be focus trapped. */\n    focusTrapped?: boolean = true;\n\n    /** The container that the modal is appended to. By default, it is appended to the body. */\n    container?: HTMLElement | 'body' = 'body';\n\n    /** Data to pass along to the content through the ModalRef. */\n    data?: any;\n}\n","\nimport { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\n\nexport class ModalInjector implements Injector {\n    constructor(private _parentInjector: Injector, private _additionalTokens: WeakMap<any, any>) {}\n\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n\n    get(token: any, notFoundValue?: any);\n\n    get(token: any, notFoundValue?: any, flags?: any) {\n        const value = this._additionalTokens.get(token);\n\n        if (value) {\n            return value;\n        }\n\n        return this._parentInjector.get<any>(token, notFoundValue);\n    }\n}\n","import {\n    ComponentFactoryResolver,\n    Injectable,\n    ApplicationRef,\n    Injector,\n    EmbeddedViewRef,\n    ComponentRef,\n    Type,\n    TemplateRef\n} from '@angular/core';\nimport { ModalComponent } from '../modal.component';\nimport { ModalBackdrop } from '../modal-utils/modal-backdrop';\nimport { ModalContainer } from '../modal-utils/modal-container';\nimport { ModalConfig } from '../modal-utils/modal-config';\nimport { ModalRef } from '../modal-utils/modal-ref';\nimport { ModalInjector } from '../modal-utils/modal-injector';\nimport { ModalPosition } from '../modal-utils/modal-position';\n\n/**\n * Service used to dynamically generate a modal.\n */\n@Injectable()\nexport class ModalService {\n    private modals: {\n        modalRef: ComponentRef<ModalComponent>,\n        backdropRef?: ComponentRef<ModalBackdrop>,\n        containerRef?: ComponentRef<ModalContainer>\n    }[] = [];\n\n    /** @hidden */\n    constructor(private componentFactoryResolver: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector) {}\n\n    /**\n     * Status of the modal service.\n     * Returns true if there are open modals, false otherwise.\n     */\n    public hasOpenModals(): boolean {\n        return this.modals && this.modals.length > 0;\n    }\n\n    /**\n     * Dismisses all currently open modals.\n     */\n    public dismissAll(): void {\n        this.modals.forEach(item => {\n            this.destroyModalComponent(item.modalRef);\n        });\n    }\n\n    /**\n     * Opens a modal component with a content of type TemplateRef or a component type.\n     * @param contentType Content of the modal component.\n     * @param modalConfig Configuration of the modal component.\n     */\n    public open(contentType: Type<any> | TemplateRef<any>, modalConfig: ModalConfig = new ModalConfig()): ModalRef {\n\n        // Get default values from model\n        modalConfig = Object.assign(new ModalConfig(), modalConfig);\n\n        // Setup injectable data\n        const configMap = new WeakMap();\n        const modalRef = new ModalRef();\n        modalRef.data = (modalConfig ? modalConfig.data : undefined);\n        configMap.set(ModalRef, modalRef);\n\n        // Prepare container\n        const containerFactory = this.componentFactoryResolver.resolveComponentFactory(ModalContainer);\n        const containerRef = containerFactory.create(this.injector);\n        this.appRef.attachView(containerRef.hostView);\n\n        // Prepare modal\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ModalComponent);\n        const componentRef = componentFactory.create(new ModalInjector(this.injector, configMap));\n        this.appRef.attachView(componentRef.hostView);\n\n        // Prepare backdrop\n        let backdropRef;\n        if (modalConfig.hasBackdrop) {\n            const backdropFactory = this.componentFactoryResolver.resolveComponentFactory(ModalBackdrop);\n            backdropRef = backdropFactory.create(new ModalInjector(this.injector, configMap));\n            this.appRef.attachView(backdropRef.hostView);\n        }\n\n        // Subscribe to close of modalRef\n        const refSub = modalRef.afterClosed.subscribe(() => {\n            this.destroyModalComponent(componentRef);\n            refSub.unsubscribe();\n        }, () => {\n            this.destroyModalComponent(componentRef);\n            refSub.unsubscribe();\n        });\n\n        // Assign component attributes\n        const configObj = Object.assign({}, modalConfig);\n        Object.keys(configObj).forEach(key => {\n            if (key !== 'data') {\n                componentRef.instance[key] = configObj[key];\n\n                if (modalConfig.hasBackdrop) {\n                    backdropRef.instance[key] = configObj[key];\n                }\n            }\n        });\n        componentRef.instance.childComponentType = contentType;\n\n        // Sizing\n        this.setModalSize(componentRef, configObj);\n\n        // Positioning\n        this.setModalPosition(componentRef, configObj.position);\n\n        // Render container\n        const containerEl = (containerRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        if (modalConfig.container !== 'body') {\n            modalConfig.container.appendChild(containerEl);\n        } else {\n            document.body.appendChild(containerEl);\n        }\n\n        // Render backdrop\n        if (modalConfig.hasBackdrop) {\n            const domBackdrop = (backdropRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n            containerRef.location.nativeElement.appendChild(domBackdrop);\n        }\n\n        // Render modal\n        const domElement = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        containerRef.location.nativeElement.appendChild(domElement);\n\n        this.modals.push({modalRef: componentRef, backdropRef: backdropRef, containerRef: containerRef});\n        return modalRef;\n    }\n\n    private destroyModalComponent(modal: ComponentRef<ModalComponent>): void {\n        const arrayRef = this.modals.find((item) => item.modalRef === modal);\n        const indexOf = this.modals.indexOf(arrayRef);\n        this.appRef.detachView(arrayRef.modalRef.hostView);\n        this.appRef.detachView(arrayRef.containerRef.hostView);\n        arrayRef.containerRef.destroy();\n        arrayRef.modalRef.destroy();\n\n        if (arrayRef.backdropRef) {\n            this.appRef.detachView(arrayRef.backdropRef.hostView);\n            arrayRef.backdropRef.destroy();\n        }\n\n        this.modals[indexOf] = null;\n        this.modals = this.modals.filter(item => item !== null && item !== undefined);\n    }\n\n    private setModalSize(componentRef: ComponentRef<ModalComponent>, configObj: ModalConfig): void {\n        componentRef.location.nativeElement.style.minWidth = configObj.minWidth;\n        componentRef.location.nativeElement.style.minHeight = configObj.minHeight;\n        componentRef.location.nativeElement.style.maxWidth = configObj.maxWidth;\n        componentRef.location.nativeElement.style.maxHeight = configObj.maxHeight;\n        componentRef.location.nativeElement.style.width = configObj.width;\n        componentRef.location.nativeElement.style.height = configObj.height;\n    }\n\n    private setModalPosition(componentRef: ComponentRef<ModalComponent>, position: ModalPosition): void {\n        if (position) {\n            componentRef.location.nativeElement.style.top = position.top;\n            componentRef.location.nativeElement.style.bottom = position.bottom;\n            componentRef.location.nativeElement.style.right = position.right;\n            componentRef.location.nativeElement.style.left = position.left;\n        }\n    }\n\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Directive that applies fundamental modal styling to a header.\n *\n * ```html\n * <h1 fd-modal-title>Modal Title</h1>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-modal-title]'\n})\nexport class ModalTitleDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__title')\n    modalTitle = true;\n}\n\n/**\n * Directive that applies fundamental modal styling to a button.\n *\n * ```html\n * <button fd-modal-close-btn></button>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-modal-close-btn]'\n})\nexport class ModalCloseButtonDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-button--light')\n    lightButton = true;\n\n    /** @hidden */\n    @HostBinding('class.fd-modal__close')\n    modalClose = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\n\nimport { ModalComponent } from './modal.component';\nimport { ModalHeaderComponent } from './modal-header/modal-header.component';\nimport { ModalBodyComponent } from './modal-body/modal-body.component';\nimport { ModalFooterComponent } from './modal-footer/modal-footer.component';\n\nimport { ModalService } from './modal-service/modal.service';\nimport { ModalBackdrop } from './modal-utils/modal-backdrop';\nimport { ModalContainer } from './modal-utils/modal-container';\nimport { ModalCloseButtonDirective, ModalTitleDirective } from './modal-utils/modal-directives';\n\n@NgModule({\n    declarations: [\n        ModalComponent,\n        ModalHeaderComponent,\n        ModalBodyComponent,\n        ModalFooterComponent,\n        ModalBackdrop,\n        ModalContainer,\n        ModalCloseButtonDirective,\n        ModalTitleDirective\n    ],\n    imports: [\n        CommonModule,\n        ButtonModule,\n        IconModule\n    ],\n    exports: [\n        ModalHeaderComponent,\n        ModalBodyComponent,\n        ModalFooterComponent,\n        ModalBackdrop,\n        ModalContainer,\n        ModalCloseButtonDirective,\n        ModalTitleDirective\n    ],\n    entryComponents: [\n        ModalComponent,\n        ModalBackdrop,\n        ModalContainer\n    ],\n    providers: [ModalService]\n})\nexport class ModalModule {}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { PopoverComponent } from '../popover/popover.component';\nimport { PopoverFillMode } from '../popover/popover-directive/popover.directive';\n\n/**\n * Input field with multiple selection enabled. Should be used when a user can select between a\n * limited number of pre-defined options with a filter-enabled context.\n *\n * Supports Angular Forms.\n */\n@Component({\n    selector: 'fd-multi-input',\n    templateUrl: './multi-input.component.html',\n    styleUrls: ['./multi-input.component.scss'],\n    host: {\n        '(blur)': 'onTouched()',\n        '[class.fd-multi-input-custom]': 'true'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MultiInputComponent),\n            multi: true\n        }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MultiInputComponent implements OnInit, ControlValueAccessor, OnChanges {\n\n    /** @hidden */\n    @ViewChild(PopoverComponent)\n    popoverRef: PopoverComponent;\n\n    /** @hidden */\n    @HostBinding('class.fd-multi-input')\n    multiInputClass = true;\n\n    /** Placeholder for the input field. */\n    @Input()\n    placeholder: string = '';\n\n    /** Whether the input is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Whether the input is in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n    @Input()\n    maxHeight: string = '300px';\n\n    /** Icon of the button on the right of the input field. */\n    @Input()\n    glyph: string = 'navigation-down-arrow';\n\n    /** Values to be displayed in the unfiltered dropdown. */\n    @Input()\n    dropdownValues: any[] = [];\n\n    /** Search term, or more specifically the value of the inner input field. */\n    @Input()\n    searchTerm: string;\n\n    /** Whether the search term should be highlighted in results. */\n    @Input()\n    highlight: boolean = true;\n\n    /** Selected dropdown items. */\n    @Input()\n    selected: any[] = [];\n\n    /** Filter function. Accepts an array and a string as arguments, and outputs an array.\n     * An arrow function can be used to access the *this* keyword in the calling component.\n     * See multi input examples for details. */\n    @Input()\n    filterFn: Function = this.defaultFilter;\n\n    /** Display function. Accepts an object of the same type as the\n     * items passed to dropdownValues as argument, and outputs a string.\n     * An arrow function can be used to access the *this* keyword in the calling component.\n     * See multi input examples for details. */\n    @Input()\n    displayFn: Function = this.defaultDisplay;\n\n    /** Aria label for the multi input body. */\n    @Input()\n    multiInputBodyLabel: string = 'Multi input body';\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode = 'at-least';\n\n    /** Event emitted when the search term changes. Use *$event* to access the new term. */\n    @Output()\n    readonly searchTermChange: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Event emitted when the selected items change. Use *$event* to access the new selected array. */\n    @Output()\n    readonly selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    /** @hidden */\n    displayedValues: any[] = [];\n\n    /** @hidden */\n    isOpen = false;\n\n    /** @hidden */\n    onChange: Function = () => { };\n\n    /** @hidden */\n    onTouched: Function = () => { };\n\n    /** @hidden */\n    constructor(private elRef: ElementRef) { }\n\n    /** @hidden */\n    ngOnInit() {\n        if (this.dropdownValues) {\n            this.displayedValues = this.dropdownValues;\n        }\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {\n            if (this.searchTerm) {\n                this.displayedValues = this.filterFn(this.dropdownValues, this.searchTerm);\n            } else {\n                this.displayedValues = this.dropdownValues;\n            }\n        }\n    }\n\n    /** @hidden */\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden */\n    writeValue(selected: any[]): void {\n        if (selected) {\n            this.selected = selected;\n        }\n    }\n\n    /** @hidden */\n    handleSelect(checked: any, value: any): void {\n        const previousLength = this.selected.length;\n        if (checked) {\n            this.selected.push(value);\n        } else {\n            this.selected.splice(this.selected.indexOf(value), 1);\n        }\n\n        // Handle popover placement update\n        if ((previousLength === 0 && this.selected.length === 1) ||\n            (previousLength === 1 && this.selected.length === 0)) {\n            this.popoverRef.updatePopover();\n        }\n\n        this.onChange(this.selected);\n        this.selectedChange.emit(this.selected);\n    }\n\n    /** @hidden */\n    handleSearchTermChange(): void {\n        this.searchTermChange.emit(this.searchTerm);\n        this.displayedValues = this.filterFn(this.dropdownValues, this.searchTerm);\n        this.popoverRef.updatePopover();\n    }\n\n    private defaultFilter(contentArray: any[], searchTerm: string): any[] {\n        const searchLower = searchTerm.toLocaleLowerCase();\n        return contentArray.filter(item => {\n            if (item) {\n                return this.displayFn(item).toLocaleLowerCase().includes(searchLower);\n            }\n        });\n    }\n\n    private defaultDisplay(str: string): string {\n        return str;\n    }\n\n    /** @hidden */\n    @HostListener('document:click', ['$event'])\n    clickHandler(event) {\n        event.stopPropagation();\n        if (!this.elRef.nativeElement.contains(event.target)) {\n            this.isOpen = false;\n        }\n    }\n\n}\n","import { Component, ElementRef, EventEmitter, HostListener, Output, ViewChild, ViewEncapsulation } from '@angular/core';\n\n/**\n * A token is used to represent contextualizing information.\n * They can be useful to show applied filters, selected values for form fields or object metadata.\n */\n@Component({\n    selector: 'fd-token',\n    templateUrl: './token.component.html',\n    styleUrls: ['./token.component.scss'],\n    host: {\n        class: 'fd-token',\n        'role': 'button'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class TokenComponent {\n\n    /** @hidden */\n    @ViewChild('contentContainer')\n    contentContainer: ElementRef;\n\n    /** Emitted when the *x* icon is clicked. Specifically, any pseudo-element. */\n    @Output()\n    readonly onCloseClick: EventEmitter<void> = new EventEmitter<void>();\n\n    /** @hidden */\n    constructor(private elRef: ElementRef) {\n    }\n\n    /** @hidden */\n    @HostListener('click', ['$event'])\n    clickHandler(event): void {\n        if (this.contentContainer) {\n            if (this.elRef.nativeElement.contains(event.target) && !this.contentContainer.nativeElement.contains(event.target)) {\n                this.onCloseClick.emit();\n            }\n        }\n    }\n\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TokenComponent } from './token.component';\n\n@NgModule({\n    declarations: [TokenComponent],\n    imports: [CommonModule],\n    exports: [TokenComponent]\n})\nexport class TokenModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MultiInputComponent } from './multi-input.component';\nimport { TokenModule } from '../token/token.module';\nimport { FormsModule } from '@angular/forms';\nimport { MenuModule } from '../menu/menu.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { PipeModule } from '../utils/pipes/pipe.module';\n\n@NgModule({\n    declarations: [MultiInputComponent],\n    imports: [\n        CommonModule,\n        TokenModule,\n        FormsModule,\n        MenuModule,\n        PopoverModule,\n        PipeModule\n    ],\n    exports: [MultiInputComponent]\n})\nexport class MultiInputModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { Pagination } from './pagination.model';\n\nconst DISPLAY_NUM_PAGES = 3;\n\n/**\n * Service that is used to retrieve all the pages,\n * the number of pages,\n * and to validate the pagination object.\n */\n@Injectable()\nexport class PaginationService {\n    /** Constant representing the default number of items per page. */\n    public DEFAULT_ITEMS_PER_PAGE = 10;\n    \n    /** @hidden */\n    public MORE = -1;\n\n    /** @hidden */\n    constructor() {}\n\n    /**\n     * Returns a number array representing the pages of the pagination object.\n     * @param pagination An object of type *Pagination*.\n     */\n    public getPages(pagination: Pagination): number[] {\n        const pages = [];\n        this.validate(pagination);\n        const totalPages = this.getTotalPages(pagination);\n\n        if (totalPages <= DISPLAY_NUM_PAGES) {\n            for (let i = 1; i <= totalPages; i++) {\n                pages.push(i);\n            }\n        } else {\n            if (pagination.currentPage <= DISPLAY_NUM_PAGES) {\n                for (let i = 1; i <= DISPLAY_NUM_PAGES; i++) {\n                    pages.push(i);\n                }\n                if (totalPages !== DISPLAY_NUM_PAGES + 1) {\n                    pages.push(this.MORE);\n                }\n                pages.push(totalPages);\n            } else if (pagination.currentPage > totalPages - (DISPLAY_NUM_PAGES - 1)) {\n                pages.push(1);\n                if (totalPages !== DISPLAY_NUM_PAGES + 1) {\n                    pages.push(this.MORE);\n                }\n                for (let i = totalPages - (DISPLAY_NUM_PAGES - 1); i <= totalPages; i++) {\n                    pages.push(i);\n                }\n            } else {\n                pages.push(1);\n                if (totalPages !== DISPLAY_NUM_PAGES + 1) {\n                    pages.push(this.MORE);\n                }\n                const buffer = Math.floor(DISPLAY_NUM_PAGES / 2);\n                for (let i = pagination.currentPage - buffer; i <= pagination.currentPage + buffer; i++) {\n                    pages.push(i);\n                }\n                if (totalPages !== DISPLAY_NUM_PAGES + 1) {\n                    pages.push(this.MORE);\n                }\n                pages.push(totalPages);\n            }\n        }\n        return pages;\n    }\n\n    /**\n     * Retrieves the total number of pages.\n     * @param pagination An object of type *Pagination*.\n     */\n    public getTotalPages(pagination: Pagination): number {\n        if (pagination.itemsPerPage <= 0) {\n            pagination.itemsPerPage = this.DEFAULT_ITEMS_PER_PAGE;\n        }\n        return Math.ceil(pagination.totalItems / pagination.itemsPerPage);\n    }\n\n    /**\n     * Provides validation for the pagination object.\n     * @param pagination An object of type *Pagination*.\n     */\n    public validate(pagination: Pagination) {\n        if (!pagination.totalItems && isDevMode()) {\n            console.warn(`No pages provided in the Pagination object. This warning only appears in development mode.`);\n        }\n        if (!pagination.itemsPerPage) {\n            pagination.itemsPerPage = this.DEFAULT_ITEMS_PER_PAGE;\n        } else if (pagination.itemsPerPage < 0 && isDevMode()) {\n            console.warn(`itemsPerPage must be greater than zero. This warning only appears in development mode.`);\n        }\n        if (!pagination.currentPage) {\n            pagination.currentPage = 1;\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { PaginationService } from './pagination.service';\n\n/**\n * The component that is used to provide navigation between paged information.\n * ```html\n * <fd-pagination \n *          [totalItems]=\"50\" \n *          [itemsPerPage]=\"10\" \n *          [currentPage]=\"3\">\n * </fd-pagination>\n * ```\n */\n@Component({\n    selector: 'fd-pagination',\n    templateUrl: './pagination.component.html',\n    providers: [PaginationService],\n    host: {\n        class: 'fd-pagination'\n    },\n    styles: [`\n        .fd-pagination a {\n            cursor: pointer;\n        }\n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class PaginationComponent implements OnChanges {\n    /** Represents the total number of items. */\n    @Input()\n    totalItems: number;\n    \n    /** Represents the current page number. */\n    @Input()\n    currentPage: number;\n    \n    /** Represents the number of items per page. */\n    @Input()\n    itemsPerPage: number;\n\n    /** Whether to display the total number of items. */\n    @Input()\n    displayTotalItems: boolean = true;\n    \n    /** \n     * The text appended to the total number of items. \n     * The default text is set to 'items' \n     */\n    @Input()\n    displayText: string = 'items';\n\n    /** Label for the 'previous' page button. */\n    @Input()\n    previousLabel: string = 'Previous';\n\n    /** Label for the 'next' page button. */\n    @Input()\n    nextLabel: string = 'Next';\n\n    /** Event fired when the page is changed. */\n    @Output()\n    pageChangeStart = new EventEmitter<number>();\n\n    /** @hidden */\n    pages: number[];\n\n    /** @hidden */\n    constructor(private paginationService: PaginationService) {}\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes && changes.currentPage) {\n            this.currentPage = changes.currentPage.currentValue;\n        }\n        this.pages = this.paginationService.getPages(this.getPaginationObject());\n        const totalPages = this.paginationService.getTotalPages(this.getPaginationObject());\n        if (!this.currentPage || this.currentPage < 1) {\n            this.currentPage = 1;\n        } else if (this.currentPage > totalPages) {\n            this.currentPage = totalPages;\n        }\n    }\n\n    /**\n     * Checks if the current page is the last page.\n     */\n    isLastPage(): boolean {\n        return this.currentPage === this.paginationService.getTotalPages(this.getPaginationObject());\n    }\n\n    /**\n     * Navigates to a specific page when the user presses 'Space' or 'Enter' key.\n     * @param page The number of the page.\n     * @param $event The keyboard event.\n     */\n    onKeypressHandler(page: number, $event: KeyboardEvent) {\n        if ($event.code === 'Space' || $event.code === 'Enter') {\n            $event.preventDefault();\n            this.goToPage(page);\n        }\n    }\n\n    /**\n     * Navigates to a specific page.\n     * @param page The number of the page to navigate to.\n     * @param $event The mouse event (optional).\n     */\n    goToPage(page: number, $event?: MouseEvent) {\n        if ($event) {\n            $event.preventDefault();\n        }\n        if (page > this.paginationService.getTotalPages(this.getPaginationObject()) || page < 1) {\n            return;\n        }\n        this.pages = this.paginationService.getPages(this.getPaginationObject());\n        this.pageChangeStart.emit(page);\n    }\n\n    /**\n     * Retrieves an object that represents \n     * the total number of items, the current page, and the number of items per page.\n     */\n    getPaginationObject() {\n        const retVal = {\n            totalItems: this.totalItems,\n            currentPage: this.currentPage,\n            itemsPerPage: this.itemsPerPage\n        };\n        return retVal;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PaginationComponent } from './pagination.component';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\nimport { PaginationService } from './pagination.service';\n\n@NgModule({\n    declarations: [PaginationComponent],\n    imports: [CommonModule, ButtonModule, IconModule],\n    providers: [PaginationService],\n    exports: [PaginationComponent]\n})\nexport class PaginationModule {}\n","import { Component, ElementRef, HostBinding, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Panels are used to encapsulate part of the content, form elements, lists, collections, etc., on a page.\n */\n@Component({\n    selector: 'fd-panel',\n    templateUrl: './panel.component.html',\n    host: {\n        '[class.fd-has-display-block]': 'true'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelComponent extends AbstractFdNgxClass {\n\n    /** @Input Column span for the panel in the grid system */\n    @Input()\n    columnSpan: number;\n\n    /** @Input Background image of the panel. */\n    @Input()\n    backgroundImage: string;\n\n    /** @hidden */\n    @HostBinding('class.fd-panel')\n    fdPanelClass: boolean = true;\n\n    /** @hidden */\n    _setProperties() {\n        if (this.columnSpan) {\n            this._addClassToElement('fd-has-grid-column-span-' + this.columnSpan);\n        }\n        if (this.backgroundImage) {\n            this._addStyleToElement('background-image', 'url(\"' + this.backgroundImage + '\")');\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Header of the panel. Contains a head and actions.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-header>\n *         <fd-panel-head>\n *             <fd-panel-title>Title!</fd-panel-title>\n *         </fd-panel-head>\n *     </fd-panel-header>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-header',\n    templateUrl: './panel-header.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelHeaderComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__header')\n    fdPanelHeaderClass = true;\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Container for title and description.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-header>\n *         <fd-panel-head>\n *             <fd-panel-title>Title!</fd-panel-title>\n *         </fd-panel-head>\n *     </fd-panel-header>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-head',\n    templateUrl: './panel-head.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelHeadComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__head')\n    fdPanelHeadClass = true;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Applies the panel title style to a header element. It can be used with any header level.\n *\n * ```html\n * <h1 fd-panel-title>Panel Title</h1>\n * <h3 fd-panel-title>Panel Title</h3>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-panel-title]',\n})\nexport class PanelTitleDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__title')\n    fdPanelTitleClass: boolean = true;\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Description of the panel title.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-header>\n *         <fd-panel-head>\n *             <fd-panel-description>This is a description for a panel title!</fd-panel-description>\n *         </fd-panel-head>\n *     </fd-panel-header>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-description',\n    templateUrl: './panel-description.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelDescriptionComponent {}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Panel level actions such as add, remove, delete, sort, etc.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-header>\n *         <fd-panel-actions>\n *             <button fd-button (click)=\"action()\">Action</button>\n *         </fd-panel-actions>\n *     </fd-panel-header>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-actions',\n    templateUrl: './panel-actions.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelActionsComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__actions')\n    fdPanelActionsClass: boolean = true;\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Panel level filters that is specific to the data being displayed within the panel.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-filters>\n *         Some text can go here!\n *     </fd-panel-filters>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-filters',\n    templateUrl: './panel-filters.component.html',\n    host: {\n        '[class.fd-has-display-block]': 'true'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelFiltersComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__filters')\n    fdPanelFiltersClass: boolean = true;\n}\n","import { Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * Main content of the panel can that hold lists, table, tree, text, form or any other information.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-body>\n *         Some text can go here!\n *     </fd-panel-body>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-body',\n    templateUrl: './panel-body.component.html',\n    host: {\n        '[class.fd-has-display-block]': 'true'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelBodyComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__body')\n    fdPanelBodyClass: boolean = true;\n\n    /** Whether the edges of the panel should have bleeding padding. */\n    @Input()\n    @HostBinding('class.fd-panel__body--bleed')\n    bleed: boolean = false;\n\n}\n","import { Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n/**\n * Panel footer can be utilized for pagination, secondary actions, add more data, etc.\n *\n * ```html\n * <fd-panel>\n *     <fd-panel-footer>\n *         Some text can go here!\n *     </fd-panel-footer>\n * </fd-panel>\n * ```\n */\n@Component({\n    selector: 'fd-panel-footer',\n    templateUrl: './panel-footer.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelFooterComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-panel__footer')\n    fdPanelFooterClass: boolean = true;\n}\n","import { Component, ElementRef, HostBinding, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Use a panel grid to arrange panels evenly in a grid layout.\n */\n@Component({\n    selector: 'fd-panel-grid',\n    templateUrl: './panel-grid.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelGridComponent extends AbstractFdNgxClass {\n\n    /** Number of columns for the grid. */\n    @Input() col: number;\n\n    /** Whether the grid should have a gap. */\n    @Input() nogap: boolean = false;\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-panel-grid');\n\n        if (this.nogap) {\n            this._addClassToElement('fd-panel-grid--nogap');\n        }\n\n        if (this.col) {\n            this._addClassToElement('fd-panel-grid--' + this.col + 'col');\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PanelComponent } from './panel.component';\nimport { PanelHeaderComponent } from './panel-header/panel-header.component';\nimport { PanelHeadComponent } from './panel-head/panel-head.component';\nimport { PanelTitleDirective } from './panel-title/panel-title.directive';\nimport { PanelDescriptionComponent } from './panel-description/panel-description.component';\nimport { PanelActionsComponent } from './panel-actions/panel-actions.component';\nimport { PanelFiltersComponent } from './panel-filters/panel-filters.component';\nimport { PanelBodyComponent } from './panel-body/panel-body.component';\nimport { PanelFooterComponent } from './panel-footer/panel-footer.component';\nimport { PanelGridComponent } from './panel-grid/panel-grid.component';\n@NgModule({\n    declarations: [\n        PanelComponent,\n        PanelHeaderComponent,\n        PanelHeadComponent,\n        PanelTitleDirective,\n        PanelDescriptionComponent,\n        PanelActionsComponent,\n        PanelFiltersComponent,\n        PanelBodyComponent,\n        PanelFooterComponent,\n        PanelGridComponent\n    ],\n    imports: [CommonModule],\n    exports: [\n        PanelComponent,\n        PanelHeaderComponent,\n        PanelHeadComponent,\n        PanelTitleDirective,\n        PanelDescriptionComponent,\n        PanelActionsComponent,\n        PanelFiltersComponent,\n        PanelBodyComponent,\n        PanelFooterComponent,\n        PanelGridComponent\n    ]\n})\nexport class PanelModule {}\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n/**\n * A directive designed to help navigation elements determine the element currently in view of the user. \n */\n@Directive({\n    selector: '[fdScrollSpy]'\n})\nexport class ScrollSpyDirective {\n    /**\n     * An array of tags to track.\n     */\n    @Input()\n    public trackedTags: string[] = [];\n\n    /**\n     * Whether events are still fired if there is no tag present on the user's screen.\n     */\n    @Input()\n    public fireEmpty: boolean = false;\n\n    /** \n     * A number that represent at what location in the container the event is fired. \n     * 0.5 would fire the events in the middle of the container, \n     * 0 for the top and 1 for the bottom.\n     */\n    @Input()\n    public targetPercent: number = 0;\n\n    /** \n     * Event fired on the scroll element when a new item becomes activated by the scrollspy . \n     * The returned value is the HTMLElement itself.\n     */\n    @Output()\n    public readonly spyChange: EventEmitter<HTMLElement> = new EventEmitter<HTMLElement>();\n\n    /** @hidden */\n    private currentActive: HTMLElement;\n\n    /** @hidden */\n    constructor(private elRef: ElementRef) {}\n\n    /** @hidden */\n    @HostListener('scroll', ['$event'])\n    onScroll(event: any) {\n        let spiedTag: HTMLElement;\n        const children = this.elRef.nativeElement.children;\n        const targetScrollTop = event.target.scrollTop;\n        const targetOffsetTop = event.target.offsetTop;\n\n        for (let i = 0; i < children.length; i++) {\n            const element: HTMLElement = children[i];\n            if (this.trackedTags.some(tag => tag.toLocaleUpperCase() === element.tagName.toLocaleUpperCase())) {\n                if ((element.offsetTop - targetOffsetTop) <= targetScrollTop + event.target.offsetHeight * this.targetPercent) {\n                    spiedTag = element;\n                }\n            }\n        }\n\n        if ((spiedTag || this.fireEmpty) && spiedTag !== this.currentActive) {\n            this.currentActive = spiedTag;\n            this.spyChange.emit(this.currentActive);\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { ScrollSpyDirective } from './scroll-spy.directive';\n\n@NgModule({\n    declarations: [ScrollSpyDirective],\n    exports: [ScrollSpyDirective]\n})\nexport class ScrollSpyModule {}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input, isDevMode,\n    OnChanges,\n    OnInit,\n    Output,\n    QueryList,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MenuItemDirective } from '../menu/menu-item.directive';\n\n/**\n * Allows users to filter through results and select.\n * Can also be customized to execute a search function.\n *\n * Supports Angular Forms.\n */\n@Component({\n    selector: 'fd-search-input',\n    templateUrl: './search-input.component.html',\n    styleUrls: ['./search-input.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SearchInputComponent),\n            multi: true\n        }\n    ],\n    host: {\n        class: 'fd-search-input-custom'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class SearchInputComponent implements ControlValueAccessor, OnInit, OnChanges {\n\n    /** Values to be filtered in the search input. */\n    @Input()\n    dropdownValues: any[] = [];\n\n    /** Filter function. Accepts an array of objects and a search term as arguments\n     * and returns a string. See search input examples for details. */\n    @Input()\n    filterFn: Function = this.defaultFilter;\n\n    /** Whether the search input is disabled. **/\n    @Input()\n    disabled: boolean;\n\n    /** Placeholder of the search input. **/\n    @Input()\n    placeholder: string;\n\n    /** Whether the search input is in a shellbar **/\n    @Input()\n    inShellbar: boolean = false;\n\n    /** Icon to display in the right-side button. */\n    @Input()\n    glyph: string = 'search';\n\n    /** Max height of the popover. Any overflowing elements will be accessible through scrolling. */\n    @Input()\n    maxHeight: string = '200px';\n\n    /** Search function to execute when the Enter key is pressed on the main input. */\n    @Input()\n    searchFunction: Function;\n\n    /** Whether the search input should be displayed in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Whether the matching string should be highlighted during filtration. */\n    @Input()\n    highlighting: boolean = true;\n\n    /** Whether the popover should close when a user selects a result. */\n    @Input()\n    closeOnSelect: boolean = true;\n\n    /** Whether the input field should be populated with the result picked by the user. */\n    @Input()\n    fillOnSelect: boolean = true;\n\n    /** Display function. Accepts an object of the same type as the\n     * items passed to dropdownValues as argument, and outputs a string.\n     * An arrow function can be used to access the *this* keyword in the calling component.\n     * See search input examples for details. */\n    @Input()\n    displayFn: Function = this.defaultDisplay;\n\n    /** Event emitted when an item is clicked. Use *$event* to retrieve it. */\n    @Output()\n    itemClicked: EventEmitter<{item: any, index: number}> = new EventEmitter<{item: any, index: number}>();\n\n    /** @hidden */\n    @ViewChildren(MenuItemDirective)\n    menuItems: QueryList<MenuItemDirective>;\n\n    /** @hidden */\n    @ViewChild('searchInputElement')\n    searchInputElement: ElementRef;\n\n    /** @hidden */\n    displayedValues: any[] = [];\n\n    /** @hidden */\n    isOpen: boolean = false;\n\n    /** @hidden */\n    inputTextValue: string;\n\n    /** @hidden */\n    @HostBinding('class.fd-search-input')\n    searchInputClass = true;\n\n    /** @hidden */\n    @HostBinding('class.fd-search-input--closed')\n    shellBarClass = this.inShellbar;\n\n    /** @hidden */\n    onInputKeydownHandler(event) {\n        if (event.code === 'Enter' && this.searchFunction) {\n            this.searchFunction();\n        } else if (event.code === 'ArrowDown') {\n            event.preventDefault();\n            if (this.menuItems && this.menuItems.first) {\n                this.menuItems.first.itemEl.nativeElement.children[0].focus();\n            }\n        }\n    }\n\n    /** @hidden */\n    onInputKeyupHandler() {\n        if (this.inputText && this.inputText.length) {\n            this.isOpen = true;\n        }\n    }\n\n    /** @hidden */\n    onMenuKeydownHandler(event, term?) {\n        if (event.code === 'Enter' && term) {\n            this.handleClickActions(term);\n            this.itemClicked.emit({item: term, index: this.dropdownValues.indexOf(term)});\n        } else if (event.code === 'ArrowDown') {\n            event.preventDefault();\n            let foundItem = false;\n            const menuItemsArray = this.menuItems.toArray();\n            menuItemsArray.forEach((item, index) => {\n                if (document.activeElement === item.itemEl.nativeElement.children[0] && !foundItem) {\n                    if (menuItemsArray[index + 1]) {\n                        menuItemsArray[index + 1].itemEl.nativeElement.children[0].focus();\n                    }\n                    foundItem = true;\n                }\n            })\n        } else if (event.code === 'ArrowUp') {\n            event.preventDefault();\n            let foundItem = false;\n            const menuItemsArray = this.menuItems.toArray();\n            menuItemsArray.forEach((item, index) => {\n                if (!foundItem) {\n                    if (document.activeElement === item.itemEl.nativeElement.children[0] && index === 0) {\n                        this.searchInputElement.nativeElement.focus();\n                        foundItem = true;\n                    } else if (document.activeElement === item.itemEl.nativeElement.children[0]) {\n                        if (menuItemsArray[index - 1]) {\n                            menuItemsArray[index - 1].itemEl.nativeElement.children[0].focus();\n                        }\n                        foundItem = true;\n                    }\n                }\n            });\n        }\n    }\n\n    /** @hidden */\n    onMenuClickHandler(event, term) {\n        if (term) {\n            this.handleClickActions(term);\n            this.itemClicked.emit({item: term, index: this.dropdownValues.indexOf(term)});\n        }\n    }\n\n    /** @hidden */\n    shellbarSearchInputClicked(event) {\n        event.stopPropagation();\n    }\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** Get the input text of the input. */\n    get inputText() {\n        return this.inputTextValue;\n    }\n\n    /** Set the input text of the input. */\n    set inputText(value) {\n        this.inputTextValue = value;\n        this.onChange(value);\n        this.onTouched();\n    }\n\n    /** @hidden */\n    writeValue(value: any) {\n        this.inputTextValue = value;\n    }\n\n    /** @hidden */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    private handleClickActions(term): void {\n        if (this.closeOnSelect) {\n            this.isOpen = false;\n        }\n        if (this.fillOnSelect) {\n            this.inputText = this.displayFn(term);\n            this.handleSearchTermChange();\n        }\n    }\n\n    /** @hidden */\n    ngOnInit() {\n        if (this.dropdownValues) {\n            this.displayedValues = this.dropdownValues;\n        }\n\n        if (isDevMode()) {\n            console.warn('Search Input is deprecated. Please use Combobox instead. Visit the fundamental-ngx wiki for more information.')\n        }\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {\n            if (this.inputText) {\n                this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n            } else {\n                this.displayedValues =  this.dropdownValues;\n            }\n        }\n    }\n\n    /** @hidden */\n    handleSearchTermChange(): void {\n        this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);\n    }\n\n    private defaultDisplay(str: any): string {\n        return str;\n    }\n\n    private defaultFilter(contentArray: any[], searchTerm: string): any[] {\n        const searchLower = searchTerm.toLocaleLowerCase();\n        return contentArray.filter(item => {\n            if (item) {\n                return this.displayFn(item).toLocaleLowerCase().includes(searchLower);\n            }\n        });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SearchInputComponent } from './search-input.component';\nimport { PopoverModule } from '../popover/popover.module';\nimport { MenuModule } from '../menu/menu.module';\nimport { FormsModule } from '@angular/forms';\nimport { PipeModule } from '../utils/pipes/pipe.module';\n\n@NgModule({\n    declarations: [SearchInputComponent],\n    imports: [\n        CommonModule,\n        PopoverModule,\n        MenuModule,\n        FormsModule,\n        PipeModule\n    ],\n    exports: [SearchInputComponent]\n})\nexport class SearchInputModule {}\n","import { Component } from '@angular/core';\n\n/**\n * The shellbar offers consistent, responsive navigation across all products and applications.\n * Includes support for branding, product navigation, search, notifications, and user settings.\n * Shellbar is a composite component comprised of mandatory and optional elements.\n */\n@Component({\n    selector: 'fd-shellbar',\n    templateUrl: './shellbar.component.html'\n})\nexport class ShellbarComponent {\n}\n","import { Component, HostListener, Input, OnInit, QueryList, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { PopoverComponent } from '../../popover/popover.component';\n\n/**\n * The component that represents a product menu.\n * Product menu is used for navigating to applications within the product.\n * ```html\n * <fd-product-menu [control]=\"productMenuControl\"\n *                  [items]=\"productMenuItems\">\n * </fd-product-menu>\n * ```\n */\n@Component({\n    selector: 'fd-product-menu',\n    templateUrl: './product-menu.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ProductMenuComponent implements OnInit {\n\n    /** @hidden */\n    @ViewChild(PopoverComponent)\n    popoverComponent: PopoverComponent;\n\n    /** \n     * The control element to toggle the product menu,\n     * represented by the name of the current application. \n     */\n    @Input()\n    control: string;\n\n    /** The items in the product menu. */\n    @Input()\n    items: any[];\n\n    /** @hidden */\n    productMenuCollapsed: boolean = false;\n\n    /** When set to true, popover list will be closed after selecting the option */\n    @Input()\n    closePopoverOnSelect: boolean = false;\n\n    /** @hidden */\n    @HostListener('window:resize', [])\n    onResize() {\n        const mq = window.matchMedia('(max-width: 601px)');\n        mq.matches ? this.productMenuCollapsed = true : this.productMenuCollapsed = false;\n    }\n\n    /** @hidden */\n    ngOnInit() {\n        this.onResize();\n    }\n\n    /**\n     * @hidden\n     */\n    itemClicked(item: any, event: any): void {\n        if (this.closePopoverOnSelect) {\n            this.popoverComponent.close();\n        }\n        item.callback(event);\n    }\n\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a shellbar subtitle.\n * The subtitle is optional and should be used rarely.\n * ```html\n *   <fd-shellbar-subtitle>\n *      Corporate Portal\n *   </fd-shellbar-subtitle>\n * ```\n */\n@Component({\n    selector: 'fd-shellbar-subtitle',\n    templateUrl: './shellbar-subtitle.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarSubtitleComponent {}\n","import { Component, ContentChild, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a shellbar action.\n * ```html\n *  <fd-shellbar-action *ngFor=\"let action of actions\"\n *                      [glyph]=\"action.glyph\"\n *                      [callback]=\"action.callback\"\n *                      [label]=\"action.label\"\n *                      [notificationCount]=\"action.notificationCount\"\n *                      [notificationLabel]=\"action.notificationLabel\">\n *  </fd-shellbar-action>\n * ```\n */\n@Component({\n    selector: 'fd-shellbar-action',\n    templateUrl: './shellbar-action.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarActionComponent {\n\n    /** The glyph (icon) name */\n    @Input()\n    glyph: string;\n\n    /** Callback that hanldles the response to clicks on any of the actions. */\n    @Input()\n    callback: Function;\n\n    /** The action label. */\n    @Input()\n    label: string;\n\n    /** The notification label. */\n    @Input()\n    notificationLabel: string;\n\n    /** Represents the number of notifications. */\n    @Input()\n    notificationCount: number;\n\n}\n","import {\n    Component,\n    ContentChildren,\n    HostListener,\n    Input,\n    OnInit,\n    AfterContentChecked,\n    QueryList,\n    ViewEncapsulation,\n    ContentChild, ViewChildren\n} from '@angular/core';\nimport { ShellbarActionComponent } from '../shellbar-action/shellbar-action.component';\nimport { SearchInputComponent } from '../../search-input/search-input.component';\nimport { PopoverComponent } from '../../popover/popover.component';\n\n/**\n * The component that represents shellbar actions.\n * It is a container wrapper for all product actions and links (required element).\n * ```html\n * <fd-shellbar-actions [user]=\"user\"\n *                      [userMenu]=\"userMenu\"\n *                      [productSwitcher]=\"productSwitcher\">\n *        <button fd-button [fdType]=\"'standard'\">Custom Button</button>\n *\n *        <fd-shellbar-action *ngFor=\"let action of actions\"\n *                            [glyph]=\"action.glyph\"\n *                            [callback]=\"action.callback\"\n *                            [label]=\"action.label\"\n *                            [notificationCount]=\"action.notificationCount\"\n *                            [notificationLabel]=\"action.notificationLabel\">\n *        </fd-shellbar-action>\n * </fd-shellbar-actions>\n * ```\n */\n\n@Component({\n    selector: 'fd-shellbar-actions',\n    templateUrl: './shellbar-actions.component.html',\n    styleUrls: ['./shellbar-actions.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarActionsComponent implements OnInit, AfterContentChecked {\n\n    /** @hidden */\n    actionsCollapsed: boolean = false;\n\n    /** @hidden */\n    showCollapsedProducts: boolean = false;\n\n    /** The product switcher data. */\n    @Input()\n    productSwitcher: any[];\n\n    /** The user data. */\n    @Input()\n    user: any;\n\n    /** The user menu data. */\n    @Input()\n    userMenu: any[];\n\n    /** When set to true, popover list will be closed after selecting the option */\n    @Input()\n    closePopoverOnSelect: boolean = false;\n\n    /** Label for the collapsed item menu. */\n    @Input()\n    collapsedItemMenuLabel: string = 'Collapsed Item Menu';\n\n    /** @hidden */\n    @ContentChildren(ShellbarActionComponent)\n    shellbarActions: QueryList<ShellbarActionComponent>;\n\n    /** @hidden */\n    @ViewChildren(PopoverComponent)\n    popoverComponents: QueryList<PopoverComponent>;\n\n    /** @hidden */\n    @ContentChild(SearchInputComponent)\n    searchInputComponent: SearchInputComponent;\n\n    /** @hidden */\n    totalNotifications: number;\n\n    /** @hidden */\n    @HostListener('window:resize', [])\n    onResize() {\n        this.actionsCollapsed = window.innerWidth < 1024;\n    }\n\n    /**\n     * @hidden\n     */\n    itemClicked(item: any, event: any): void {\n        if (this.closePopoverOnSelect) {\n            this.popoverComponents.forEach(popover => popover.close());\n        }\n        item.callback(event);\n    }\n\n    /** @hidden */\n    ngOnInit() {\n        this.onResize();\n    }\n\n    /** @hidden */\n    ngAfterContentChecked() {\n        this.totalNotifications = 0;\n        this.shellbarActions.forEach((action) => {\n            if (action.notificationCount && typeof action.notificationCount === 'number') {\n                this.totalNotifications = this.totalNotifications + action.notificationCount;\n            }\n        });\n    }\n\n    /** @hidden */\n    toggleCollapsedProducts(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.showCollapsedProducts = !this.showCollapsedProducts;\n    }\n\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a shellbar logo.\n * The logo is a required element and is used for company branding. \n * ```html\n *   <fd-shellbar-logo>\n *      <a href=\"#\" class=\"fd-shellbar__logo fd-shellbar__logo--image-replaced\" aria-label=\"SAP\"></a>\n *   </fd-shellbar-logo>\n * ```\n */\n@Component({\n    selector: 'fd-shellbar-logo',\n    templateUrl: './shellbar-logo.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarLogoComponent {}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a shellbar title.\n * The title is a required element and displays the current application name.\n * ```html\n *   <fd-shellbar-title>\n *      Corporate Portal\n *   </fd-shellbar-title>\n * ```\n */\n@Component({\n    selector: 'fd-shellbar-title',\n    templateUrl: './shellbar-title.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShellbarTitleComponent { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ShellbarComponent } from './shellbar.component';\nimport { ProductMenuComponent } from './product-menu/product-menu.component';\nimport { ShellbarSubtitleComponent } from './shellbar-subtitle/shellbar-subtitle.component';\nimport { ShellbarActionsComponent } from './shellbar-actions/shellbar-actions.component';\nimport { ShellbarActionComponent } from './shellbar-action/shellbar-action.component';\nimport { ShellbarLogoComponent } from './shellbar-logo/shellbar-logo.component';\nimport { ShellbarTitleComponent } from './shellbar-title/shellbar-title.component';\n\nimport { PopoverModule } from '../popover/popover.module';\nimport { MenuModule } from '../menu/menu.module';\n\n@NgModule({\n    declarations: [\n        ShellbarComponent,\n        ProductMenuComponent,\n        ShellbarSubtitleComponent,\n        ShellbarActionsComponent,\n        ShellbarActionComponent,\n        ShellbarLogoComponent,\n        ShellbarTitleComponent\n    ],\n    imports: [CommonModule, PopoverModule, MenuModule],\n    exports: [\n        ShellbarComponent,\n        ProductMenuComponent,\n        ShellbarSubtitleComponent,\n        ShellbarActionsComponent,\n        ShellbarActionComponent,\n        ShellbarLogoComponent,\n        ShellbarTitleComponent\n    ]\n})\nexport class ShellbarModule {}\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n/**\n * The side-navigation is a wrapping component representing\n * a left navigation that can always display or expand/collapse using the menu icon within the global navigation.\n */\n@Component({\n    selector: 'fd-side-nav',\n    templateUrl: './side-navigation.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class SideNavigationComponent {\n\n    /** Whether the side navigation is collapsed. */\n    @Input() collapsed: boolean = false;\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a navigation group.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *             <fd-side-nav-item>\n *                <a fd-side-nav-link [attr.href]=\"'#'\">Link Item</a>\n *             </fd-side-nav-item>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Component({\n    selector: 'fd-side-nav-group',\n    templateUrl: './side-navigation-group.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class SideNavigationGroupComponent { }\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Applies the side navigation title style to a header element. It can be used with any header level.\n *\n * ```html\n * <h1 fd-side-nav-title>Side Nav Title</h1>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-title]'\n})\nexport class SideNavigationTitleDirective {\n    /** @hidden */\n    @HostBinding('class.fd-side-nav__title')\n    fdSideNavTitleClass: boolean = true;\n}\n","import { Component, Directive, ViewEncapsulation } from '@angular/core';\n\n/**\n * The directive that represents a list group.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *             <fd-side-nav-item>\n *                <a fd-side-nav-link [attr.href]=\"'#'\">Link Item</a>\n *             </fd-side-nav-item>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-list]',\n    host: {\n        class: 'fd-side-nav__list'\n    }\n})\nexport class SideNavigationListDirective {}\n","import {\n    Input,\n    ElementRef,\n    Output,\n    EventEmitter,\n    Directive, HostListener, Inject, OnInit, HostBinding\n} from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * The component that represents a navigation link.\n * ```html\n *    <a fd-side-nav-link>\n *        <a [attr.href]=\"'#'\">Link Item</a>\n *    </a>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-link]',\n})\nexport class SideNavigationLinkDirective extends AbstractFdNgxClass {\n\n    /** Whether the link has a sublist. */\n    @Input()\n    hasSublist: boolean = false;\n\n    /** Whether the sub list is opened or closed */\n    @Output()\n    onSubListOpenChange = new EventEmitter<boolean>();\n\n    @Input()\n    sublistIsOpen: boolean = false;\n\n    @HostBinding('attr.role') role = this.hasSublist ? 'button' : '';\n    @HostBinding('attr.aria-haspopup') hasPopup = this.hasSublist;\n    @HostBinding('tabindex') tabindex = this.hasSublist ? '0' : '';\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-side-nav__link');\n        if (this.hasSublist) {\n            this._addClassToElement('has-child');\n            this._addStyleToElement('cursor', 'pointer');\n            this.elementRef.nativeElement.setAttribute('aria-expanded', this.sublistIsOpen);\n        }\n        if (this.sublistIsOpen && this.hasSublist) {\n            this._addClassToElement('is-selected');\n        }\n    }\n\n    /** @hidden */\n    constructor(@Inject(ElementRef) private elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    /** @hidden */\n    @HostListener('keypress', ['$event.target'])\n    onKeypressHandler(event) {\n        if (this.hasSublist && (event.code === 'Enter' || event.code === 'Space')) {\n            event.preventDefault();\n            this.changeSubListIsOpen();\n        }\n    }\n\n    @HostListener('click', ['$event.target'])\n    changeSubListIsOpen() {\n        if (this.hasSublist) {\n            this.sublistIsOpen = !this.sublistIsOpen;\n            this.onSubListOpenChange.emit(this.sublistIsOpen);\n            this.ngOnChanges();\n        }\n    }\n}\n","import { Component, Directive, ElementRef, HostBinding, Inject, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n/**\n * The component that represents a navigation group.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *             <fd-side-nav-item>\n *                <a fd-side-nav-link [attr.href]=\"'#'\">Link Item</a>\n *             </fd-side-nav-item>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-sublist]',\n    host: {\n        class: 'fd-side-nav__sublist'\n    }\n})\nexport class SideNavigationSublistDirective {\n    public sublistIsOpen: boolean = false;\n\n    public subListIsOpenChange(sublistIsOpen: boolean) {\n        this.sublistIsOpen = sublistIsOpen;\n        this.elementRef.nativeElement.setAttribute('aria-hidden', !this.sublistIsOpen);\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {}\n}\n","import { AfterContentInit, AfterViewInit, Component, ContentChild, Input, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { SideNavigationLinkDirective } from '../side-navigation-link/side-navigation-link.directive';\nimport { Subscription } from 'rxjs';\nimport { SideNavigationSublistDirective } from '../side-navigation-sublist/side-navigation-sublist.directive';\n\n/**\n * The component that represents a navigation group.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *             <fd-side-nav-item>\n *                <a fd-side-nav-link [attr.href]=\"'#'\">Link Item</a>\n *             </fd-side-nav-item>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Component({\n    selector: 'fd-side-nav-item',\n    templateUrl: './side-navigation-item.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class SideNavigationItemComponent implements AfterContentInit, OnDestroy {\n    @ContentChild(SideNavigationLinkDirective) linkElement: SideNavigationLinkDirective;\n    @ContentChild(SideNavigationSublistDirective) subListElement: SideNavigationSublistDirective;\n\n    /** @Hidden */\n    subListOpenChanged$: Subscription;\n\n    public ngAfterContentInit(): void {\n        if (this.linkElement && this.subListElement) {\n            /** After view content check if there is flag with opened true */\n            this.subListElement.subListIsOpenChange(this.linkElement.sublistIsOpen);\n            this.subListOpenChanged$ = this.linkElement.onSubListOpenChange.subscribe(isOpen => {\n                this.subListElement.subListIsOpenChange(isOpen);\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.subListOpenChanged$) {\n            this.subListOpenChanged$.unsubscribe();\n        }\n    }\n\n}\n","import { Component, Directive, ViewEncapsulation } from '@angular/core';\n\n/**\n * The component that represents a sub item.\n * ```html\n * <fd-side-nav>\n *    <fd-side-nav-group>\n *        <h1 fd-side-nav-title>Group Name</h1>\n *          <div fd-side-nav-list>\n *            <a fd-side-nav-link>Link Item</a>\n *                <div fd-side-nav-sublist>\n *                    <div fd-side-nav-subitem>\n *                        <a fd-side-nav-sublink [attr.href]=\"'#'\">Link Item</a>\n *                    </div>\n *                    <div fd-side-nav-subitem>\n *                        <a fd-side-nav-sublink [routerLink]=\"'#'\">Link Item</a>\n *                    </div>\n *              </div>\n *          </div>>\n *    </fd-side-nav-group>\n * </fd-side-nav>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-subitem]',\n    host: {\n        class: 'fd-side-nav__subitem'\n    }\n})\nexport class SideNavigationSubitemDirective {}\n","import { Directive } from '@angular/core';\n\n/**\n * The directive that represents a navigation sublink.\n * ```html\n *     <a fd-side-nav-sublink [attr.href]=\"'#'\">Sub Link Item</a>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-side-nav-sublink]',\n    host: {\n        class: 'fd-side-nav__sublink'\n    }\n})\nexport class SideNavigationSublinkDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SideNavigationComponent } from './side-navigation.component';\nimport { SideNavigationGroupComponent } from './side-navigation-group/side-navigation-group.component';\nimport { SideNavigationTitleDirective } from './side-navigation-title/side-navigation-title.directive';\nimport { SideNavigationListDirective } from './side-navigation-list/side-navigation-list.directive';\nimport { SideNavigationItemComponent } from './side-navigation-item/side-navigation-item.component';\nimport { SideNavigationLinkDirective } from './side-navigation-link/side-navigation-link.directive';\nimport { SideNavigationSublistDirective } from './side-navigation-sublist/side-navigation-sublist.directive';\nimport { SideNavigationSubitemDirective } from './side-navigation-subitem/side-navigation-subitem.directive';\nimport { SideNavigationSublinkDirective } from './side-navigation-sublink/side-navigation-sublink.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        SideNavigationComponent,\n        SideNavigationGroupComponent,\n        SideNavigationTitleDirective,\n        SideNavigationListDirective,\n        SideNavigationItemComponent,\n        SideNavigationLinkDirective,\n        SideNavigationSublistDirective,\n        SideNavigationSubitemDirective,\n        SideNavigationSublinkDirective,\n    ],\n    declarations: [\n        SideNavigationComponent,\n        SideNavigationGroupComponent,\n        SideNavigationTitleDirective,\n        SideNavigationListDirective,\n        SideNavigationItemComponent,\n        SideNavigationLinkDirective,\n        SideNavigationSublistDirective,\n        SideNavigationSubitemDirective,\n        SideNavigationSublinkDirective,\n    ]\n})\nexport class SideNavigationModule {}\n","import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\n\n/**\n * Used to represent an option of the select component.\n */\n@Component({\n    selector: 'fd-option',\n    templateUrl: './option.component.html',\n    styleUrls: ['./option.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[class.fd-option-default-custom]': 'true',\n        '[attr.aria-disabled]': 'disabled',\n        '[tabindex]': 'disabled ? -1 : 0',\n        'role': 'option',\n    }\n})\nexport class OptionComponent implements OnInit {\n\n    /** @hidden */\n    @HostBinding('class.fd-menu__item')\n    fdMenuItemClass: boolean = true;\n\n    /** @hidden */\n    @HostBinding('class.is-selected')\n    selected: boolean = false;\n\n    /** Value of the option. Similar to how a native select operates. */\n    @Input()\n    value: any;\n\n    /** Whether to disable this option specifically. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Override for the view value of the option. If none is provided, the text content is used. */\n    @Input()\n    viewValue: string;\n\n    /** Emitted when the selected state changes. */\n    @Output()\n    readonly selectedChange: EventEmitter<OptionComponent>\n        = new EventEmitter<OptionComponent>();\n\n    /** @hidden */\n    constructor(private elRef: ElementRef) {}\n\n\n    /** @hidden */\n    ngOnInit(): void {\n        if (this.selected && !this.disabled) {\n            this.focus();\n        }\n    }\n\n    /** Returns the view value text of the option, or the viewValue input if it exists. */\n    get viewValueText(): string {\n        return this.viewValue ? this.viewValue :\n            ((this.elRef.nativeElement as HTMLElement).textContent || '').trim();\n    }\n\n    /** Returns the view value text of the option, or the viewValue input if it exists. */\n    setSelected(value: boolean, fireEvent: boolean = true): void {\n        this.selected = value;\n\n        if (fireEvent) {\n            this.selectedChange.emit(this);\n        }\n    }\n\n    /** Focuses the element. */\n    focus(): void {\n        (this.elRef.nativeElement as HTMLElement).focus();\n    }\n\n    /** Returns HTMLElement representation of the component. */\n    getHtmlElement(): HTMLElement {\n        return this.elRef.nativeElement as HTMLElement;\n    }\n\n    /** @hidden */\n    @HostListener('keydown.enter')\n    @HostListener('click')\n    selectionHandler(): void {\n        if (!this.selected && !this.disabled) {\n            this.selected = true;\n            this.selectedChange.emit(this);\n        }\n    }\n\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    EventEmitter, forwardRef, HostBinding, HostListener,\n    Input, OnChanges, OnDestroy,\n    Output,\n    QueryList, SimpleChanges, TemplateRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { OptionComponent } from './option/option.component';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport { startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport { PopperOptions } from 'popper.js';\nimport { PopoverFillMode } from '../popover/popover-directive/popover.directive';\n\n/**\n * Select component intended to mimic the behaviour of the native select element.\n */\n@Component({\n    selector: 'fd-select',\n    templateUrl: './select.component.html',\n    styleUrls: ['./select.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SelectComponent),\n            multi: true\n        }\n    ],\n    host: {\n        '[class.fd-select-custom]': 'true',\n        'role': 'listbox',\n    }\n})\nexport class SelectComponent implements OnChanges, AfterContentInit, OnDestroy, ControlValueAccessor {\n\n    /** @hidden */\n    @HostBinding('class.fd-dropdown')\n    fdDropdownClass: boolean = true;\n\n    /** @hidden */\n    @ContentChildren(OptionComponent, { descendants: true })\n    options: QueryList<OptionComponent>;\n\n    /** Whether the select component is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Placeholder for the select. Appears in the triggerbox if no option is selected. */\n    @Input()\n    placeholder: string;\n\n    /** Open state of the select. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** Current value of the selected option. */\n    @Input()\n    value: any;\n\n    /** Whether the select is in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /** Popper.js options of the popover. */\n    @Input()\n    popperOptions: PopperOptions = {\n        placement: 'bottom-start',\n        modifiers: {\n            preventOverflow: {\n                enabled: true,\n                escapeWithReference: true,\n                boundariesElement: 'scrollParent'\n            }\n        }\n    };\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode = 'at-least';\n\n    /** Template with which to display the trigger box. */\n    @Input()\n    triggerTemplate: TemplateRef<any>;\n\n    /** The element to which the popover should be appended. */\n    @Input()\n    appendTo: HTMLElement | 'body';\n\n    /** Event emitted when the popover open state changes. */\n    @Output()\n    readonly isOpenChange: EventEmitter<boolean>\n        = new EventEmitter<boolean>();\n\n    /** Event emitted when the selected value of the select changes. */\n    @Output()\n    readonly valueChange: EventEmitter<any>\n        = new EventEmitter<any>();\n\n    /** Current selected option component reference. */\n    private selected: OptionComponent;\n\n    /** Subject triggered when the component is destroyed. */\n    private readonly destroy$: Subject<void> = new Subject<void>();\n\n    /** Observable triggered when an option has its selectedChange event fire. */\n    private readonly optionsStatusChanges: Observable<OptionComponent> = defer(() => {\n        const options = this.options;\n        if (options) {\n            return options.changes.pipe(\n                startWith(options),\n                switchMap(() => merge(...options.map(option => option.selectedChange)))\n            );\n        }\n    }) as Observable<OptionComponent>;\n\n    /** @hidden */\n    onChange: Function = () => {};\n\n    /** @hidden */\n    onTouched: Function = () => {};\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value) {\n            setTimeout(() => {\n                if (this.value) {\n                    this.selectValue(this.value, false);\n                }\n            });\n        }\n    }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n\n        // If the observable state changes, reset the options and initialize selection.\n        this.options.changes.pipe(startWith(null), takeUntil(this.destroy$)).subscribe(() => {\n            this.resetOptions();\n            this.initSelection();\n        });\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    /** Toggles the open state of the select. */\n    toggle(): void {\n        if (this.isOpen && !this.disabled) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the select popover body. */\n    open(): void {\n        if (!this.isOpen && !this.disabled) {\n            this.isOpen = true;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /** Closes the select popover body. */\n    close(): void {\n        if (this.isOpen && !this.disabled) {\n            this.isOpen = false;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /** @hidden */\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.selectValue(value, false);\n        } else {\n            // Defer the selection of the value to support forms\n            Promise.resolve().then(() => {\n                if (this.options) {\n                    this.selectValue(value, false);\n                }\n            });\n        }\n    }\n\n    /** Returns the current trigger value if there is a selected option. Otherwise, returns the placeholder. */\n    get triggerValue(): string {\n        return this.selected ? this.selected.viewValueText : this.placeholder;\n    }\n\n    /** @hidden */\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n        switch (event.code) {\n            case ('ArrowUp'): {\n                event.preventDefault();\n                this.decrementFocused();\n                break;\n            }\n            case ('ArrowDown'): {\n                event.preventDefault();\n                this.incrementFocused();\n                break;\n            }\n        }\n    }\n\n    /**\n     * Selects an option by option component reference. Preferred method of selection.\n     * @param option The option component to search for.\n     * @param fireEvents Whether to fire change events.\n     */\n    private selectOption(option: OptionComponent, fireEvents: boolean = true): OptionComponent | undefined {\n        if (!this.isOptionActive(option)) {\n            if (this.selected) {\n                this.selected.setSelected(false, false);\n            }\n            option.setSelected(true, false);\n            this.selected = option;\n            this.updateValue(fireEvents);\n            this.close();\n            return option;\n        }\n        return;\n    }\n\n    /**\n     * Selects an option by value. If two components have the same value, the first one found is selected.\n     * Recommend using selectOption generally.\n     * @param value Value to search for.\n     * @param fireEvents Whether to fire change events.\n     */\n    private selectValue(value: any, fireEvents: boolean = true): OptionComponent | undefined {\n        const matchOption = this.options.find((option: OptionComponent) => {\n            return option.value != null && option.value === value;\n        });\n\n        // If not match is found, set everything to null\n        // This is mostly only for cases where a user removes an active option\n        if (!matchOption) {\n            this.unselectOptions();\n            return;\n        }\n\n        // If match is found, select the new value\n        if (matchOption && !this.isOptionActive(matchOption)) {\n            if (this.selected) {\n                this.selected.setSelected(false, false);\n            }\n            matchOption.setSelected(true, false);\n            this.selected = matchOption;\n\n            this.updateValue(fireEvents);\n            this.close();\n        }\n\n        return matchOption;\n    }\n\n    /**\n     * Updates the value parameter with optional events.\n     * @param fireEvents If true, function fires valueChange, onChange and onTouched events.\n     */\n    private updateValue(fireEvents: boolean = true): void {\n        this.value = this.selected.value;\n        if (fireEvents) {\n            this.valueChange.emit(this.value);\n            this.onChange(this.value);\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Function used to reset the options state.\n     */\n    private resetOptions(): void {\n        // Create observable that fires when the options change or the component is destroyed.\n        const destroyCurrentObs = merge(this.options.changes, this.destroy$);\n\n        // Subscribe to observable defined in component properties which fires when an option is clicked.\n        // Destroy if the observable defined above triggers.\n        this.optionsStatusChanges.pipe(takeUntil(destroyCurrentObs)).subscribe((instance: OptionComponent) => {\n            this.selectOption(instance);\n        });\n    }\n\n    /** Selection initialization when a change occurs in options. */\n    private initSelection(): void {\n        if (this.value) {\n            this.selected = undefined;\n            this.selectValue(this.value, false);\n        }\n    }\n\n    /**\n     * Function that tests whether the tested option is currently selected.\n     * @param option Option to test against the selected option.\n     */\n    private isOptionActive(option: OptionComponent): boolean {\n        return option && this.selected && option === this.selected;\n    }\n\n    /** Method that focuses the next option in the list, or the first one if the last one is currently focused. */\n    private incrementFocused(): void {\n\n        // Get active focused element\n        const activeElement = document.activeElement;\n\n        // Get corresponding option element to the above\n        const correspondingOption = this.options.find(option => {\n            return option.getHtmlElement() === activeElement;\n        });\n\n        if (correspondingOption) {\n            const arrayOptions = this.options.toArray();\n            const index = arrayOptions.indexOf(correspondingOption);\n\n            // If active option is the last option, focus the first one\n            // Otherwise, focus the next option.\n            if (index === this.options.length - 1) {\n                arrayOptions[0].focus();\n            } else {\n                arrayOptions[index + 1].focus();\n            }\n        } else if (this.options) {\n            this.options.first.focus();\n        }\n    }\n\n    /** Method that focuses the previous option in the list, or the last one if the last one is currently focused. */\n    private decrementFocused(): void {\n\n        // Get active focused element\n        const activeElement = document.activeElement;\n\n        // Get corresponding option element to the above\n        const correspondingOption = this.options.find(option => {\n            return option.getHtmlElement() === activeElement;\n        });\n\n        // If active option is the first option, focus the last one\n        // Otherwise, focus the previous option.\n        if (correspondingOption) {\n            const arrayOptions = this.options.toArray();\n            const index = arrayOptions.indexOf(correspondingOption);\n\n            if (index === 0) {\n                arrayOptions[this.options.length - 1].focus();\n            } else {\n                arrayOptions[index - 1].focus();\n            }\n        } else if (this.options) {\n            this.options.first.focus();\n        }\n    }\n\n    /**\n     * Method used to handle cases where a user removes the currently active option.\n     * The timeout is required because this can happen after the view has been checked.\n     */\n    private unselectOptions(): void {\n        setTimeout(() => {\n            if (this.selected) {\n                this.selected.setSelected(false, false);\n            }\n            this.selected = undefined;\n            this.value = undefined;\n            this.valueChange.emit(undefined);\n            this.onChange(undefined);\n        });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SelectComponent } from './select.component';\nimport { OptionComponent } from './option/option.component';\nimport { PopoverModule } from '../popover/popover.module';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    declarations: [\n        SelectComponent,\n        OptionComponent\n    ],\n    exports: [\n        SelectComponent,\n        OptionComponent\n    ],\n    imports: [\n        CommonModule,\n        PopoverModule\n    ]\n})\nexport class SelectModule {}\n","import { Directive, EmbeddedViewRef, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Directive used to identify the template which will populate the main action button.\n * Used to achieve complex buttons that require more than a string.\n *```html\n *    <fd-button-split>\n *        <ng-template fd-button-split-action-title>\n *            <p>Paragraph 1</p>\n *            <p>Paragraph 2</p>\n *        </ng-template>\n *        <div fd-button-split-menu>\n *            <fd-menu>\n *                <ul fd-menu-list>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option</a>\n *                    </li>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option2</a>\n *                    </li>\n *                </ul>\n *            </fd-menu>\n *        </div>\n *    </fd-button-split>\n *</fd-button-split>\n *```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-split-button-action-title]'\n})\nexport class SplitButtonActionTitle {}\n\n\n/**\n *   Directive used to specify menu list of items for dropdown.\n *```html\n *    <fd-button-split>\n *        Action Button\n *        <div fd-button-split-menu>\n *            <fd-menu>\n *                <ul fd-menu-list>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option</a>\n *                    </li>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option2</a>\n *                    </li>\n *                </ul>\n *            </fd-menu>\n *        </div>\n *    </fd-button-split>\n *</fd-button-split>\n *```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-split-button-menu]',\n})\nexport class SplitButtonMenuDirective {}\n\n\n\n/**\n * Not for external use. Portal to render the complex title template.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-split-button-load-action-title]'\n})\nexport class SplitButtonLoadActionTitle implements OnInit {\n    @Input('fd-split-button-load-action-title')\n    content: TemplateRef<any>;\n\n    private contentRef: EmbeddedViewRef<any>;\n\n    constructor(private viewRef: ViewContainerRef) {}\n\n    ngOnInit(): void {\n        this.viewRef.clear();\n        this.contentRef = this.viewRef.createEmbeddedView(this.content);\n    }\n}\n","import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { SplitButtonActionTitle } from './split-button-utils/split-button.directives';\nimport { PopoverFillMode } from '../popover/popover-directive/popover.directive';\n\n/**\n * Split Button component, used to enhance standard HTML button and add possibility to put some dropdown with\n * additional options.\n *\n * ```html\n *    <fd-split-button>\n *        Action Button\n *        <div fd-split-button-menu>\n *            <fd-menu>\n *                <ul fd-menu-list>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option</a>\n *                    </li>\n *                    <li fd-menu-item>\n *                       <a [routerLink]=\"'/'\">option2</a>\n *                    </li>\n *                </ul>\n *            </fd-menu>\n *        </div>\n *    </fd-split-button>\n * ```\n */\n@Component({\n    selector: 'fd-split-button',\n    templateUrl: 'split-button.component.html'\n})\nexport class SplitButtonComponent {\n\n    /** @hidden */\n    @ContentChild(SplitButtonActionTitle, {read: TemplateRef})\n    titleTemplate: TemplateRef<any>;\n\n    /** The trigger events that will open/close the popover.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /** Whether the popover should close when a click is made outside its boundaries. */\n    @Input()\n    closeOnOutsideClick: boolean = true;\n\n    /** Whether the popover should close when the escape key is pressed. */\n    @Input()\n    closeOnEscapeKey: boolean = true;\n\n    /** Whether the popover should be focusTrapped. */\n    @Input()\n    focusTrapped: boolean = false;\n\n    /** Whether to apply compact mode to the button. */\n    @Input()\n    compact: boolean;\n\n    /** The icon to include in the button. See the icon page for the list of icons. */\n    @Input()\n    glyph: string = 'slim-arrow-down';\n\n    /** The icon to include in the button. See the icon page for the list of icons. */\n    @Input()\n    disabled: boolean;\n\n    /** The Title for main  action button */\n    @Input()\n    mainActionTitle: string;\n\n    /** The type of the button. Types include 'standard', 'positive', 'medium', and 'negative'.\n     * Leave empty for default (Action button).'*/\n    @Input()\n    fdType: string;\n\n    /** Button options.  Options include 'emphasized' and 'light'. Leave empty for default.' */\n    @Input()\n    options: string | string[];\n\n    /**\n     * Preset options for the popover body width.\n     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.\n     * * `equal` will apply a width to the body equivalent to the width of the control.\n     * * Leave blank for no effect.\n     */\n    @Input()\n    fillControlMode: PopoverFillMode = 'at-least';\n\n    /** @hidden */\n    @Input()\n    isOpen: boolean = false;\n\n    /** Event sent when is open popover changed */\n    @Output()\n    readonly isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event sent when primary button is clicked */\n    @Output()\n    readonly primaryButtonClicked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /**\n     *  Handles primary button click\n     *  */\n    public buttonClick($event) {\n        this.primaryButtonClicked.emit();\n        $event.stopPropagation();\n    }\n\n    /**\n     * Toggles the popover open state.\n     */\n    public toggle(): void {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Closes the popover.\n     */\n    public close(): void {\n        if (this.isOpen) {\n            this.isOpen = false;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Opens the popover.\n     */\n    public open(): void {\n        if (!this.isOpen) {\n            this.isOpen = true;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SplitButtonComponent } from './split-button.component';\nimport { ButtonModule } from '../button/button.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { SplitButtonActionTitle, SplitButtonLoadActionTitle, SplitButtonMenuDirective } from './split-button-utils/split-button.directives';\n\n@NgModule({\n    imports: [CommonModule, ButtonModule, PopoverModule],\n    declarations: [SplitButtonComponent, SplitButtonMenuDirective, SplitButtonActionTitle, SplitButtonLoadActionTitle],\n    exports: [SplitButtonComponent, SplitButtonMenuDirective, SplitButtonActionTitle, SplitButtonLoadActionTitle]\n})\nexport class SplitButtonModule {}\n","import { Directive, HostBinding } from '@angular/core';\n/**\n * The directive that represents a table.\n * A table is a set of tabular data. Line items can support data, images and actions.\n * ```html\n * <table fd-table></table>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-table]'\n})\nexport class TableDirective {\n\n    /** @hidden */\n    @HostBinding('class.fd-table')\n    fdTableClass: boolean = true;\n\n}\n","import { Directive, Input } from '@angular/core';\n\n/**\n * Directive used to achieve column sorting.\n * The directive is placed on the the desired column(s) to sort,\n */\n@Directive({\n    selector: '[fdColumnSortable]',\n    host: {\n        class: 'fd-table__sort-column',\n        '[class.fd-table__sort-column--dsc]': 'sortDir === \"desc\" || sortDir === \"dsc\"',\n        '[class.fd-table__sort-column--asc]': 'sortDir === \"asc\"'\n    }\n})\nexport class ColumnSortableDirective {\n\n    /** \n     * The sorting direction. \n     * Options include *asc*, *dsc*, *desc*, and *none*\n     */\n    @Input() sortDir: SortDirections;\n\n}\nexport type SortDirections = 'asc' | 'dsc' | 'desc' | 'none';\n","import { Directive } from '@angular/core';\n/**\n * The directive that represents a table.\n * A table is a set of tabular data. Line items can support data, images and actions.\n * ```html\n *     <div fd-table-responsive-wrapper>\n *         <table fd-table>\n *         </table>\n *     </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-table-responsive-wrapper]',\n    host: {\n        style: 'overflow-x: auto'\n    }\n})\nexport class TableResponsiveWrapperDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TableDirective } from './table.directive';\nimport { ColumnSortableDirective } from './column-sortable.directive';\nimport { TableResponsiveWrapperDirective } from './table-responsive-wrapper.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [TableDirective, TableResponsiveWrapperDirective, ColumnSortableDirective],\n    exports: [TableDirective, TableResponsiveWrapperDirective, ColumnSortableDirective]\n})\nexport class TableModule {}\n","import { Directive, EmbeddedViewRef, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Directive used to identify the template which will populate the tab header.\n * Used to achieve complex headers that require more than a string.\n *\n * ```html\n * <fd-tab>\n *      <ng-template fd-tab-title>\n *          <fd-icon [glyph]=\"'delete'\"></fd-icon>\n *          <span>Tab Label</span>\n *      </ng-template>\n * </fd-tab>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-title]'\n})\nexport class TabTitleDirective {\n}\n\n/**\n * Not for external use. Portal to render the complex title template.\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-load-title]'\n})\nexport class TabLoadTitleDirective implements OnInit {\n    @Input('fd-tab-load-title')\n    content: TemplateRef<any>;\n\n    private contentRef: EmbeddedViewRef<any>;\n\n    constructor(private viewRef: ViewContainerRef) {}\n\n    ngOnInit(): void {\n        this.viewRef.clear();\n        this.contentRef = this.viewRef.createEmbeddedView(this.content);\n    }\n}\n","import { Component, ContentChild, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { TabTitleDirective } from '../tab-utils/tab-directives';\n\nlet tabPanelUniqueId: number = 0;\n\n/**\n * Represents the body of a tab element. It also contains elements pertaining to the associated tab header.\n */\n@Component({\n    selector: 'fd-tab',\n    templateUrl: './tab-panel.component.html',\n    host: {\n        role: 'tabpanel',\n        class: 'fd-tabs__panel',\n        '[attr.id]': 'id',\n        '[attr.aria-expanded]': 'expanded ? true : null',\n        '[class.is-expanded]': 'expanded'\n    },\n    encapsulation: ViewEncapsulation.None,\n})\nexport class TabPanelComponent {\n\n    /** @hidden */\n    @ContentChild(TabTitleDirective, {read: TemplateRef})\n    titleTemplate: TemplateRef<any>;\n\n    /** The title of the tab header. */\n    @Input()\n    title: string;\n\n    /** Aria-label of the tab. Also applied to the tab header. */\n    @Input()\n    ariaLabel: string;\n\n    /** Id of the element that labels the tab. Also applied to the tab header. */\n    @Input()\n    ariaLabelledBy: string;\n\n    /** Whether the tab is disabled. */\n    @Input()\n    disabled: boolean;\n\n    /** Id of the tab. If none is provided, one will be generated. */\n    @Input()\n    id: string = 'fd-tab-panel' + tabPanelUniqueId++;\n\n    /** @hidden */\n    expanded = false;\n\n    /** @hidden */\n    index: number;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * Service that is responsible for providing keyboard actions support\n * */\n@Injectable()\nexport class TabsService {\n\n    /** Event is thrown always when tab is selected by keyboard actions */\n    public tabSelected = new Subject<number>();\n\n    /** @hidden */\n    tabHeaderKeyHandler(index: number, event: any, elements: HTMLElement[]): void {\n        switch (event.code) {\n            case ('ArrowLeft'): {\n                if (index - 1 >= 0) {\n                    this.getTabLinkFromIndex(index - 1, elements).focus();\n                } else {\n                    this.getTabLinkFromIndex(elements.length - 1, elements).focus();\n                }\n                break;\n            }\n            case ('ArrowRight'): {\n                if (index + 1 < elements.length) {\n                    this.getTabLinkFromIndex(index + 1, elements).focus();\n                } else {\n                    this.getTabLinkFromIndex(0, elements).focus();\n                }\n                break;\n            }\n            case ('Space'): {\n                event.preventDefault();\n                this.tabSelected.next(index);\n                break;\n            }\n            case ('Enter'): {\n                this.tabSelected.next(index);\n            }\n        }\n    }\n\n    /** @hidden */\n    private getTabLinkFromIndex(index: number, elements: HTMLElement[]): HTMLElement {\n        return elements[index];\n    }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    QueryList,\n    SimpleChanges,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TabPanelComponent } from './tab/tab-panel.component';\nimport { Subscription } from 'rxjs';\nimport { TabsService } from './tabs.service';\n\n/**\n * Represents a list of tab-panels.\n */\n@Component({\n    selector: 'fd-tab-list',\n    templateUrl: './tab-list.component.html',\n    styleUrls: ['./tab-list.component.scss'],\n    host: {\n        class: 'fd-tabs-custom'\n    },\n    encapsulation: ViewEncapsulation.None,\n    providers: [TabsService]\n})\nexport class TabListComponent implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** @hidden */\n    @ContentChildren(TabPanelComponent)\n    panelTabs: QueryList<TabPanelComponent>;\n\n    /** @hidden */\n    @ViewChildren('tabLink')\n    tabLinks: QueryList<ElementRef>;\n\n    /** Index of the selected tab panel. */\n    @Input()\n    selectedIndex: number = 0;\n\n    /** Event emitted when the selected panel changes. */\n    @Output()\n    selectedIndexChange = new EventEmitter<number>();\n\n    private _tabsSubscription: Subscription;\n    private _tabSelectSubscription: Subscription;\n\n    constructor(\n        private tabsService: TabsService\n    ) {}\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        setTimeout(() => {\n            this.selectTab(this.selectedIndex);\n        });\n\n        this._tabSelectSubscription = this.tabsService.tabSelected.subscribe(index => {\n            if (index !== this.selectedIndex) {\n                this.selectTab(index);\n            }\n        });\n\n        this._tabsSubscription = this.panelTabs.changes.subscribe(() => {\n            if (!this.isIndexInRange() || this.isTabContentEmpty()) {\n                this.resetTabHook();\n            }\n        });\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this._tabsSubscription.unsubscribe();\n        this._tabSelectSubscription.unsubscribe();\n    }\n\n    /** @hidden */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.selectedIndex) {\n            setTimeout(() => {\n                this.selectTab(changes.selectedIndex.currentValue);\n            });\n        }\n    }\n\n    /**\n     * Function to select a new tab from an index.\n     * @param tabIndex Index of the tab to select.\n     */\n    selectTab(tabIndex: number): void {\n       if (this.isIndexInRange() && this.isTargetTabEnabled(tabIndex)) {\n            this.panelTabs.forEach((tab, index) => {\n                tab.expanded = index === tabIndex;\n            });\n            this.selectedIndex = tabIndex;\n            this.selectedIndexChange.emit(tabIndex);\n        }\n    }\n\n    /** @hidden */\n    tabHeaderClickHandler(tabIndex: number): void {\n        if (this.selectedIndex !== tabIndex) {\n            this.selectTab(tabIndex);\n        }\n    }\n\n    /** @hidden */\n    tabHeaderKeyHandler(index: number, event: any): void {\n        this.tabsService.tabHeaderKeyHandler(index, event, this.tabLinks.map(tab => tab.nativeElement));\n    }\n\n    private isIndexInRange(): boolean {\n        return this.panelTabs && this.panelTabs.length > 0 && this.selectedIndex < this.panelTabs.length;\n    }\n\n    private isTargetTabEnabled(index: number): boolean {\n        return !this.panelTabs.toArray()[index].disabled;\n    }\n\n    private isTabContentEmpty(): boolean {\n        let result = true;\n        this.panelTabs.forEach(tab => {\n            if (tab.expanded) {\n                result = false;\n            }\n        });\n        return result;\n    }\n\n    private resetTabHook(): void {\n        this.selectedIndex = 0;\n        setTimeout(() => {\n            this.selectTab(this.selectedIndex);\n        });\n    }\n}\n","import { Directive, ElementRef, HostBinding, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Tab link for nav mode\n *\n * ```html\n * <a fd-tab-link>\n *    link\n * </a>\n * ```\n */\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-link]',\n    host: {\n        'role': 'tab',\n    }\n})\nexport class TabLinkDirective extends AbstractFdNgxClass {\n\n    /** Whether the link is active */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    active: boolean;\n\n    /**\n     * Only visual / accessibility thing on tab-nav mode\n     * RouterLink does not respect preventDefault/stopPropagation\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    disabled: boolean;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-tabs__link');\n        if (this.active) {\n            this._addClassToElement('is-selected');\n        }\n    }\n\n    /** @hidden */\n    constructor(public elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n}\n","import { ContentChild, Directive } from '@angular/core';\nimport { TabLinkDirective } from '../tab-link/tab-link.directive';\n/**\n * Tab Item is optional wrapper for Tab link\n *\n * ```html\n * <div fd-tab-item>\n *    <a fd-tab-link>\n *        link\n *    </a>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-item]',\n    host: {\n        'class': 'fd-tabs__item'\n    }\n})\nexport class TabItemDirective {\n\n    /** @hidden */\n    @ContentChild(TabLinkDirective) linkItem: TabLinkDirective;\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    EventEmitter, OnDestroy,\n    Output,\n    QueryList,\n    Renderer2\n} from '@angular/core';\nimport { TabLinkDirective } from '../tab-link/tab-link.directive';\nimport { TabItemDirective } from '../tab-item/tab-item.directive';\nimport { TabsService } from '../tabs.service';\nimport { Subscription } from 'rxjs';\n\n\n/**\n * Tab Nav for only navigation mode when you want for example use router-outlet\n *\n * ```html\n *<nav fd-tab-nav>\n *  <div fd-tab-item>\n *      <a fd-tab-link\n *      [active]=\"true\">\n *          Link\n *      </a>\n *  </div>\n *  <div fd-tab-item>\n *      <a fd-tab-link\n *      [active]=\"false\">\n *          Link\n *      </a>\n *  </div>\n *  <a fd-tab-link\n *  [active]=\"false\">\n *      Link\n *  </a>\n * </nav>\n * ```\n */\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tab-nav]',\n    host: {\n        'class': 'fd-tabs',\n        'role': 'tablist'\n    },\n    providers: [TabsService]\n})\nexport class TabNavDirective implements AfterContentInit, OnDestroy {\n\n    /** @hidden */\n    @ContentChildren(TabLinkDirective) links: QueryList<TabLinkDirective>;\n\n    /** @hidden */\n    @ContentChildren(TabItemDirective) items: QueryList<TabItemDirective>;\n\n    /** @hidden */\n    private _tabSelectSubscription: Subscription;\n\n    /** Event Thrown every time something is clicked */\n    @Output() onKeyDown = new EventEmitter<{event: any, index: number}>();\n\n    /** @hidden */\n    constructor(\n        private renderer: Renderer2,\n        private tabsService: TabsService\n    ) {}\n\n    /** Function that gives possibility to get all the link directives, with and without nav__item wrapper */\n    public get tabLinks(): TabLinkDirective[] {\n        let tabLinks: TabLinkDirective[] = [];\n        if (this.links) { tabLinks = tabLinks.concat(this.links.map(link => link)); }\n        if (this.items) { tabLinks = tabLinks.concat(this.items.filter(item => !!item.linkItem).map(item => item.linkItem)); }\n        return tabLinks;\n    }\n\n    /** @hidden */\n    public ngAfterContentInit(): void {\n        this._tabSelectSubscription = this.tabsService.tabSelected.subscribe(index => {\n            this.selectTab(index);\n        });\n\n        this.tabLinks.forEach((linkElement, index) => {\n            this.renderer.listen(linkElement.elementRef.nativeElement, 'keydown', (event) => {\n                this.tabsService.tabHeaderKeyHandler(index, event, this.tabLinks.map(link => link.elementRef.nativeElement))\n            }\n        )})\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        this._tabSelectSubscription.unsubscribe();\n    }\n\n    /**\n     * Function to select a new tab from an index.\n     * @param tabIndex Index of the tab to select.\n     */\n    selectTab(tabIndex: number): void {\n        this.tabLinks[tabIndex].elementRef.nativeElement.click();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TabPanelComponent } from './tab/tab-panel.component';\nimport { TabListComponent } from './tab-list.component';\n\nimport { TabLoadTitleDirective, TabTitleDirective } from './tab-utils/tab-directives';\nimport { TabNavDirective } from './tab-nav/tab-nav.directive';\nimport { TabLinkDirective } from './tab-link/tab-link.directive';\nimport { TabItemDirective } from './tab-item/tab-item.directive';\n\n@NgModule({\n    declarations: [\n        TabListComponent,\n        TabPanelComponent,\n        TabTitleDirective,\n        TabLoadTitleDirective,\n        TabNavDirective,\n        TabLinkDirective,\n        TabItemDirective\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        TabListComponent,\n        TabPanelComponent,\n        TabTitleDirective,\n        TabLoadTitleDirective,\n        TabNavDirective,\n        TabItemDirective,\n        TabLinkDirective\n    ]\n})\nexport class TabsModule {}\n","import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Tile is used to display information in a simple container format.\n * ```html\n * <fd-tile>\n *     <fd-tile-content>\n *         <h2 fd-tile-title>Tile Tile</h2>\n *         <p>Tile Description</p>\n *     </fd-tile-content>\n * </fd-tile>\n * ```\n */\n@Component({\n    selector: 'fd-tile',\n    host: {\n        '[attr.role]': '(this.isButton === true ? \\'button\\' : \\'\\')'\n    },\n    templateUrl: './tile.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class TileComponent extends AbstractFdNgxClass {\n    /** Whether the tile is disabled. */\n    @Input() disabled: boolean = false;\n\n    /** Whether the tile is rendered as a button. */\n    @Input() isButton: boolean = false;\n\n    /** Specifies the number of rows a tile should span. */\n    @Input() rowSpan: number;\n\n    /** Specifies the number of columns a tile should span. */\n    @Input() columnSpan: number;\n\n    /** A number specifying the background color of the tile. */\n    @Input() colorAccent: number;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-tile');\n        if (this.disabled) {\n            this._addClassToElement('is-disabled');\n        }\n        if (this.rowSpan) {\n            this._addClassToElement('fd-has-grid-row-span-' + this.rowSpan);\n        }\n        if (this.columnSpan) {\n            this._addClassToElement('fd-has-grid-column-span-' + this.columnSpan);\n        }\n        if (this.colorAccent) {\n            this._addClassToElement('fd-has-background-color-accent-' + this.colorAccent);\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive } from '@angular/core';\n\n/**\n * Directive that represents a tile content. \n * ```html\n * <div fd-tile-content>\n *    <h2 fd-tile-title>Tile Tile</h2>\n *    <p>Tile Description</p>\n * </div>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-content]',\n    host: {\n        class: 'fd-tile__content'\n    }\n})\nexport class TileContentDirective {}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Applies the tile title style to a header element. It can be used with any header level.\n *\n * ```html\n * <h1 fd-tile-title>Tile Title</h1>\n * <h2 fd-tile-title>Tile Title</h2>\n * <h3 fd-tile-title>Tile Title</h3>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-title]'\n})\nexport class TileTitleDirective {\n    /** @hidden */\n    @HostBinding('class.fd-tile__title')\n    fdTileTitleClass: boolean = true;\n}\n","import { Directive } from '@angular/core';\n\n/**\n * The directive that represents a tile media container. \n * ```html\n * <div fd-tile-media>\n *      <span fd-identifier\n *            [size]=\"'m'\"\n *            [glyph]=\"'home'\"\n *            [transparent]=\"true\"></span>\n * </div>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-media]',\n    host: {\n        class: 'fd-tile__media'\n    }\n})\nexport class TileMediaDirective {}\n","import { Component, Directive, ViewEncapsulation } from '@angular/core';\n\n/**\n * Tile level actions such as add, remove, delete, sort, etc.\n * \n * ```html\n * <fd-tile>\n *    <div fd-tile-actions>\n *        <button fd-button (click)=\"action()\">Action</button>\n *    </div>\n * </fd-tile>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-actions]',\n    host: {\n        class: 'fd-tile__actions'\n    }\n})\nexport class TileActionsDirective {}\n","import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';\nimport { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';\n\n/**\n * Product tile is used to display product information.\n * ```html\n * <fd-product-tile>\n *     <fd-product-tile-media [photo]=\"'https://techne.yaas.io/images/product-thumbnail-wide.png'\">\n *     </fd-product-tile-media>\n *     <fd-product-tile-content>\n *         <h2 fd-product-tile-title>Default Product Tile</h2>\n *     </fd-product-tile-content>\n * </fd-product-tile>\n * ```\n */\n@Component({\n    selector: 'fd-product-tile',\n    host: {\n        '[attr.role]': '(this.isButton === true ? \"button\" : \"\")',\n        '[class.fd-product-tile-custom]': 'true'\n    },\n    templateUrl: './product-tile.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n        .fd-product-tile-custom {\n            display: block;\n        }\n    `]\n})\nexport class ProductTileComponent extends AbstractFdNgxClass {\n    /** Whether the product tile is disabled. */\n    @Input() disabled: boolean = false;\n\n    /** Whether the product tile is rendered as a button. */\n    @Input() isButton: boolean = false;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-product-tile');\n        if (this.disabled) {\n            this._addClassToElement('is-disabled');\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Component that represents a product tile media container.\n * ```html\n * <div fd-product-tile-media [photo]=\"'https://techne.yaas.io/images/product-thumbnail-wide.png'\">\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-product-tile-media]',\n})\nexport class ProductTileMediaDirective extends AbstractFdNgxClass {\n    /** The image url. */\n    @Input() photo: string;\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    /** @hidden */\n    _setProperties(): void {\n        this._addClassToElement('fd-product-tile__media');\n        if (this.photo) {\n            this._addStyleToElement('background-image', 'url(' + this.photo + ')')\n        }\n    }\n}\n","import { Directive } from '@angular/core';\n\n/**\n * Component that represents a product tile content. \n * ```html\n * <div fd-product-tile-content>\n *    <h2 fd-product-tile-title>Default Product Tile</h2>\n * </div>\n * ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-product-tile-content]',\n    host: {\n        'class': 'fd-product-tile__content'\n    }\n})\nexport class ProductTileContentDirective {}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * Directive that represents a product tile title.\n * ```html\n * <h2 fd-product-tile-title>Default Product Tile</h2>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-product-tile-title]'\n})\nexport class ProductTileTitleDirective {\n    /** @hidden */\n    @HostBinding('class.fd-product-tile__title')\n    fdProductTileTitleClass: boolean = true;\n}\n","import { Directive, ElementRef, Inject, Input } from '@angular/core';\nimport { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';\n\n/**\n * Directive that represents a tile grid. \n * A Tile Gird is a collection of fd-tile components in a gird layout. \n * ```html\n * <fd-tile-grid [col]=\"3\">\n *      <fd-tile>\n *          <div fd-tile-content>\n *              <h2 fd-tile-title>Tile Tile 1</h2>\n *              <p>Tile Description</p>\n *          </div>\n *      </fd-tile>\n *      <fd-tile>\n *          <div fd-tile-content>\n *              <h2 fd-tile-title>Tile Tile 2</h2>\n *              <p>Tile Description</p>\n *          </div>\n *      </fd-tile>\n *      <fd-tile>\n * </fd-tile-grid>\n * ```\n */\n@Directive({\n    // TODO to be discussed\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-tile-grid]'\n})\nexport class TileGridDirective extends AbstractFdNgxClass {\n    /** \n     * The number of columns in the grid layout.\n     * The default is 3-col grid.\n     */\n    @Input() col: number;\n\n    /** @hidden */\n    _setProperties() {\n        this._addClassToElement('fd-tile-grid');\n        if (this.col) {\n            this._addClassToElement('fd-tile-grid--' + this.col + 'col');\n        }\n    }\n\n    /** @hidden */\n    constructor(private elementRef: ElementRef) {\n        super(elementRef);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TileComponent } from './tile.component';\nimport { TileContentDirective } from './tile-content/tile-content.directive';\nimport { TileTitleDirective } from './tile-title/tile-title.directive';\nimport { TileMediaDirective } from './tile-media/tile-media.directive';\nimport { TileActionsDirective } from './tile-actions/tile-actions.directive';\nimport { ProductTileComponent } from './product-tile.component';\nimport { ProductTileMediaDirective } from './product-tile-media/product-tile-media.directive';\nimport { ProductTileContentDirective } from './product-tile-content/product-tile-content.directive';\nimport { ProductTileTitleDirective } from './product-tile-title/product-tile-title.directive';\nimport { TileGridDirective } from './tile-grid/tile-grid.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        TileComponent,\n        TileContentDirective,\n        TileTitleDirective,\n        TileMediaDirective,\n        TileActionsDirective,\n        ProductTileComponent,\n        ProductTileMediaDirective,\n        ProductTileContentDirective,\n        ProductTileTitleDirective,\n        TileGridDirective\n    ],\n    declarations: [\n        TileComponent,\n        TileContentDirective,\n        TileTitleDirective,\n        TileMediaDirective,\n        TileActionsDirective,\n        ProductTileComponent,\n        ProductTileMediaDirective,\n        ProductTileContentDirective,\n        ProductTileTitleDirective,\n        TileGridDirective\n    ]\n})\nexport class TileModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TreeRowObject } from './tree-row-object.model';\n\n@Component({\n    selector: 'fd-tree-child',\n    templateUrl: './tree-child.component.html'\n})\nexport class TreeChildComponent implements OnInit {\n    @Input() row: TreeRowObject;\n\n    @Input() hideChildren: boolean;\n\n    @Input() displayTreeActions: boolean;\n\n    @Output() editClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() deleteClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    ngOnInit() {\n        this.hideChildren = false;\n    }\n\n    toggleDisplayChildren(hideAll?) {\n        if (hideAll !== undefined) {\n            this.hideChildren = hideAll;\n        } else {\n            this.hideChildren = !this.hideChildren;\n        }\n    }\n\n    typeOf(variable?) {\n        let retVal;\n        if (typeof variable === 'string') {\n            retVal = 'string';\n        } else if (typeof variable === 'object') {\n            retVal = 'object';\n        }\n\n        return retVal;\n    }\n\n    editTreeItem(row?) {\n        if (row) {\n            this.editClicked.emit(row);\n        }\n    }\n\n    deleteTreeItem(row?) {\n        if (row) {\n            this.deleteClicked.emit(row);\n        }\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    OnInit,\n    AfterContentInit,\n    ViewChildren,\n    QueryList,\n    EventEmitter\n} from '@angular/core';\n\nimport { TreeRowObject } from './tree-row-object.model';\nimport { TreeChildComponent } from './tree-child.component';\n\n@Component({\n    selector: 'fd-tree',\n    templateUrl: './tree.component.html'\n})\nexport class TreeComponent implements OnInit, AfterContentInit {\n    @Input() headers: string[];\n\n    @Input() treeData: TreeRowObject[];\n\n    @Input() hideAll: boolean;\n\n    @Input() displayTreeActions: boolean;\n\n    @Output() editRowClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() deleteRowClicked: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChildren(TreeChildComponent) treeChildren: QueryList<TreeChildComponent>;\n\n    ngOnInit() {\n        this.hideAll = false;\n    }\n\n    ngAfterContentInit() {\n        if (this.treeData && this.treeData.length) {\n            this.treeData.forEach(row => {\n                this.getChildDepth(row, 0);\n                this.handleEmptyTrailingCells(row); // handle empty cells for parents\n            });\n        }\n    }\n\n    toggleDisplayAll() {\n        this.hideAll = !this.hideAll;\n        this.treeChildren.forEach(child => {\n            child.toggleDisplayChildren(this.hideAll);\n        });\n    }\n\n    getChildDepth(row, depth) {\n        if (depth > 0) {\n            row.sublevelClass = 'fd-tree__group--sublevel-' + depth;\n        }\n        if (row.children) {\n            row.children.forEach(child => {\n                this.getChildDepth(child, depth + 1);\n                this.handleEmptyTrailingCells(child); // handle empty cells for children\n            });\n        }\n    }\n\n    handleEmptyTrailingCells(row) {\n        if (\n            row &&\n            row.rowData &&\n            row.rowData.length &&\n            typeof row.rowData[0] !== 'object' &&\n            this.headers &&\n            this.headers.length\n        ) {\n            while (row.rowData.length < this.headers.length) {\n                row.rowData.push('');\n            }\n        } else if (\n            row &&\n            row.rowData &&\n            row.rowData.length &&\n            typeof row.rowData[0] === 'object' &&\n            this.headers &&\n            this.headers.length\n        ) {\n            while (row.rowData.length < this.headers.length) {\n                row.rowData.push({\n                    displayText: ''\n                });\n            }\n        }\n    }\n\n    editClicked(row) {\n        this.editRowClicked.emit(row);\n    }\n\n    deleteClicked(row) {\n        this.deleteRowClicked.emit(row);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeComponent } from './tree.component';\nimport { TreeChildComponent } from './tree-child.component';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\nimport { PopoverModule } from '../popover/popover.module';\nimport { MenuModule } from '../menu/menu.module';\n\n@NgModule({\n    declarations: [TreeComponent, TreeChildComponent],\n    imports: [CommonModule, ButtonModule, IconModule, PopoverModule, MenuModule],\n    exports: [TreeComponent, TreeChildComponent]\n})\nexport class TreeModule {}\n","import { Injectable } from '@angular/core';\nimport { TimeObject } from '../../time/time-object';\n\nexport function TIME_FORMAT_FACTORY() {\n    return new TimeFormatParserDefault();\n}\n\n/**\n * Abstract class which defines the behaviour of the time format and parser.\n */\n@Injectable({\n    providedIn: 'root',\n    useFactory: TIME_FORMAT_FACTORY\n})\nexport abstract class TimeFormatParser {\n\n    /**\n     * Should take in a string value and return a Time object.\n     * @param value String to convert to a time object.\n     * @param meridian boolean to define if string should be treated as a meridian.\n     * @param displaySeconds boolean to define if string should display seconds.\n     */\n    abstract parse(value: string, displaySeconds: boolean, meridian?: boolean): TimeObject;\n\n    /**\n     * Should take in a time object and return a string representation.\n     * @param time TimeObject to convert to a string.\n     * @param meridian boolean to define if TimeObject should be treated as a meridian.\n     */\n    abstract format(time: TimeObject, meridian?: boolean): string;\n}\n\n/**\n * Default implementation of the DateFormatParser service.\n */\n@Injectable()\nexport class TimeFormatParserDefault extends TimeFormatParser {\n\n    /**\n     * Takes in a string representation of a date and returns a Time object.\n     * @param value String to convert to a time object.\n     * @param meridian boolean to define if string should be treated as a meridian.\n     * @param displaySeconds boolean to define if string should display seconds.\n     */\n    public parse(value: string, displaySeconds: boolean = true, meridian?: boolean): TimeObject {\n        const time = new TimeObject();\n        let regexp;\n        if (!meridian) {\n            if (displaySeconds) {\n                regexp = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])(:[0-5][0-9])$/;\n            } else {\n                regexp = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;\n            }\n            if (regexp.test(value)) {\n                const splitString = value.split(':');\n                time.hour = parseInt(splitString[0], 10);\n                time.minute = parseInt(splitString[1], 10);\n                if (displaySeconds) {\n                    time.second = parseInt(splitString[2], 10);\n                }\n                return time;\n            } else {\n                return null;\n            }\n        } else if (meridian) {\n            if (displaySeconds) {\n                regexp = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])(:[0-5][0-9]) [APap][mM]$/;\n            } else {\n                regexp = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9]) [APap][mM]$/;\n            }\n            if (regexp.test(value)) {\n                const period = value.split(' ')[1];\n\n                const splitString = value.split(':');\n                time.hour = parseInt(splitString[0], 10);\n                if (( period === 'pm' || period === 'PM' ) && time.hour < 12) {\n                    time.hour = time.hour + 12;\n                } else if ( (period === 'am' || period === 'AM') && time.hour === 12 ) {\n                    time.hour = 0;\n                }\n                time.minute = parseInt(splitString[1], 10);\n                if (displaySeconds) {\n                    time.second = parseInt(splitString[2], 10);\n                }\n                return time;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    /**\n     * Takes in a time object and returns the string representation.\n     * @param time TimeObject to convert to a string.\n     * @param meridian boolean to define if TimeObject should be treated as a meridian.\n     */\n    public format(time: TimeObject, meridian?: boolean): string {\n        let formattedHour, formattedMinute, formattedSecond;\n        let formattedTime;\n        let formattedMeridian;\n        if (time.hour !== null) {\n            if (meridian) {\n                if (time.hour === 0) {\n                    formattedHour = 12;\n                    formattedMeridian = 'am';\n                } else if (time.hour > 12) {\n                    formattedHour = time.hour - 12;\n                    formattedMeridian = 'pm';\n                } else if (time.hour === 12) {\n                    formattedHour = 12;\n                    formattedMeridian = 'pm';\n                } else {\n                    formattedHour = time.hour;\n                    formattedMeridian = 'am';\n                }\n            } else {\n                formattedHour = time.hour;\n            }\n        }\n        if (time.minute !== null) {\n            formattedMinute = time.minute < 10 ? '0' + time.minute : time.minute;\n        }\n\n        if (time.second !== null) {\n            formattedSecond = time.second < 10 ? '0' + time.second : time.second;\n        }\n        if (formattedHour || formattedHour === 0) {\n            formattedTime = formattedHour;\n            if (formattedMinute || formattedMinute === '00') {\n                formattedTime = formattedTime + ':' + formattedMinute;\n                if (formattedSecond || formattedSecond === '00') {\n                    formattedTime = formattedTime + ':' + formattedSecond;\n                }\n            }\n        }\n        if (formattedMeridian && formattedTime) {\n            formattedTime += ' ' + formattedMeridian\n        }\n\n        return formattedTime;\n    }\n}\n","import { ChangeDetectorRef, Component, forwardRef, HostBinding, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { TimeObject } from '../time/time-object';\nimport { TimeComponent } from '../time/time.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TimeFormatParser } from './format/time-parser';\n\n@Component({\n    selector: 'fd-time-picker',\n    templateUrl: './time-picker.component.html',\n    host: {\n        '(blur)': 'onTouched()',\n        class: 'fd-timepicker-custom'\n    },\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimePickerComponent),\n            multi: true\n        }\n    ],\n    styleUrls: ['./time-picker.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnInit {\n\n    /** @hidden */\n    @HostBinding('class.fd-time-picker')\n    timepickerclass = true;\n\n    /**\n     * @Input An object that contains three integer properties: 'hour' (ranging from 0 to 23),\n     * 'minute' (ranging from 0 to 59), and 'second' (ranging from 0 to 59). This is the model the component consumes. Example:\n     *\n     * ```json\n     * { hour: 12, minute: 0, second: 0 }\n     * ```\n     */\n    @Input()\n    time: TimeObject = { hour: 0, minute: 0, second: 0 };\n\n    /** @Input Uses compact time picker. */\n    @Input()\n    compact: boolean = false;\n\n    /** @Input When set to true, uses the 24 hour clock (hours ranging from 0 to 23)\n     * and does not display a period control. */\n    @Input()\n    meridian: boolean = false;\n\n    /** @Input Disables the component. */\n    @Input()\n    disabled: boolean;\n\n    /** @Input When set to false, hides the buttons that increment and decrement the corresponding input. */\n    @Input()\n    spinners: boolean = true;\n\n    /** @Input When set to false, hides the input for seconds. */\n    @Input()\n    displaySeconds: boolean = true;\n\n    /** @Input When set to false, hides the input for minutes. */\n    @Input()\n    displayMinutes: boolean = true;\n\n    /** @Input When set to false, hides the input for hours. */\n    @Input()\n    displayHours: boolean = true;\n\n    /** Whether to perform visual validation on the picker input. */\n    @Input()\n    validate: boolean = true;\n\n    /** Aria label for the time picker input. */\n    @Input()\n    timePickerInputLabel: string = 'Time picker input';\n\n    /** Whether a null input is considered valid. */\n    @Input()\n    allowNull: boolean = true;\n\n    /** @hidden Whether the input time is valid. Internal use. */\n    isInvalidTimeInput: boolean = false;\n\n    /** @hidden */\n    @ViewChild(TimeComponent)\n    child: TimeComponent;\n\n    /** @hidden */\n    period: string;\n\n    /** @hidden */\n    isOpen: boolean;\n\n    /** @hidden */\n    placeholder: string;\n\n    /** @hidden */\n    onChange: Function = () => {};\n    /** @hidden */\n    onTouched: Function = () => {};\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.placeholder = this.getPlaceholder();\n    }\n\n    /**\n     * Returns the current value of the time input.\n     */\n    getTime(): TimeObject {\n        return this.time;\n    }\n\n    /** @hidden */\n    getFormattedTime(): string {\n        const formattedTime = this.timeAdapter.format(this.time, this.meridian);\n        return formattedTime !== undefined ? formattedTime : '';\n    }\n\n    /** @hidden */\n    timeInputChanged(timeFromInput) {\n        const time = this.timeAdapter.parse(timeFromInput, this.displaySeconds, this.meridian);\n        if (time) {\n            this.isInvalidTimeInput = false;\n            this.child.setDisplayedHour();\n            this.time = Object.assign(this.time, time);\n            this.onChange(time);\n        } else {\n            if (this.allowNull && timeFromInput === '') {\n                this.isInvalidTimeInput = false;\n                this.child.setDisplayedHour();\n                this.onChange({hour: null, minutes: null, seconds: null});\n            } else {\n                this.isInvalidTimeInput = true;\n            }\n        }\n    }\n\n    /** @hidden */\n    inputGroupClicked($event) {\n        if (!this.isOpen && !this.disabled) {\n            $event.stopPropagation();\n            this.isOpen = true;\n        }\n    }\n\n    /** @hidden */\n    onFocusHandler() {\n        if (!this.isOpen) {\n            this.isOpen = true;\n        }\n    }\n\n    /** @hidden */\n    addOnButtonClicked() {\n        if (!this.disabled) {\n            this.isOpen = !this.isOpen;\n        }\n    }\n\n    /** @hidden */\n    popoverClosed() {\n        this.isOpen = false;\n    }\n\n    /** @hidden */\n    getPlaceholder(): string {\n        let retVal;\n        if (this.displaySeconds) {\n            if (this.meridian) {\n                retVal = 'hh' + ':' + 'mm' + ':' + 'ss am/pm';\n            } else {\n                retVal = 'hh' + ':' + 'mm' + ':' + 'ss';\n            }\n        } else {\n            if (this.meridian) {\n                retVal = 'hh' + ':' + 'mm' + ' am/pm';\n            } else {\n                retVal = 'hh' + ':' + 'mm';\n            }\n        }\n\n        return retVal;\n    }\n\n    /** @hidden */\n    timeFromTimeComponentChanged() {\n        this.cd.detectChanges();\n        this.onChange(this.time);\n    }\n\n    /** @hidden */\n    registerOnChange(fn: (time: TimeObject) => void): void {\n        this.onChange = fn;\n    }\n\n    /** @hidden */\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /** @hidden */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden */\n    writeValue(time: TimeObject): void {\n        if (!time) {\n            return;\n        }\n        this.time = time;\n    }\n\n    /** @hidden */\n    constructor(private cd: ChangeDetectorRef,\n                public timeAdapter: TimeFormatParser) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PopoverModule } from '../popover/popover.module';\nimport { InputGroupModule } from '../input-group/input-group.module';\nimport { TimeModule } from '../time/time.module';\n\nimport { TimePickerComponent } from './time-picker.component';\n\n\n@NgModule({\n    declarations: [TimePickerComponent],\n    imports: [CommonModule, FormsModule, PopoverModule, InputGroupModule, TimeModule],\n    exports: [TimePickerComponent]\n})\nexport class TimePickerModule {}\n","import { Component, ElementRef, EventEmitter, forwardRef, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nlet toggleUniqueId: number = 0;\n\n/**\n * The Toggle component is used to activate or deactivate an element.\n * It uses a visual metaphor to inform the user of the state of the toggle.\n */\n@Component({\n    selector: 'fd-toggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ToggleComponent),\n            multi: true\n        }\n    ],\n    host: {\n        class: 'fd-form__item fd-form__item--check fd-toggle-custom',\n        '[attr.id]': 'id',\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ToggleComponent implements OnInit, ControlValueAccessor {\n    /** @hidden */\n    @ViewChild('input')\n    inputElement: ElementRef<HTMLInputElement>;\n\n    /**\n     * The size of the toggle.\n     * Can be one of the four *xs*, *s*, *l*, *error* or default.\n     */\n    @Input()\n    size: string;\n\n    /** Whether the toggle is disabled. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Id for the toggle component. If omitted, a unique one is generated. */\n    @Input()\n    id: string = 'fd-toggle-' + toggleUniqueId++;\n\n    /** Whether the toggle is checked. */\n    @Input()\n    checked: boolean = false;\n\n    /** aria-label attribute of the inner input element. */\n    @Input()\n    ariaLabel: string = null;\n\n    /** aria-labelledby attribute of the inner input element. */\n    @Input()\n    ariaLabelledby: string = null;\n\n    /**\n     * Event fired when the state of the toggle changes.\n     * *$event* can be used to retrieve the new state of the toggle.\n     */\n    @Output()\n    readonly checkedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** @hidden */\n    onChange: any = () => {};\n\n    /** @hidden */\n    onTouched: any = () => {};\n\n    /** @hidden */\n    ngOnInit() {\n        if (this.size && this.size !== 'xs' && this.size !== 's' && this.size !== 'l') {\n            this.size = null;\n        }\n    }\n\n    /** Set focus on the input element. */\n    public focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /** Get the id of the inner input element of the toggle. */\n    get innerInputId(): string {\n        return `${this.id}-input`;\n    }\n\n    /** Get the isChecked property of the toggle. */\n    get isChecked() {\n        return this.checked;\n    }\n\n    /** Set the isChecked property of the toggle. */\n    set isChecked(value) {\n        this.checked = value;\n        this.onChange(value);\n        this.onTouched();\n        this.checkedChange.emit(value);\n    }\n\n    /**\n     * @hidden\n     * @param value Sets the value of the *checked* property of the toggle.\n     */\n    writeValue(value: any) {\n        this.checked = value;\n    }\n\n    /**\n     * @hidden\n     * @param fn User defined function that handles the *onChange* event of the toggle.\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n\n    /**\n     * @hidden\n     * @param fn User defined function that handles the *onTouch* event of the toggle.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * @hidden\n     * @param isDisabled Sets the value of the *disabled* property of the toggle.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToggleComponent } from './toggle.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    declarations: [ToggleComponent],\n    imports: [CommonModule, FormsModule],\n    exports: [ToggleComponent]\n})\nexport class ToggleModule {}\n","import { Directive, EmbeddedViewRef, HostBinding, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Directive which is used along with input elements, inside the localization editor item or main.\n *  ```html\n *  <fd-localization-editor-item>\n *      <input fd-localization-editor-input type=\"text\" placeholder=\"EN\">\n *  </fd-localization-editor-item>\n *  ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-input]'\n})\nexport class LocalizationEditorInputDirective {\n\n    /**\n     * @hidden\n     *  Variable is controlled by parent component and define if there should be used compact mode\n     * */\n    @HostBinding('class.fd-input--compact')\n    public compact: boolean;\n}\n\n/**\n * Directive which is used along with textarea elements, inside the localization editor item or main.\n *  ```html\n *  <fd-localization-editor-item>\n *      <textarea fd-localization-editor-input placeholder=\"EN\">\n *  </fd-localization-editor-item>\n *  ```\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-textarea]',\n})\nexport class LocalizationEditorTextareaDirective {\n\n    /**\n     * @hidden\n     *  Variable is controlled by parent component and define if there should be used compact mode\n     * */\n    @HostBinding('class.fd-input--compact')\n    public compact: boolean;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.fd-localization-editor-textarea')\n    public fdLocalizationEditorTextareaClass: boolean = true;\n}\n\n/**\n * Directive which is used to add complex content, which will be displayed in the add-on space.\n *  ```html\n *  <fd-localization-editor-item>\n *      <ng-template fd-localization-editor-label>\n *          <fd-icon [glyph]=\"field.glyph\"></fd-icon>\n *      </ng-template>\n *      <textarea fd-localization-editor-input placeholder=\"EN\">\n *  </fd-localization-editor-item>\n *  ```\n * */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-label]',\n})\nexport class LocalizationEditorLabel {}\n\n/**\n * Directive that is used to wrap whole localization field inside li element.\n *  ```html\n *  <li fd-localization-editor-element>\n *      <fd-localization-editor-item>\n *          <textarea fd-localization-editor-input placeholder=\"EN\">\n *      </fd-localization-editor-item>\n *  </li>\n *  ```\n * */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-element]',\n})\nexport class LocalizationEditorElement {}\n\n/**\n * Not for external use. Portal to render the complex title template.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[fd-localization-editor-load-label]'\n})\nexport class LocalizationEditorLoadLabel implements OnInit {\n    /** @hidden */\n    @Input('fd-localization-editor-load-label')\n    content: TemplateRef<any>;\n\n    /** @hidden */\n    private contentRef: EmbeddedViewRef<any>;\n\n    /** @hidden */\n    constructor(private viewRef: ViewContainerRef) {}\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.viewRef.clear();\n        this.contentRef = this.viewRef.createEmbeddedView(this.content);\n    }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    LocalizationEditorInputDirective,\n    LocalizationEditorLabel,\n    LocalizationEditorTextareaDirective\n} from '../localization-editor.directives';\n\n/**\n *  Component that represents field with add-on.\n *  ```html\n *  <fd-localization-editor-item [label]=\"'EN'\">\n *      <input fd-localization-editor-input type=\"text\" placeholder=\"EN\">\n *  </fd-localization-editor-item>\n *  ```\n */\n@Component({\n    selector: 'fd-localization-editor-item',\n    templateUrl: './localization-editor-item.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class LocalizationEditorItemComponent implements OnInit, AfterContentInit, OnChanges {\n\n    /** @hidden */\n    type: string;\n\n    /** The text for the add-on on the right side. */\n    @Input()\n    label: string;\n\n    /** Whether to apply compact mode to to field. */\n    @Input()\n    compact: boolean;\n\n    /** @hidden */\n    @ContentChild(LocalizationEditorInputDirective)\n    input: LocalizationEditorInputDirective;\n\n    /** @hidden */\n    @ContentChild(LocalizationEditorTextareaDirective)\n    textarea: LocalizationEditorTextareaDirective;\n\n    /** @hidden */\n    @ContentChild(LocalizationEditorLabel, { read: TemplateRef })\n    labelTemplate: TemplateRef<any>;\n\n    /** @hidden */\n    ngOnInit(): void {\n        this.refreshChildInput();\n    }\n\n    ngOnChanges(): void {\n        this.refreshChildInput();\n    }\n\n    ngAfterContentInit(): void {\n        if (this.textarea) {\n            this.type = 'textarea';\n        }\n    }\n\n    private refreshChildInput(): void {\n        if (this.input) {\n            this.input.compact = this.compact;\n        }\n        if (this.textarea) {\n            this.textarea.compact = this.compact;\n        }\n    }\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\nimport { LocalizationEditorItemComponent } from '../localization-editor-item/localization-editor-item.component';\n\n/**\n *  Component that represents the field which is always visible and is rendered outside the popover.\n *  ```html\n *  <fd-localization-editor-main [label]=\"'EN'\">\n *       <input fd-localization-editor-input type=\"text\" placeholder=\"EN\">\n *  </fd-localization-editor-main>\n *  ```\n */\n@Component({\n    selector: 'fd-localization-editor-main',\n    templateUrl: './localization-editor-main.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class LocalizationEditorMainComponent extends LocalizationEditorItemComponent {\n\n    /**\n     * @hidden\n     * This variable is controlled by parent component\n     * */\n    expanded: boolean;\n}\n","import { Component, ContentChild, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { Placement } from 'popper.js';\nimport { LocalizationEditorMainComponent } from './localization-editor-main/localization-editor-main.component';\n\n/**\n *  The component that represents a list of fields with add-ons inside popover\n *  ```html\n * <fd-localization-editor>\n *    <fd-localization-editor-main [label]=\"'EN'\">\n *       <input fd-localization-editor-input type=\"text\" placeholder=\"EN\">\n *    </fd-localization-editor-main>\n *    <fd-localization-editor-item [label]=\"'DE'\">\n *       <input fd-localization-editor-input type=\"text\" placeholder=\"DE\">\n *    </fd-localization-editor-item>\n * </fd-localization-editor>\n *  ```\n */\n@Component({\n    selector: 'fd-localization-editor',\n    templateUrl: './localization-editor.component.html',\n    styleUrls: ['localization-editor.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class LocalizationEditorComponent {\n\n    /** @hidden */\n    @HostBinding('class.fd-localization-editor')\n    fdLocalizationEditorClass: boolean = true;\n\n    /** @hidden */\n    @ContentChild(LocalizationEditorMainComponent)\n    mainElement: LocalizationEditorMainComponent;\n\n    /** The trigger events that will open/close the popover.\n     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp). */\n    @Input()\n    triggers: string[] = ['click'];\n\n    /** The placement of the popover. It can be one of: top, top-start, top-end, bottom,\n     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end. */\n    @Input()\n    placement: Placement;\n\n    /** Whether the popover is open. Can be used through two-way binding. */\n    @Input()\n    isOpen: boolean = false;\n\n    /** Whether the popover should close when a click is made outside its boundaries. */\n    @Input()\n    closeOnOutsideClick: boolean = true;\n\n    /** Whether the popover should close when the escape key is pressed. */\n    @Input()\n    closeOnEscapeKey: boolean = true;\n\n    /** Event emitted when the state of the isOpen property changes. */\n    @Output()\n    readonly isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Whether to disable opening. */\n    @Input()\n    disabled: boolean;\n\n    /** Whether the inputs are in compact mode. */\n    @Input()\n    compact: boolean = false;\n\n    /**\n     * Toggles the popover open state.\n     */\n    public toggle(): void {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Closes the popover.\n     */\n    public close(): void {\n        if (this.isOpen) {\n            this.isOpen = false;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Opens the popover.\n     */\n    public open(): void {\n        if (!this.isOpen) {\n            this.isOpen = true;\n            this.isOpenChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * @hidden\n     * Event handled always, when the popup is opened or closed.\n     */\n    public handleOpenChange(opened: boolean): void {\n        if (this.mainElement) {\n            this.mainElement.expanded = opened;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LocalizationEditorComponent } from './localization-editor.component';\nimport { PopoverModule } from '../popover/popover.module';\nimport { FormModule } from '../form/form.module';\nimport { InputGroupModule } from '../input-group/input-group.module';\nimport { MenuModule } from '../menu/menu.module';\nimport {\n    LocalizationEditorInputDirective,\n    LocalizationEditorLabel,\n    LocalizationEditorElement,\n    LocalizationEditorLoadLabel,\n    LocalizationEditorTextareaDirective\n} from './localization-editor.directives';\nimport { LocalizationEditorMainComponent } from './localization-editor-main/localization-editor-main.component';\nimport { LocalizationEditorItemComponent } from './localization-editor-item/localization-editor-item.component';\n\n@NgModule({\n    declarations: [\n        LocalizationEditorComponent,\n        LocalizationEditorMainComponent,\n        LocalizationEditorItemComponent,\n        LocalizationEditorInputDirective,\n        LocalizationEditorLabel,\n        LocalizationEditorLoadLabel,\n        LocalizationEditorTextareaDirective,\n        LocalizationEditorElement\n    ],\n    exports: [\n        LocalizationEditorComponent,\n        LocalizationEditorItemComponent,\n        LocalizationEditorMainComponent,\n        LocalizationEditorInputDirective,\n        LocalizationEditorLabel,\n        LocalizationEditorLoadLabel,\n        LocalizationEditorTextareaDirective,\n        LocalizationEditorElement\n    ],\n    imports: [CommonModule, PopoverModule, FormModule, InputGroupModule, MenuModule]\n})\nexport class LocalizationEditorModule {}\n","import { NgModule } from '@angular/core';\nimport { ActionBarModule } from './action-bar/action-bar.module';\nimport { AlertModule } from './alert/alert.module';\nimport { AlertService } from './alert/alert-service/alert.service';\nimport { BadgeLabelModule } from './badge-label/badge-label.module';\nimport { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { ButtonModule } from './button/button.module';\nimport { ButtonGroupModule } from './button-group/button-group.module';\nimport { CalendarModule } from './calendar/calendar.module';\nimport { ComboboxModule } from './combobox/combobox.module';\nimport { DatePickerModule } from './date-picker/date-picker.module';\nimport { DatetimePickerModule } from './datetime-picker/datetime-picker.module';\nimport { FileInputModule } from './file-input/file-input.module';\nimport { FormModule } from './form/form.module';\nimport { IconModule } from './icon/icon.module';\nimport { IdentifierModule } from './identifier/identifier.module';\nimport { ImageModule } from './image/image.module';\nimport { InfiniteScrollModule } from './infinite-scroll/infinite-scroll.module';\nimport { InlineHelpModule } from './inline-help/inline-help.module';\nimport { InputGroupModule } from './input-group/input-group.module';\nimport { ListModule } from './list/list.module';\nimport { LoadingSpinnerModule } from './loading-spinner/loading-spinner.module';\nimport { MenuModule } from './menu/menu.module';\nimport { ModalModule } from './modal/modal.module';\nimport { ModalService } from './modal/modal-service/modal.service';\nimport { MultiInputModule } from './multi-input/multi-input.module';\nimport { PaginationModule } from './pagination/pagination.module';\nimport { PanelModule } from './panel/panel.module';\nimport { PopoverModule } from './popover/popover.module';\nimport { ScrollSpyModule } from './scroll-spy/scroll-spy.module';\nimport { SearchInputModule } from './search-input/search-input.module';\nimport { ShellbarModule } from './shellbar/shellbar.module';\nimport { SideNavigationModule } from './side-navigation/side-navigation.module';\nimport { SelectModule } from './select/select.module';\nimport { SplitButtonModule } from './split-button/split-button.module';\nimport { TableModule } from './table/table.module';\nimport { TabsModule } from './tabs/tabs.module';\nimport { TileModule } from './tile/tile.module';\nimport { TreeModule } from './tree/tree.module';\nimport { TimeModule } from './time/time.module';\nimport { TimePickerModule } from './time-picker/time-picker.module';\nimport { ToggleModule } from './toggle/toggle.module';\nimport { TokenModule } from './token/token.module';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { LocalizationEditorModule } from './localizator-editor/localization-editor.module';\n\n@NgModule({\n    imports: [CommonModule, FormsModule],\n    exports: [\n        ActionBarModule,\n        AlertModule,\n        BadgeLabelModule,\n        BreadcrumbModule,\n        ButtonModule,\n        ButtonGroupModule,\n        CalendarModule,\n        ComboboxModule,\n        DatePickerModule,\n        DatetimePickerModule,\n        FileInputModule,\n        FormModule,\n        IconModule,\n        IdentifierModule,\n        ImageModule,\n        InlineHelpModule,\n        IdentifierModule,\n        InfiniteScrollModule,\n        InputGroupModule,\n        ListModule,\n        LoadingSpinnerModule,\n        LocalizationEditorModule,\n        MenuModule,\n        ModalModule,\n        MultiInputModule,\n        PaginationModule,\n        PanelModule,\n        PopoverModule,\n        ScrollSpyModule,\n        SearchInputModule,\n        SelectModule,\n        ShellbarModule,\n        SideNavigationModule,\n        SplitButtonModule,\n        TableModule,\n        TabsModule,\n        TileModule,\n        TimeModule,\n        TimePickerModule,\n        ToggleModule,\n        TokenModule,\n        TreeModule\n    ],\n    providers: [AlertService, ModalService],\n})\nexport class FundamentalNgxModule {}\n","/**\n * Represents the positioning of the modal on the screen.\n */\nexport class ModalPosition {\n\n    /** Value of the modal's top position. */\n    top?: string;\n\n\n    /** Value of the modal's bottom position. */\n    bottom?: string;\n\n\n    /** Value of the modal's left position. */\n    left?: string;\n\n    /** Value of the modal's right position. */\n    right?: string;\n}\n"],"names":["trigger"],"mappings":"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"}
