/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, ChangeDetectorRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Injector, Input, Output, Renderer2 } from '@angular/core';
import { PopoverContainer } from './popover-container';
import Popper from 'popper.js';
/**
 * Directive which manages the popper and popover components of the library.
 * It can be attached to any element. To bind it to a body, use the following syntax.
 * ```html
 * <div [fdPopover]="template">Control Element</div>
 * <ng-template #template>
 *     Popover Body
 * </ng-template>
 * ```
 */
export class PopoverDirective {
    /**
     * @hidden
     * @param {?} elRef
     * @param {?} cdRef
     * @param {?} resolver
     * @param {?} injector
     * @param {?} appRef
     * @param {?} renderer
     */
    constructor(elRef, cdRef, resolver, injector, appRef, renderer) {
        this.elRef = elRef;
        this.cdRef = cdRef;
        this.resolver = resolver;
        this.injector = injector;
        this.appRef = appRef;
        this.renderer = renderer;
        /**
         * Whether the popover is open. Can be used through two-way binding.
         */
        this.isOpen = false;
        /**
         * The trigger events that will open/close the popover.
         *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
         */
        this.triggers = ['click'];
        /**
         * Whether the popover should display the default arrow.
         */
        this.noArrow = true;
        /**
         * Whether the popover should be focusTrapped.
         */
        this.focusTrapped = false;
        /**
         * Whether the popover should close when the escape key is pressed.
         */
        this.closeOnEscapeKey = true;
        /**
         * Whether the popover is disabled.
         */
        this.disabled = false;
        /**
         * Whether the popover should close when a click is made outside its boundaries.
         */
        this.closeOnOutsideClick = true;
        /**
         * The element to which the popover should be appended.
         */
        this.appendTo = 'body';
        /**
         * The Popper.js options to attach to this popover.
         * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details.
         */
        this.options = {
            placement: 'bottom-start',
            modifiers: {
                preventOverflow: {
                    enabled: true,
                    escapeWithReference: true,
                    boundariesElement: 'scrollParent'
                }
            }
        };
        /**
         * Event emitted when the state of the isOpen property changes.
         */
        this.isOpenChange = new EventEmitter();
        this.eventRef = [];
        this.isSetup = false;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        if (this.isOpen) {
            this.open();
        }
        this.setupFillBehaviour();
        this.initPlacement();
        this.addTriggerListeners();
        this.isSetup = true;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        if (this.popper) {
            this.popper.destroy();
        }
        if (this.containerRef) {
            this.destroyContainer();
        }
        this.destroyTriggerListeners();
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.isSetup) {
            return;
        }
        if (changes.triggers) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.destroyTriggerListeners();
                this.addTriggerListeners();
            }));
        }
        if (changes.isOpen) {
            if (changes.isOpen.currentValue) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.isOpen = false;
                    this.open(false);
                }));
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.isOpen = true;
                    this.close(false);
                }));
            }
        }
        if (changes.placement) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.initPlacement();
            }));
        }
        if (changes.fillControl) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.setupFillBehaviour();
            }));
        }
    }
    /**
     * Toggles the popover open state.
     * @param {?=} fireEvent
     * @return {?}
     */
    toggle(fireEvent = true) {
        if (this.isOpen) {
            this.close(fireEvent);
        }
        else {
            this.open(fireEvent);
        }
    }
    /**
     * Opens the popover.
     * @param {?=} fireEvent
     * @return {?}
     */
    open(fireEvent = true) {
        if (!this.isOpen && !this.disabled) {
            this.createContainer();
            this._addListenerForOutsideClick();
            this.isOpen = true;
            if (fireEvent) {
                this.isOpenChange.emit(this.isOpen);
            }
        }
    }
    /**
     * Closes the popover.
     * @param {?=} fireEvent
     * @return {?}
     */
    close(fireEvent = true) {
        if (this.isOpen) {
            this.destroyContainer();
            this.isOpen = false;
            if (fireEvent) {
                this.isOpenChange.emit(this.isOpen);
            }
        }
    }
    /**
     * Forces an update of the popover's positioning calculation.
     * @return {?}
     */
    updatePopper() {
        if (this.popper) {
            this.popper.scheduleUpdate();
        }
    }
    /**
     * @private
     * @return {?}
     */
    createContainer() {
        if (this.containerRef) {
            return;
        }
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(PopoverContainer);
        this.containerRef = factory.create(this.injector);
        // Set instance properties
        this.containerRef.instance.context = this;
        this.containerRef.instance.content = this.content;
        this.containerRef.instance.focusTrapped = this.focusTrapped;
        this.containerRef.instance.noArrow = this.noArrow;
        this.containerRef.instance.closeOnEscapeKey = this.closeOnEscapeKey;
        this.appRef.attachView(this.containerRef.hostView);
        /** @type {?} */
        const setupRef = this.containerRef.instance.isSetup.subscribe((/**
         * @return {?}
         */
        () => {
            this.createPopper();
            setupRef.unsubscribe();
        }));
        /** @type {?} */
        const containerEl = (/** @type {?} */ (((/** @type {?} */ (this.containerRef.hostView))).rootNodes[0]));
        if (this.appendTo === 'body') {
            document.body.appendChild(containerEl);
        }
        else {
            this.appendTo.appendChild(containerEl);
        }
    }
    /**
     * @private
     * @return {?}
     */
    destroyTriggerListeners() {
        if (this.eventRef && this.eventRef.length > 0) {
            this.eventRef.forEach((/**
             * @param {?} event
             * @return {?}
             */
            event => {
                event();
            }));
            this.eventRef = [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    addTriggerListeners() {
        if (this.triggers && this.triggers.length > 0) {
            this.triggers.forEach((/**
             * @param {?} trigger
             * @return {?}
             */
            trigger => {
                this.eventRef.push(this.renderer.listen(this.elRef.nativeElement, trigger, (/**
                 * @return {?}
                 */
                () => {
                    this.toggle();
                })));
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    destroyContainer() {
        if (this.containerRef) {
            this.appRef.detachView(this.containerRef.hostView);
            this.containerRef.destroy();
            this.containerRef = null;
        }
        if (this.popper) {
            this.popper.destroy();
            this.popper = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    createPopper() {
        this.popper = new Popper((/** @type {?} */ (this.elRef.nativeElement)), (/** @type {?} */ (this.containerRef.location.nativeElement)), this.options);
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    fillReference(data) {
        data.offsets.popper.left = data.offsets.reference.left;
        data.offsets.popper.right = data.offsets.reference.right;
        data.offsets.popper.width = data.styles.width = data.offsets.reference.width;
        return data;
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    atLeastReference(data) {
        data.offsets.popper.left = data.offsets.reference.left;
        data.offsets.popper.right = data.offsets.reference.right;
        data.styles.minWidth = data.offsets.reference.width + 'px';
        return data;
    }
    /**
     * @private
     * @return {?}
     */
    initPlacement() {
        if (this.placement) {
            if (this.options) {
                this.options.placement = this.placement;
            }
            else {
                this.options = { placement: this.placement };
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    setupFillBehaviour() {
        if (this.fillControlMode) {
            if (this.options && this.options.modifiers) {
                this.options.modifiers.fillReference = {
                    enabled: true,
                    fn: this.fillControlMode === 'equal' ? this.fillReference : this.atLeastReference,
                    order: 840
                };
            }
            else {
                this.options = {
                    modifiers: {
                        fillReference: {
                            enabled: true,
                            fn: this.fillControlMode === 'equal' ? this.fillReference : this.atLeastReference,
                            order: 840
                        }
                    }
                };
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    _addListenerForOutsideClick() {
        if (!this._outsideClickEventReference) {
            this._outsideClickEventReference = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                if (this._shouldClose(event)) {
                    this.close();
                    event.preventDefault();
                    event.stopPropagation();
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    _shouldClose(event) {
        return this.containerRef &&
            this.isOpen &&
            this.closeOnOutsideClick &&
            event.target !== this.elRef.nativeElement &&
            !this.elRef.nativeElement.contains(event.target) &&
            !this.containerRef.location.nativeElement.contains(event.target);
    }
}
PopoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fdPopover]'
            },] }
];
/** @nocollapse */
PopoverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef },
    { type: Renderer2 }
];
PopoverDirective.propDecorators = {
    content: [{ type: Input, args: ['fdPopover',] }],
    isOpen: [{ type: Input }],
    triggers: [{ type: Input }],
    noArrow: [{ type: Input }],
    placement: [{ type: Input }],
    focusTrapped: [{ type: Input }],
    closeOnEscapeKey: [{ type: Input }],
    disabled: [{ type: Input }],
    closeOnOutsideClick: [{ type: Input }],
    appendTo: [{ type: Input }],
    options: [{ type: Input }],
    fillControlMode: [{ type: Input }],
    isOpenChange: [{ type: Output }]
};
if (false) {
    /**
     * Content of the popover. Used through the actual directive tag. Accepts strings or TemplateRefs.
     * @type {?}
     */
    PopoverDirective.prototype.content;
    /**
     * Whether the popover is open. Can be used through two-way binding.
     * @type {?}
     */
    PopoverDirective.prototype.isOpen;
    /**
     * The trigger events that will open/close the popover.
     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
     * @type {?}
     */
    PopoverDirective.prototype.triggers;
    /**
     * Whether the popover should display the default arrow.
     * @type {?}
     */
    PopoverDirective.prototype.noArrow;
    /**
     * The placement of the popover. It can be one of: top, top-start, top-end, bottom,
     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
     * @type {?}
     */
    PopoverDirective.prototype.placement;
    /**
     * Whether the popover should be focusTrapped.
     * @type {?}
     */
    PopoverDirective.prototype.focusTrapped;
    /**
     * Whether the popover should close when the escape key is pressed.
     * @type {?}
     */
    PopoverDirective.prototype.closeOnEscapeKey;
    /**
     * Whether the popover is disabled.
     * @type {?}
     */
    PopoverDirective.prototype.disabled;
    /**
     * Whether the popover should close when a click is made outside its boundaries.
     * @type {?}
     */
    PopoverDirective.prototype.closeOnOutsideClick;
    /**
     * The element to which the popover should be appended.
     * @type {?}
     */
    PopoverDirective.prototype.appendTo;
    /**
     * The Popper.js options to attach to this popover.
     * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details.
     * @type {?}
     */
    PopoverDirective.prototype.options;
    /**
     * Preset options for the popover body width.
     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
     * * `equal` will apply a width to the body equivalent to the width of the control.
     * * Leave blank for no effect.
     * @type {?}
     */
    PopoverDirective.prototype.fillControlMode;
    /**
     * Event emitted when the state of the isOpen property changes.
     * @type {?}
     */
    PopoverDirective.prototype.isOpenChange;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.containerRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.popper;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.eventRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.isSetup;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._outsideClickEventReference;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,