/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ViewEncapsulation, ContentChild } from '@angular/core';
import { PopoverDirective } from './popover-directive/popover.directive';
import { PopoverDropdownComponent } from './popover-dropdown/popover-dropdown.component';
/** @type {?} */
let popoverUniqueId = 0;
/**
 * The popover is a wrapping component that accepts a *control* as well as a *body*.
 * The control is what will trigger the opening of the actual popover, which is called the body.
 * By default, popovers are triggered by click. This can be customized through the *triggers* input.
 * PopoverComponent is an abstraction of PopoverDirective.
 */
export class PopoverComponent {
    constructor() {
        /**
         * Whether the popover should have an arrow.
         */
        this.noArrow = true;
        /**
         * Whether the popover is disabled.
         */
        this.disabled = false;
        /**
         * Whether the popover should be treated as a dropdown.
         */
        this.isDropdown = false;
        /**
         * The trigger events that will open/close the popover.
         *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
         */
        this.triggers = ['click'];
        /**
         * Whether the popover is open. Can be used through two-way binding.
         */
        this.isOpen = false;
        /**
         * The Popper.js options to attach to this popover.
         * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details.
         */
        this.options = {
            placement: 'bottom-start',
            modifiers: {
                preventOverflow: {
                    enabled: true,
                    escapeWithReference: true,
                    boundariesElement: 'scrollParent'
                }
            }
        };
        /**
         * Whether the popover should be focusTrapped.
         */
        this.focusTrapped = false;
        /**
         * Whether the popover should close when a click is made outside its boundaries.
         */
        this.closeOnOutsideClick = true;
        /**
         * Whether the popover should close when the escape key is pressed.
         */
        this.closeOnEscapeKey = true;
        /**
         * Event emitted when the state of the isOpen property changes.
         */
        this.isOpenChange = new EventEmitter();
        /**
         * Id of the popover. If none is provided, one will be generated.
         */
        this.id = 'fd-popover-' + popoverUniqueId++;
    }
    /**
     * Toggles the popover open state.
     * @return {?}
     */
    toggle() {
        if (this.isOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * Closes the popover.
     * @return {?}
     */
    close() {
        if (this.isOpen) {
            this.isOpen = false;
            this.isOpenChange.emit(this.isOpen);
        }
    }
    /**
     * Opens the popover.
     * @return {?}
     */
    open() {
        if (!this.isOpen) {
            this.isOpen = true;
            this.isOpenChange.emit(this.isOpen);
        }
    }
    /**
     * Forces an update of the popover's positioning calculation.
     * @return {?}
     */
    updatePopover() {
        this.directiveRef.updatePopper();
    }
    /**
     * Function is called every time popover changes open attribute
     * @param {?} isOpen
     * @return {?}
     */
    openChanged(isOpen) {
        this.isOpenChange.emit(isOpen);
        this.updateDropdownIsOpen(isOpen);
    }
    /**
     * @hidden
     *  Function that allows us to control aria-expanded on dropdown child
     *
     * @private
     * @param {?} isOpen
     * @return {?}
     */
    updateDropdownIsOpen(isOpen) {
        if (this.dropdownComponent) {
            this.dropdownComponent.isOpen = isOpen;
        }
    }
}
PopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-popover',
                template: "<div #popoverContainer>\n    <div class=\"fd-popover__control\"\n         [attr.aria-expanded]=\"this.disabled ? false : isOpen\"\n         [attr.aria-disabled]=\"this.disabled\"\n         aria-haspopup=\"true\"\n         [fdPopover]=\"popoverBody\"\n         [(isOpen)]=\"isOpen\"\n         (isOpenChange)=\"openChanged($event)\"\n         [noArrow]=\"noArrow\"\n         [disabled]=\"disabled\"\n         [triggers]=\"triggers\"\n         [placement]=\"placement\"\n         [focusTrapped]=\"focusTrapped\"\n         [options]=\"options\"\n         [fillControlMode]=\"fillControlMode\"\n         [closeOnOutsideClick]=\"closeOnOutsideClick\"\n         [closeOnEscapeKey]=\"closeOnEscapeKey\"\n         [appendTo]=\"(appendTo ? appendTo : popoverContainer)\">\n        <ng-content select=\"fd-popover-control\"></ng-content>\n        <ng-content select=\"fd-dropdown-control\"></ng-content>\n    </div>\n    <ng-template #popoverBody>\n        <ng-container *ngTemplateOutlet=\"popoverBodyTpl\"></ng-container>\n    </ng-template>\n</div>\n\n<ng-template #popoverBodyTpl>\n    <div [attr.aria-hidden]=\"disabled ? true : !isOpen\">\n        <ng-content select=\"fd-popover-body\"></ng-content>\n    </div>\n</ng-template>\n",
                host: {
                    '[class.fd-popover-custom]': 'true',
                    '[attr.id]': 'id'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".fd-popover-custom{margin-right:0;display:inline-block}.fd-popover-custom .fd-dropdown{position:static}"]
            }] }
];
PopoverComponent.propDecorators = {
    directiveRef: [{ type: ViewChild, args: [PopoverDirective,] }],
    dropdownComponent: [{ type: ContentChild, args: [PopoverDropdownComponent,] }],
    noArrow: [{ type: Input }],
    disabled: [{ type: Input }],
    isDropdown: [{ type: Input }],
    appendTo: [{ type: Input }],
    triggers: [{ type: Input }],
    placement: [{ type: Input }],
    isOpen: [{ type: Input }],
    options: [{ type: Input }],
    focusTrapped: [{ type: Input }],
    fillControlMode: [{ type: Input }],
    closeOnOutsideClick: [{ type: Input }],
    closeOnEscapeKey: [{ type: Input }],
    isOpenChange: [{ type: Output }],
    id: [{ type: Input }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    PopoverComponent.prototype.directiveRef;
    /**
     * @hidden
     * @type {?}
     */
    PopoverComponent.prototype.dropdownComponent;
    /**
     * Whether the popover should have an arrow.
     * @type {?}
     */
    PopoverComponent.prototype.noArrow;
    /**
     * Whether the popover is disabled.
     * @type {?}
     */
    PopoverComponent.prototype.disabled;
    /**
     * Whether the popover should be treated as a dropdown.
     * @type {?}
     */
    PopoverComponent.prototype.isDropdown;
    /**
     * The element to which the popover should be appended.
     * @type {?}
     */
    PopoverComponent.prototype.appendTo;
    /**
     * The trigger events that will open/close the popover.
     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
     * @type {?}
     */
    PopoverComponent.prototype.triggers;
    /**
     * The placement of the popover. It can be one of: top, top-start, top-end, bottom,
     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
     * @type {?}
     */
    PopoverComponent.prototype.placement;
    /**
     * Whether the popover is open. Can be used through two-way binding.
     * @type {?}
     */
    PopoverComponent.prototype.isOpen;
    /**
     * The Popper.js options to attach to this popover.
     * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details.
     * @type {?}
     */
    PopoverComponent.prototype.options;
    /**
     * Whether the popover should be focusTrapped.
     * @type {?}
     */
    PopoverComponent.prototype.focusTrapped;
    /**
     * Preset options for the popover body width.
     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
     * * `equal` will apply a width to the body equivalent to the width of the control.
     * * Leave blank for no effect.
     * @type {?}
     */
    PopoverComponent.prototype.fillControlMode;
    /**
     * Whether the popover should close when a click is made outside its boundaries.
     * @type {?}
     */
    PopoverComponent.prototype.closeOnOutsideClick;
    /**
     * Whether the popover should close when the escape key is pressed.
     * @type {?}
     */
    PopoverComponent.prototype.closeOnEscapeKey;
    /**
     * Event emitted when the state of the isOpen property changes.
     * @type {?}
     */
    PopoverComponent.prototype.isOpenChange;
    /**
     * Id of the popover. If none is provided, one will be generated.
     * @type {?}
     */
    PopoverComponent.prototype.id;
}
//# sourceMappingURL=data:application/json;base64,