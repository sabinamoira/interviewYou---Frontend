/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { PaginationService } from './pagination.service';
/**
 * The component that is used to provide navigation between paged information.
 * ```html
 * <fd-pagination
 *          [totalItems]="50"
 *          [itemsPerPage]="10"
 *          [currentPage]="3">
 * </fd-pagination>
 * ```
 */
export class PaginationComponent {
    /**
     * @hidden
     * @param {?} paginationService
     */
    constructor(paginationService) {
        this.paginationService = paginationService;
        /**
         * Whether to display the total number of items.
         */
        this.displayTotalItems = true;
        /**
         * The text appended to the total number of items.
         * The default text is set to 'items'
         */
        this.displayText = 'items';
        /**
         * Label for the 'previous' page button.
         */
        this.previousLabel = 'Previous';
        /**
         * Label for the 'next' page button.
         */
        this.nextLabel = 'Next';
        /**
         * Event fired when the page is changed.
         */
        this.pageChangeStart = new EventEmitter();
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes && changes.currentPage) {
            this.currentPage = changes.currentPage.currentValue;
        }
        this.pages = this.paginationService.getPages(this.getPaginationObject());
        /** @type {?} */
        const totalPages = this.paginationService.getTotalPages(this.getPaginationObject());
        if (!this.currentPage || this.currentPage < 1) {
            this.currentPage = 1;
        }
        else if (this.currentPage > totalPages) {
            this.currentPage = totalPages;
        }
    }
    /**
     * Checks if the current page is the last page.
     * @return {?}
     */
    isLastPage() {
        return this.currentPage === this.paginationService.getTotalPages(this.getPaginationObject());
    }
    /**
     * Navigates to a specific page when the user presses 'Space' or 'Enter' key.
     * @param {?} page The number of the page.
     * @param {?} $event The keyboard event.
     * @return {?}
     */
    onKeypressHandler(page, $event) {
        if ($event.code === 'Space' || $event.code === 'Enter') {
            $event.preventDefault();
            this.goToPage(page);
        }
    }
    /**
     * Navigates to a specific page.
     * @param {?} page The number of the page to navigate to.
     * @param {?=} $event The mouse event (optional).
     * @return {?}
     */
    goToPage(page, $event) {
        if ($event) {
            $event.preventDefault();
        }
        if (page > this.paginationService.getTotalPages(this.getPaginationObject()) || page < 1) {
            return;
        }
        this.pages = this.paginationService.getPages(this.getPaginationObject());
        this.pageChangeStart.emit(page);
    }
    /**
     * Retrieves an object that represents
     * the total number of items, the current page, and the number of items per page.
     * @return {?}
     */
    getPaginationObject() {
        /** @type {?} */
        const retVal = {
            totalItems: this.totalItems,
            currentPage: this.currentPage,
            itemsPerPage: this.itemsPerPage
        };
        return retVal;
    }
}
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-pagination',
                template: "<span class=\"fd-pagination__total\" *ngIf=\"displayTotalItems && totalItems\">{{ totalItems }} {{displayText}}</span>\n<nav class=\"fd-pagination__nav\" *ngIf=\"totalItems && totalItems >= itemsPerPage\">\n    <a class=\"fd-pagination__link fd-pagination__link--previous\"\n       tabindex=\"0\"\n       role=\"button\"\n       [attr.aria-label]=\"previousLabel\"\n       [attr.aria-disabled]=\"currentPage === 1 ? true : null\"\n       (keypress)=\"onKeypressHandler(currentPage - 1, $event)\"\n       (click)=\"goToPage(currentPage - 1)\">\n    </a>\n    <ng-container *ngFor=\"let page of pages\">\n        <a class=\"fd-pagination__link\"\n           tabindex=\"0\"\n           role=\"button\"\n           (keypress)=\"onKeypressHandler(page, $event)\"\n           (click)=\"goToPage(page, $event)\"\n           *ngIf=\"page !== -1; else more\"\n           [attr.aria-selected]=\"currentPage === page\">{{page}}</a>\n        <ng-template #more>\n            <span class=\"fd-pagination__link fd-pagination__link--more\"\n                  aria-hidden=\"true\"\n                  aria-label=\"...\"\n                  role=\"presentation\"></span>\n        </ng-template>\n    </ng-container>\n    <a class=\"fd-pagination__link fd-pagination__link--next\"\n       [attr.aria-label]=\"nextLabel\"\n       tabindex=\"0\"\n       role=\"button\"\n       [attr.aria-disabled]=\"isLastPage()\"\n       (keypress)=\"onKeypressHandler(currentPage + 1, $event)\"\n       (click)=\"goToPage(currentPage + 1)\">\n    </a>\n</nav>\n",
                providers: [PaginationService],
                host: {
                    class: 'fd-pagination'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [`
        .fd-pagination a {
            cursor: pointer;
        }
    `]
            }] }
];
/** @nocollapse */
PaginationComponent.ctorParameters = () => [
    { type: PaginationService }
];
PaginationComponent.propDecorators = {
    totalItems: [{ type: Input }],
    currentPage: [{ type: Input }],
    itemsPerPage: [{ type: Input }],
    displayTotalItems: [{ type: Input }],
    displayText: [{ type: Input }],
    previousLabel: [{ type: Input }],
    nextLabel: [{ type: Input }],
    pageChangeStart: [{ type: Output }]
};
if (false) {
    /**
     * Represents the total number of items.
     * @type {?}
     */
    PaginationComponent.prototype.totalItems;
    /**
     * Represents the current page number.
     * @type {?}
     */
    PaginationComponent.prototype.currentPage;
    /**
     * Represents the number of items per page.
     * @type {?}
     */
    PaginationComponent.prototype.itemsPerPage;
    /**
     * Whether to display the total number of items.
     * @type {?}
     */
    PaginationComponent.prototype.displayTotalItems;
    /**
     * The text appended to the total number of items.
     * The default text is set to 'items'
     * @type {?}
     */
    PaginationComponent.prototype.displayText;
    /**
     * Label for the 'previous' page button.
     * @type {?}
     */
    PaginationComponent.prototype.previousLabel;
    /**
     * Label for the 'next' page button.
     * @type {?}
     */
    PaginationComponent.prototype.nextLabel;
    /**
     * Event fired when the page is changed.
     * @type {?}
     */
    PaginationComponent.prototype.pageChangeStart;
    /**
     * @hidden
     * @type {?}
     */
    PaginationComponent.prototype.pages;
    /**
     * @type {?}
     * @private
     */
    PaginationComponent.prototype.paginationService;
}
//# sourceMappingURL=data:application/json;base64,