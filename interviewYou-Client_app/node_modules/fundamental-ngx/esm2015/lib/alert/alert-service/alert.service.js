/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Injectable, ApplicationRef, Injector } from '@angular/core';
import { AlertComponent } from '../alert.component';
import { AlertContainerComponent } from '../alert-utils/alert-container.component';
import { AlertConfig } from '../alert-utils/alert-config';
import { AlertInjector } from '../alert-utils/alert-injector';
import { AlertRef } from '../alert-utils/alert-ref';
/**
 * Service used to dynamically generate an alert as an overlay.
 */
export class AlertService {
    /**
     * @hidden
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     */
    constructor(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.alerts = [];
    }
    /**
     * Returns true if there are some alerts currently open. False otherwise.
     * @return {?}
     */
    hasOpenAlerts() {
        return this.alerts && this.alerts.length > 0;
    }
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or String.
     * @param {?} content Content of the alert component.
     * @param {?=} alertConfig Configuration of the alert component.
     * @return {?}
     */
    open(content, alertConfig = new AlertConfig()) {
        // If empty or undefined alert array, create container
        if (!this.alerts || this.alerts.length === 0) {
            this.openAlertContainer();
        }
        // Get default values from alert model
        alertConfig = Object.assign(new AlertConfig(), alertConfig);
        // Config setup
        /** @type {?} */
        const configMap = new WeakMap();
        /** @type {?} */
        const alertRef = new AlertRef();
        alertRef.data = (alertConfig ? alertConfig.data : undefined);
        configMap.set(AlertRef, alertRef);
        // Prepare new component
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent);
        /** @type {?} */
        const componentRef = componentFactory.create(new AlertInjector(this.injector, configMap));
        componentRef.location.nativeElement.style.marginTop = '10px';
        this.appRef.attachView(componentRef.hostView);
        // Subscription to close alert from ref
        /** @type {?} */
        const refSub = alertRef.afterDismissed.subscribe((/**
         * @return {?}
         */
        () => {
            this.destroyAlertComponent(componentRef);
            refSub.unsubscribe();
        }));
        // Prepare component data items
        /** @type {?} */
        const configObj = Object.assign({}, alertConfig);
        Object.keys(configObj).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (key !== 'data') {
                componentRef.instance[key] = configObj[key];
            }
        }));
        componentRef.instance.childComponentType = content;
        // Render new component
        /** @type {?} */
        const domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));
        this.alertContainerRef.location.nativeElement.appendChild(domElem);
        // Log new component
        this.alerts.push(componentRef);
        return alertRef;
    }
    /**
     * Dismisses all service-opened alerts.
     * @return {?}
     */
    dismissAll() {
        this.alerts.forEach((/**
         * @param {?} ref
         * @return {?}
         */
        ref => {
            this.destroyAlertComponent(ref);
        }));
    }
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    destroyAlertComponent(alert) {
        this.alerts[this.alerts.indexOf(alert)] = null;
        this.alerts = this.alerts.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item !== null && item !== undefined));
        this.appRef.detachView(alert.hostView);
        alert.destroy();
        if (this.alertContainerRef && (!this.alerts || this.alerts.length === 0)) {
            this.destroyAlertContainer();
        }
    }
    /**
     * @private
     * @return {?}
     */
    openAlertContainer() {
        /** @type {?} */
        const factory = this.componentFactoryResolver.resolveComponentFactory(AlertContainerComponent);
        /** @type {?} */
        const componentRef = factory.create(this.injector);
        this.appRef.attachView(componentRef.hostView);
        /** @type {?} */
        const domElement = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));
        document.body.appendChild(domElement);
        this.alertContainerRef = componentRef;
    }
    /**
     * @private
     * @return {?}
     */
    destroyAlertContainer() {
        this.appRef.detachView(this.alertContainerRef.hostView);
        this.alertContainerRef.destroy();
        this.alertContainerRef = undefined;
    }
}
AlertService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AlertService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.alerts;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.alertContainerRef;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,