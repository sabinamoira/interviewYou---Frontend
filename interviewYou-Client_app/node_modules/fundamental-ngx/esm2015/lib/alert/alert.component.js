/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, ChangeDetectorRef, ViewChild, ComponentFactoryResolver, Type, ViewContainerRef, TemplateRef, Optional, Output, EventEmitter, ViewEncapsulation, HostListener } from '@angular/core';
import { AlertRef } from './alert-utils/alert-ref';
import { alertFadeNgIf } from './alert-utils/alert-animations';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
/** @type {?} */
let alertUniqueId = 0;
/**
 * The component that represents an alert. It can be only be used inline.
 * If the AlertService is used, this component is auto-generated.
 */
export class AlertComponent extends AbstractFdNgxClass {
    /**
     * @hidden
     * @param {?} elRef
     * @param {?} cdRef
     * @param {?} componentFactoryResolver
     * @param {?} alertRef
     */
    constructor(elRef, cdRef, componentFactoryResolver, alertRef) {
        super(elRef);
        this.elRef = elRef;
        this.cdRef = cdRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.alertRef = alertRef;
        /**
         * Whether the alert is dismissible.
         */
        this.dismissible = true;
        /**
         * Id for the alert component. If omitted, a unique one is generated.
         */
        this.id = 'fd-alert-' + alertUniqueId++;
        /**
         * Duration of time *in milliseconds* that the alert will be visible. Set to -1 for indefinite.
         */
        this.duration = 10000;
        /**
         * Whether the alert should stay open if the mouse is hovering over it.
         */
        this.mousePersist = false;
        /**
         * Id of the element that labels the alert.
         */
        this.ariaLabelledBy = null;
        /**
         * Aria label for the alert component element.
         */
        this.ariaLabel = null;
        /**
         * Aria label for the dismiss button.
         */
        this.dismissLabel = 'Dismiss';
        /**
         * Event fired when the alert is dismissed.
         */
        this.onDismiss = new EventEmitter();
        /**
         * @hidden
         */
        this.mouseInAlert = false;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        if (this.alertRef) {
            this.open();
        }
        this._setProperties();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.childComponentType) {
            if (this.childComponentType instanceof Type) {
                this.loadFromComponent(this.childComponentType);
            }
            else if (this.childComponentType instanceof TemplateRef) {
                this.loadFromTemplate(this.childComponentType);
            }
            else {
                this.loadFromString(this.childComponentType);
            }
            this.cdRef.detectChanges();
        }
    }
    /**
     * Dismisses the alert. If the alert was generated via the AlertService, it is removed from the DOM.
     * Otherwise, it sets the display value to none. Fires the onDismiss event.
     *
     * @param {?=} reason Data to pass back to the calling component. Only usable if alert is opened using the Service.
     *
     * @param {?=} manualDismiss Set to true to skip the dismiss animation.
     * @return {?}
     */
    dismiss(reason, manualDismiss = false) {
        if (manualDismiss) {
            this.elRef.nativeElement.classList.add('fd-has-display-none');
            this.elRef.nativeElement.classList.remove('fd-has-display-block');
        }
        if (this.alertRef) {
            this.alertRef.dismiss(reason);
        }
        else {
            this.elRef.nativeElement.classList.add('fd-has-display-none');
            this.elRef.nativeElement.classList.remove('fd-has-display-block');
        }
        this.onDismiss.emit();
    }
    /**
     * Opens the alert.
     * @return {?}
     */
    open() {
        if (!this.alertRef) {
            if (this.elRef.nativeElement.style.display === 'block') {
                return;
            }
            this.elRef.nativeElement.classList.remove('fd-has-display-none');
            this.elRef.nativeElement.classList.add('fd-has-display-block');
        }
        if (this.duration >= 0) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.mousePersist) {
                    /** @type {?} */
                    const wait = (/**
                     * @return {?}
                     */
                    () => {
                        if (this.mouseInAlert === true) {
                            setTimeout(wait, 500);
                        }
                        else {
                            this.dismiss();
                        }
                    });
                    wait();
                }
                else {
                    this.dismiss();
                }
            }), this.duration);
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    handleAlertMouseEvent(event) {
        if (event.type === 'mouseenter') {
            this.mouseInAlert = true;
        }
        else if (event.type === 'mouseleave') {
            this.mouseInAlert = false;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    _setProperties() {
        this._addClassToElement('fd-alert');
        if (this.type) {
            this._addClassToElement('fd-alert--' + this.type);
        }
        if (this.dismissible) {
            this._addClassToElement('fd-alert--dismissible');
        }
    }
    /**
     * @private
     * @param {?} template
     * @return {?}
     */
    loadFromTemplate(template) {
        /** @type {?} */
        const context = {
            $implicit: this.alertRef
        };
        this.componentRef = this.containerRef.createEmbeddedView(template, context);
    }
    /**
     * @private
     * @param {?} componentType
     * @return {?}
     */
    loadFromComponent(componentType) {
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.containerRef.clear();
        this.componentRef = this.containerRef.createComponent(componentFactory);
    }
    /**
     * @private
     * @param {?} contentString
     * @return {?}
     */
    loadFromString(contentString) {
        this.containerRef.clear();
        this.message = contentString;
    }
}
AlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-alert',
                template: "<button class=\"fd-alert__close\"\n        *ngIf=\"dismissible\"\n        (click)=\"dismiss(undefined, true)\"\n        [attr.aria-controls]=\"id\"\n        [attr.aria-label]=\"dismissLabel\">\n</button>\n<ng-container #container>{{message}}</ng-container>\n<ng-content></ng-content>\n",
                host: {
                    '[attr.aria-labelledby]': 'ariaLabelledBy',
                    '[attr.aria-label]': 'ariaLabel',
                    '[style.width]': 'width',
                    '[style.min-width]': 'minWidth',
                    'role': 'alert',
                    '[attr.id]': 'id',
                    '[@fadeAlertNgIf]': ''
                },
                animations: [
                    alertFadeNgIf
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".fd-alert{display:block}"]
            }] }
];
/** @nocollapse */
AlertComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: AlertRef, decorators: [{ type: Optional }] }
];
AlertComponent.propDecorators = {
    containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    dismissible: [{ type: Input }],
    type: [{ type: Input }],
    id: [{ type: Input }],
    duration: [{ type: Input }],
    mousePersist: [{ type: Input }],
    ariaLabelledBy: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    dismissLabel: [{ type: Input }],
    width: [{ type: Input }],
    minWidth: [{ type: Input }],
    message: [{ type: Input }],
    onDismiss: [{ type: Output }],
    handleAlertMouseEvent: [{ type: HostListener, args: ['mouseenter', ['$event'],] }, { type: HostListener, args: ['mouseleave', ['$event'],] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    AlertComponent.prototype.containerRef;
    /**
     * Whether the alert is dismissible.
     * @type {?}
     */
    AlertComponent.prototype.dismissible;
    /**
     * The type of the alert. Can be one of *warning*, *success*, *information*, *error* or null.
     * @type {?}
     */
    AlertComponent.prototype.type;
    /**
     * Id for the alert component. If omitted, a unique one is generated.
     * @type {?}
     */
    AlertComponent.prototype.id;
    /**
     * Duration of time *in milliseconds* that the alert will be visible. Set to -1 for indefinite.
     * @type {?}
     */
    AlertComponent.prototype.duration;
    /**
     * Whether the alert should stay open if the mouse is hovering over it.
     * @type {?}
     */
    AlertComponent.prototype.mousePersist;
    /**
     * Id of the element that labels the alert.
     * @type {?}
     */
    AlertComponent.prototype.ariaLabelledBy;
    /**
     * Aria label for the alert component element.
     * @type {?}
     */
    AlertComponent.prototype.ariaLabel;
    /**
     * Aria label for the dismiss button.
     * @type {?}
     */
    AlertComponent.prototype.dismissLabel;
    /**
     * Width of the alert.
     * @type {?}
     */
    AlertComponent.prototype.width;
    /**
     * Minimum width of the alert.
     * @type {?}
     */
    AlertComponent.prototype.minWidth;
    /**
     * Alternative way of passing in a message to the alert.
     * @type {?}
     */
    AlertComponent.prototype.message;
    /**
     * Event fired when the alert is dismissed.
     * @type {?}
     */
    AlertComponent.prototype.onDismiss;
    /**
     * @hidden
     * @type {?}
     */
    AlertComponent.prototype.mouseInAlert;
    /**
     * @hidden
     * @type {?}
     */
    AlertComponent.prototype.componentRef;
    /**
     * @hidden
     * @type {?}
     */
    AlertComponent.prototype.childComponentType;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.alertRef;
}
//# sourceMappingURL=data:application/json;base64,