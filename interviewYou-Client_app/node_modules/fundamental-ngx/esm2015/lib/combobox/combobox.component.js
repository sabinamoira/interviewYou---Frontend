/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, QueryList, TemplateRef, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MenuItemDirective } from '../menu/menu-item.directive';
import { MenuKeyboardService } from '../menu/menu-keyboard.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * Allows users to filter through results and select a value.
 *
 * Supports Angular Forms.
 */
export class ComboboxComponent {
    /**
     * @param {?} menuKeyboardService
     */
    constructor(menuKeyboardService) {
        this.menuKeyboardService = menuKeyboardService;
        /**
         * Values to be filtered in the search input.
         */
        this.dropdownValues = [];
        /**
         * Filter function. Accepts an array of objects and a search term as arguments
         * and returns a string. See search input examples for details.
         */
        this.filterFn = this.defaultFilter;
        /**
         * Icon to display in the right-side button.
         */
        this.glyph = 'navigation-down-arrow';
        /**
         * Max height of the popover. Any overflowing elements will be accessible through scrolling.
         */
        this.maxHeight = '200px';
        /**
         * Whether the search input should be displayed in compact mode.
         */
        this.compact = false;
        /**
         * Whether the matching string should be highlighted during filtration.
         */
        this.highlighting = true;
        /**
         * Whether the popover should close when a user selects a result.
         */
        this.closeOnSelect = true;
        /**
         * Whether the input field should be populated with the result picked by the user.
         */
        this.fillOnSelect = true;
        /**
         * Display function. Accepts an object of the same type as the
         * items passed to dropdownValues as argument, and outputs a string.
         * An arrow function can be used to access the *this* keyword in the calling component.
         * See search input examples for details.
         */
        this.displayFn = this.defaultDisplay;
        /**
         * Event emitted when an item is clicked. Use *$event* to retrieve it.
         */
        this.itemClicked = new EventEmitter();
        /**
         * @hidden
         */
        this.displayedValues = [];
        /**
         * @hidden
         */
        this.isOpen = false;
        /**
         * @hidden
         */
        this.onDestroy$ = new Subject();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        () => { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        if (this.dropdownValues) {
            this.displayedValues = this.dropdownValues;
        }
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {
            if (this.inputText) {
                this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);
            }
            else {
                this.displayedValues = this.dropdownValues;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        this.menuKeyboardService.itemClicked
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} index
         * @return {?}
         */
        index => this.onMenuClickHandler(index)));
        this.menuKeyboardService.focusEscapeBeforeList = (/**
         * @return {?}
         */
        () => this.searchInputElement.nativeElement.focus());
        this.menuKeyboardService.focusEscapeAfterList = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onInputKeydownHandler(event) {
        if (event.code === 'Enter' && this.searchFunction) {
            this.searchFunction();
        }
        else if (event.code === 'ArrowDown') {
            event.preventDefault();
            if (this.menuItems && this.menuItems.first) {
                this.menuItems.first.focus();
            }
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    onInputKeyupHandler() {
        if (this.inputText && this.inputText.length) {
            this.isOpen = true;
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    onMenuKeydownHandler(event, index) {
        this.menuKeyboardService.keyDownHandler(event, index, this.menuItems.toArray());
    }
    /**
     * @hidden
     * @param {?} index
     * @return {?}
     */
    onMenuClickHandler(index) {
        /** @type {?} */
        const selectedItem = this.displayedValues[index];
        if (selectedItem) {
            this.handleClickActions(selectedItem);
            this.itemClicked.emit({ item: selectedItem, index: index });
        }
    }
    /**
     * Get the input text of the input.
     * @return {?}
     */
    get inputText() {
        return this.inputTextValue;
    }
    /**
     * Set the input text of the input.
     * @param {?} value
     * @return {?}
     */
    set inputText(value) {
        this.inputTextValue = value;
        this.onChange(value);
        this.onTouched();
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.inputTextValue = value;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @hidden
     * @return {?}
     */
    handleSearchTermChange() {
        this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);
    }
    /**
     * @hidden
     * @return {?}
     */
    onPrimaryButtonClick() {
        if (this.searchFunction) {
            this.searchFunction();
        }
    }
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    defaultDisplay(str) {
        return str;
    }
    /**
     * @private
     * @param {?} contentArray
     * @param {?} searchTerm
     * @return {?}
     */
    defaultFilter(contentArray, searchTerm) {
        /** @type {?} */
        const searchLower = searchTerm.toLocaleLowerCase();
        return contentArray.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item) {
                return this.displayFn(item).toLocaleLowerCase().includes(searchLower);
            }
        }));
    }
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    handleClickActions(term) {
        if (this.closeOnSelect) {
            this.isOpen = false;
        }
        if (this.fillOnSelect) {
            this.inputText = this.displayFn(term);
            this.handleSearchTermChange();
        }
    }
}
ComboboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-combobox',
                template: "<fd-popover [(isOpen)]=\"isOpen\"\n            [fillControlMode]=\"'at-least'\"\n            [disabled]=\"disabled\"\n            class=\"fd-combobox-popover-custom\"\n            [ngClass]=\"{'fd-popover-body--display-none': displayedValues && !displayedValues.length}\">\n    <fd-popover-control>\n        <div class=\"fd-combobox-control\">\n            <div class=\"fd-input-group fd-input-group--after\" [ngClass]=\"{'fd-input-group--compact': compact}\">\n                <input #searchInputElement type=\"text\" class=\"fd-input\" [ngClass]=\"{'fd-input--compact': compact}\"\n                       (keydown)=\"onInputKeydownHandler($event)\"\n                       (keyup)=\"onInputKeyupHandler()\"\n                       [disabled]=\"disabled\"\n                       [(ngModel)]=\"inputText\"\n                       (ngModelChange)=\"handleSearchTermChange()\"\n                       placeholder=\"{{placeholder}}\">\n                <span class=\"fd-input-group__addon fd-input-group__addon--after fd-input-group__addon--button\">\n                    <button fd-button\n                            tabindex=\"-1\"\n                            type=\"button\"\n                            [fdType]=\"'light'\"\n                            [glyph]=\"glyph\"\n                            [disabled]=\"disabled\"\n                            (click)=\"onPrimaryButtonClick()\">\n                    </button>\n                </span>\n            </div>\n        </div>\n    </fd-popover-control>\n    <fd-popover-body *ngIf=\"displayedValues && displayedValues.length\">\n        <fd-menu class=\"fd-combobox-input-menu-overflow\"\n                 [style.maxHeight]=\"maxHeight\">\n            <ng-content></ng-content>\n            <ul fd-menu-list>\n                <li *ngFor=\"let term of displayedValues; let index = index;\"\n                    (click)=\"onMenuClickHandler(index)\"\n                    (keydown)=\"onMenuKeydownHandler($event, index)\"\n                    fd-menu-item\n                    tabindex=\"0\">\n                    <span *ngIf=\"!itemTemplate\"\n                          [innerHTML]=\"term | displayFnPipe:displayFn | highlight:inputText:highlighting\"\n                    ></span>\n                    <ng-container *ngIf=\"itemTemplate\">\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: term}\"></ng-container>\n                    </ng-container>\n                </li>\n            </ul>\n        </fd-menu>\n    </fd-popover-body>\n</fd-popover>\n\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ComboboxComponent)),
                        multi: true
                    },
                    MenuKeyboardService
                ],
                host: {
                    '[class.fd-combobox-custom-class]': 'true',
                    '[class.fd-combobox-input]': 'true'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".fd-combobox-custom-class,.fd-combobox-custom-class .fd-combobox-popover-custom{display:block}.fd-combobox-custom-class .fd-combobox-input-menu-overflow{overflow:auto}"]
            }] }
];
/** @nocollapse */
ComboboxComponent.ctorParameters = () => [
    { type: MenuKeyboardService }
];
ComboboxComponent.propDecorators = {
    dropdownValues: [{ type: Input }],
    filterFn: [{ type: Input }],
    disabled: [{ type: Input }],
    placeholder: [{ type: Input }],
    glyph: [{ type: Input }],
    itemTemplate: [{ type: Input }],
    maxHeight: [{ type: Input }],
    searchFunction: [{ type: Input }],
    compact: [{ type: Input }],
    highlighting: [{ type: Input }],
    closeOnSelect: [{ type: Input }],
    fillOnSelect: [{ type: Input }],
    displayFn: [{ type: Input }],
    itemClicked: [{ type: Output }],
    menuItems: [{ type: ViewChildren, args: [MenuItemDirective,] }],
    searchInputElement: [{ type: ViewChild, args: ['searchInputElement',] }]
};
if (false) {
    /**
     * Values to be filtered in the search input.
     * @type {?}
     */
    ComboboxComponent.prototype.dropdownValues;
    /**
     * Filter function. Accepts an array of objects and a search term as arguments
     * and returns a string. See search input examples for details.
     * @type {?}
     */
    ComboboxComponent.prototype.filterFn;
    /**
     * Whether the search input is disabled. *
     * @type {?}
     */
    ComboboxComponent.prototype.disabled;
    /**
     * Placeholder of the search input. *
     * @type {?}
     */
    ComboboxComponent.prototype.placeholder;
    /**
     * Icon to display in the right-side button.
     * @type {?}
     */
    ComboboxComponent.prototype.glyph;
    /**
     * The template with which to display the individual listed items.
     * Use it by passing an ng-template with implicit content. See examples for more info.
     * @type {?}
     */
    ComboboxComponent.prototype.itemTemplate;
    /**
     * Max height of the popover. Any overflowing elements will be accessible through scrolling.
     * @type {?}
     */
    ComboboxComponent.prototype.maxHeight;
    /**
     * Search function to execute when the Enter key is pressed on the main input.
     * @type {?}
     */
    ComboboxComponent.prototype.searchFunction;
    /**
     * Whether the search input should be displayed in compact mode.
     * @type {?}
     */
    ComboboxComponent.prototype.compact;
    /**
     * Whether the matching string should be highlighted during filtration.
     * @type {?}
     */
    ComboboxComponent.prototype.highlighting;
    /**
     * Whether the popover should close when a user selects a result.
     * @type {?}
     */
    ComboboxComponent.prototype.closeOnSelect;
    /**
     * Whether the input field should be populated with the result picked by the user.
     * @type {?}
     */
    ComboboxComponent.prototype.fillOnSelect;
    /**
     * Display function. Accepts an object of the same type as the
     * items passed to dropdownValues as argument, and outputs a string.
     * An arrow function can be used to access the *this* keyword in the calling component.
     * See search input examples for details.
     * @type {?}
     */
    ComboboxComponent.prototype.displayFn;
    /**
     * Event emitted when an item is clicked. Use *$event* to retrieve it.
     * @type {?}
     */
    ComboboxComponent.prototype.itemClicked;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.menuItems;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.searchInputElement;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.displayedValues;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.isOpen;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.inputTextValue;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    ComboboxComponent.prototype.onDestroy$;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ComboboxComponent.prototype.menuKeyboardService;
}
//# sourceMappingURL=data:application/json;base64,