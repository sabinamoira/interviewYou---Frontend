/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class ModalConfig {
    constructor() {
        /**
         * Aria label for the modal component element.
         */
        this.ariaLabel = null;
        /**
         * Id of the element that labels the modal.
         */
        this.ariaLabelledBy = null;
        /**
         * Id of the element that describes the modal.
         */
        this.ariaDescribedBy = null;
        /**
         * Whether the modal should have a backdrop.
         */
        this.hasBackdrop = true;
        /**
         * Global classes to apply to the backdrop.
         */
        this.backdropClass = '';
        /**
         * Whether clicking on the backdrop should close the modal. Only works if hasBackdrop is true.
         */
        this.backdropClickCloseable = true;
        /**
         * Global classes to apply to the modal panel.
         */
        this.modalPanelClass = '';
        /**
         * Whether the escape key should close the modal.
         */
        this.escKeyCloseable = true;
        /**
         * Whether the modal should be focus trapped.
         */
        this.focusTrapped = true;
        /**
         * The container that the modal is appended to. By default, it is appended to the body.
         */
        this.container = 'body';
    }
}
if (false) {
    /**
     * Id for the modal component. If omitted, a unique one is generated.
     * @type {?}
     */
    ModalConfig.prototype.id;
    /**
     * Width of the modal.
     * @type {?}
     */
    ModalConfig.prototype.width;
    /**
     * Height of the modal.
     * @type {?}
     */
    ModalConfig.prototype.height;
    /**
     * Minimum width of the modal.
     * @type {?}
     */
    ModalConfig.prototype.minWidth;
    /**
     * Minimum height of the modal.
     * @type {?}
     */
    ModalConfig.prototype.minHeight;
    /**
     * Maximum width of the modal.
     * @type {?}
     */
    ModalConfig.prototype.maxWidth;
    /**
     * Maximum height of the modal.
     * @type {?}
     */
    ModalConfig.prototype.maxHeight;
    /**
     * Position of the modal.
     * @type {?}
     */
    ModalConfig.prototype.position;
    /**
     * Aria label for the modal component element.
     * @type {?}
     */
    ModalConfig.prototype.ariaLabel;
    /**
     * Id of the element that labels the modal.
     * @type {?}
     */
    ModalConfig.prototype.ariaLabelledBy;
    /**
     * Id of the element that describes the modal.
     * @type {?}
     */
    ModalConfig.prototype.ariaDescribedBy;
    /**
     * Whether the modal should have a backdrop.
     * @type {?}
     */
    ModalConfig.prototype.hasBackdrop;
    /**
     * Global classes to apply to the backdrop.
     * @type {?}
     */
    ModalConfig.prototype.backdropClass;
    /**
     * Whether clicking on the backdrop should close the modal. Only works if hasBackdrop is true.
     * @type {?}
     */
    ModalConfig.prototype.backdropClickCloseable;
    /**
     * Global classes to apply to the modal panel.
     * @type {?}
     */
    ModalConfig.prototype.modalPanelClass;
    /**
     * Whether the escape key should close the modal.
     * @type {?}
     */
    ModalConfig.prototype.escKeyCloseable;
    /**
     * Whether the modal should be focus trapped.
     * @type {?}
     */
    ModalConfig.prototype.focusTrapped;
    /**
     * The container that the modal is appended to. By default, it is appended to the body.
     * @type {?}
     */
    ModalConfig.prototype.container;
    /**
     * Data to pass along to the content through the ModalRef.
     * @type {?}
     */
    ModalConfig.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZnVuZGFtZW50YWwtbmd4LyIsInNvdXJjZXMiOlsibGliL21vZGFsL21vZGFsLXV0aWxzL21vZGFsLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBS0EsTUFBTSxPQUFPLFdBQVc7SUFBeEI7Ozs7UUEyQkksY0FBUyxHQUFZLElBQUksQ0FBQzs7OztRQUcxQixtQkFBYyxHQUFZLElBQUksQ0FBQzs7OztRQUcvQixvQkFBZSxHQUFZLElBQUksQ0FBQzs7OztRQUdoQyxnQkFBVyxHQUFhLElBQUksQ0FBQzs7OztRQUc3QixrQkFBYSxHQUFZLEVBQUUsQ0FBQzs7OztRQUc1QiwyQkFBc0IsR0FBYSxJQUFJLENBQUM7Ozs7UUFHeEMsb0JBQWUsR0FBWSxFQUFFLENBQUM7Ozs7UUFHOUIsb0JBQWUsR0FBYSxJQUFJLENBQUM7Ozs7UUFHakMsaUJBQVksR0FBYSxJQUFJLENBQUM7Ozs7UUFHOUIsY0FBUyxHQUEwQixNQUFNLENBQUM7SUFJOUMsQ0FBQztDQUFBOzs7Ozs7SUF2REcseUJBQVk7Ozs7O0lBR1osNEJBQWU7Ozs7O0lBR2YsNkJBQWdCOzs7OztJQUdoQiwrQkFBa0I7Ozs7O0lBR2xCLGdDQUFtQjs7Ozs7SUFHbkIsK0JBQWtCOzs7OztJQUdsQixnQ0FBbUI7Ozs7O0lBR25CLCtCQUF5Qjs7Ozs7SUFHekIsZ0NBQTBCOzs7OztJQUcxQixxQ0FBK0I7Ozs7O0lBRy9CLHNDQUFnQzs7Ozs7SUFHaEMsa0NBQTZCOzs7OztJQUc3QixvQ0FBNEI7Ozs7O0lBRzVCLDZDQUF3Qzs7Ozs7SUFHeEMsc0NBQThCOzs7OztJQUc5QixzQ0FBaUM7Ozs7O0lBR2pDLG1DQUE4Qjs7Ozs7SUFHOUIsZ0NBQTBDOzs7OztJQUcxQywyQkFBVyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3Igb3BlbmluZyBhIG1vZGFsIHdpdGggdGhlIE1vZGFsU2VydmljZS5cbiAqL1xuaW1wb3J0IHsgTW9kYWxQb3NpdGlvbiB9IGZyb20gJy4vbW9kYWwtcG9zaXRpb24nO1xuXG5leHBvcnQgY2xhc3MgTW9kYWxDb25maWcge1xuXG4gICAgLyoqIElkIGZvciB0aGUgbW9kYWwgY29tcG9uZW50LiBJZiBvbWl0dGVkLCBhIHVuaXF1ZSBvbmUgaXMgZ2VuZXJhdGVkLiAqL1xuICAgIGlkPzogc3RyaW5nO1xuXG4gICAgLyoqIFdpZHRoIG9mIHRoZSBtb2RhbC4gKi9cbiAgICB3aWR0aD86IHN0cmluZztcblxuICAgIC8qKiBIZWlnaHQgb2YgdGhlIG1vZGFsLiAqL1xuICAgIGhlaWdodD86IHN0cmluZztcblxuICAgIC8qKiBNaW5pbXVtIHdpZHRoIG9mIHRoZSBtb2RhbC4gKi9cbiAgICBtaW5XaWR0aD86IHN0cmluZztcblxuICAgIC8qKiBNaW5pbXVtIGhlaWdodCBvZiB0aGUgbW9kYWwuICovXG4gICAgbWluSGVpZ2h0Pzogc3RyaW5nO1xuXG4gICAgLyoqIE1heGltdW0gd2lkdGggb2YgdGhlIG1vZGFsLiAqL1xuICAgIG1heFdpZHRoPzogc3RyaW5nO1xuXG4gICAgLyoqIE1heGltdW0gaGVpZ2h0IG9mIHRoZSBtb2RhbC4gKi9cbiAgICBtYXhIZWlnaHQ/OiBzdHJpbmc7XG5cbiAgICAvKiogUG9zaXRpb24gb2YgdGhlIG1vZGFsLiAqL1xuICAgIHBvc2l0aW9uPzogTW9kYWxQb3NpdGlvbjtcblxuICAgIC8qKiBBcmlhIGxhYmVsIGZvciB0aGUgbW9kYWwgY29tcG9uZW50IGVsZW1lbnQuICovXG4gICAgYXJpYUxhYmVsPzogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiBJZCBvZiB0aGUgZWxlbWVudCB0aGF0IGxhYmVscyB0aGUgbW9kYWwuICovXG4gICAgYXJpYUxhYmVsbGVkQnk/OiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIElkIG9mIHRoZSBlbGVtZW50IHRoYXQgZGVzY3JpYmVzIHRoZSBtb2RhbC4gKi9cbiAgICBhcmlhRGVzY3JpYmVkQnk/OiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIG1vZGFsIHNob3VsZCBoYXZlIGEgYmFja2Ryb3AuICovXG4gICAgaGFzQmFja2Ryb3A/OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBHbG9iYWwgY2xhc3NlcyB0byBhcHBseSB0byB0aGUgYmFja2Ryb3AuICovXG4gICAgYmFja2Ryb3BDbGFzcz86IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIFdoZXRoZXIgY2xpY2tpbmcgb24gdGhlIGJhY2tkcm9wIHNob3VsZCBjbG9zZSB0aGUgbW9kYWwuIE9ubHkgd29ya3MgaWYgaGFzQmFja2Ryb3AgaXMgdHJ1ZS4gKi9cbiAgICBiYWNrZHJvcENsaWNrQ2xvc2VhYmxlPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogR2xvYmFsIGNsYXNzZXMgdG8gYXBwbHkgdG8gdGhlIG1vZGFsIHBhbmVsLiAqL1xuICAgIG1vZGFsUGFuZWxDbGFzcz86IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGVzY2FwZSBrZXkgc2hvdWxkIGNsb3NlIHRoZSBtb2RhbC4gKi9cbiAgICBlc2NLZXlDbG9zZWFibGU/OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBtb2RhbCBzaG91bGQgYmUgZm9jdXMgdHJhcHBlZC4gKi9cbiAgICBmb2N1c1RyYXBwZWQ/OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBUaGUgY29udGFpbmVyIHRoYXQgdGhlIG1vZGFsIGlzIGFwcGVuZGVkIHRvLiBCeSBkZWZhdWx0LCBpdCBpcyBhcHBlbmRlZCB0byB0aGUgYm9keS4gKi9cbiAgICBjb250YWluZXI/OiBIVE1MRWxlbWVudCB8ICdib2R5JyA9ICdib2R5JztcblxuICAgIC8qKiBEYXRhIHRvIHBhc3MgYWxvbmcgdG8gdGhlIGNvbnRlbnQgdGhyb3VnaCB0aGUgTW9kYWxSZWYuICovXG4gICAgZGF0YT86IGFueTtcbn1cbiJdfQ==