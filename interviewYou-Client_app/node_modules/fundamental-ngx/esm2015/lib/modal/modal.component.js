/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, HostListener, Optional, TemplateRef, Type, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { ModalRef } from './modal-utils/modal-ref';
import { modalFadeNgIf } from './modal-utils/modal-animations';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
import focusTrap from 'focus-trap';
export class ModalComponent extends AbstractFdNgxClass {
    /**
     * @param {?} elRef
     * @param {?} componentFactoryResolver
     * @param {?} cdRef
     * @param {?} modalRef
     */
    constructor(elRef, componentFactoryResolver, cdRef, modalRef) {
        super(elRef);
        this.elRef = elRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.cdRef = cdRef;
        this.modalRef = modalRef;
        this.escKeyCloseable = true;
        this.focusTrapped = true;
        this.ariaLabelledBy = null;
        this.ariaLabel = null;
        this.ariaDescribedBy = null;
        this.backdropClickCloseable = true;
        this.hasBackdrop = true;
        this.modalPanelClass = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._setProperties();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.focusTrap) {
            this.focusTrap.deactivate();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.childComponentType) {
            if (this.childComponentType instanceof Type) {
                this.loadFromComponent(this.childComponentType);
            }
            else if (this.childComponentType instanceof TemplateRef) {
                this.loadFromTemplate(this.childComponentType);
            }
        }
        if (this.focusTrapped) {
            try {
                this.focusTrap = focusTrap(this.elRef.nativeElement, {
                    clickOutsideDeactivates: this.backdropClickCloseable && this.hasBackdrop,
                    escapeDeactivates: false,
                    initialFocus: this.elRef.nativeElement
                });
                this.focusTrap.activate();
            }
            catch (e) {
                console.warn('Attempted to focus trap the modal, but no tabbable elements were found.');
            }
        }
        this.cdRef.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeModalEsc(event) {
        if (this.escKeyCloseable && event.key === 'Escape') {
            this.modalRef.dismiss('escape');
        }
    }
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    loadFromComponent(content) {
        this.containerRef.clear();
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(content);
        this.componentRef = this.containerRef.createComponent(componentFactory);
    }
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    loadFromTemplate(content) {
        this.containerRef.clear();
        /** @type {?} */
        const context = {
            $implicit: this.modalRef
        };
        this.componentRef = this.containerRef.createEmbeddedView(content, context);
    }
    /**
     * @return {?}
     */
    _setProperties() {
        if (this.modalPanelClass) {
            this._addClassToElement(this.modalPanelClass);
        }
    }
}
ModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-modal',
                template: "<div class=\"fd-modal__content fd-modal__content--overrides\" role=\"document\">\n    <ng-content select=\"fd-modal-header\"></ng-content>\n    <ng-content select=\"fd-modal-body\"></ng-content>\n    <ng-content select=\"fd-modal-footer\"></ng-content>\n    <ng-container #vc></ng-container>\n    <ng-content></ng-content>\n</div>\n",
                host: {
                    'role': 'dialog',
                    '[class.fd-modal]': 'true',
                    '[class.fd-modal-custom]': 'true',
                    '[attr.aria-labelledby]': 'ariaLabelledBy',
                    '[attr.aria-label]': 'ariaLabel',
                    '[attr.aria-describedby]': 'ariaDescribedBy',
                    '[attr.aria-modal]': 'true',
                    '[attr.id]': 'id',
                    'tabindex': '-1',
                    '[@modal-fade]': ''
                },
                animations: [
                    modalFadeNgIf
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".fd-modal-custom{max-width:none;z-index:1000;position:absolute}.fd-modal-custom:focus{outline:0}.fd-modal__content--overrides{height:100%;width:100%;min-height:inherit;min-width:inherit;max-height:inherit;max-width:inherit;display:flex;flex-direction:column}"]
            }] }
];
/** @nocollapse */
ModalComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: ModalRef, decorators: [{ type: Optional }] }
];
ModalComponent.propDecorators = {
    containerRef: [{ type: ViewChild, args: ['vc', { read: ViewContainerRef },] }],
    closeModalEsc: [{ type: HostListener, args: ['keyup', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ModalComponent.prototype.containerRef;
    /** @type {?} */
    ModalComponent.prototype.id;
    /** @type {?} */
    ModalComponent.prototype.escKeyCloseable;
    /** @type {?} */
    ModalComponent.prototype.focusTrapped;
    /** @type {?} */
    ModalComponent.prototype.ariaLabelledBy;
    /** @type {?} */
    ModalComponent.prototype.ariaLabel;
    /** @type {?} */
    ModalComponent.prototype.ariaDescribedBy;
    /** @type {?} */
    ModalComponent.prototype.childComponentType;
    /** @type {?} */
    ModalComponent.prototype.backdropClickCloseable;
    /** @type {?} */
    ModalComponent.prototype.hasBackdrop;
    /** @type {?} */
    ModalComponent.prototype.modalPanelClass;
    /**
     * @type {?}
     * @private
     */
    ModalComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    ModalComponent.prototype.focusTrap;
    /**
     * @type {?}
     * @private
     */
    ModalComponent.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    ModalComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    ModalComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    ModalComponent.prototype.modalRef;
}
//# sourceMappingURL=data:application/json;base64,