/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';
import { FormStyle, getLocaleDayNames, getLocaleMonthNames, TranslationWidth } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @param {?} locale
 * @return {?}
 */
export function CALENDAR_I18N_FACTORY(locale) {
    return new CalendarI18nDefault(locale);
}
/**
 * Abstract class which defines the behaviour calendar internationalization. See calendar examples for usage details.
 * @abstract
 */
export class CalendarI18n {
}
CalendarI18n.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useFactory: CALENDAR_I18N_FACTORY,
                deps: [LOCALE_ID]
            },] }
];
/** @nocollapse */ CalendarI18n.ngInjectableDef = i0.defineInjectable({ factory: function CalendarI18n_Factory() { return CALENDAR_I18N_FACTORY(i0.inject(i0.LOCALE_ID)); }, token: CalendarI18n, providedIn: "root" });
if (false) {
    /**
     * Aria label for a specific date.
     * @abstract
     * @param {?} date Native date object to use for the label.
     * @return {?}
     */
    CalendarI18n.prototype.getDayAriaLabel = function (date) { };
    /**
     * Get all short week day names, such as Mo for Monday.
     * @abstract
     * @return {?}
     */
    CalendarI18n.prototype.getAllShortWeekdays = function () { };
    /**
     * Get all short month names, such as Nov for November.
     * @abstract
     * @return {?}
     */
    CalendarI18n.prototype.getAllShortMonthNames = function () { };
    /**
     * Get all full month names.
     * @abstract
     * @return {?}
     */
    CalendarI18n.prototype.getAllFullMonthNames = function () { };
}
/**
 * Default implementation of the CalendarI18n service. It will get dates from the application locale if it is present.
 */
export class CalendarI18nDefault extends CalendarI18n {
    /**
     * Constructor takes in a locale_id and gets the appropriate data from Angular.
     * @param {?} locale
     */
    constructor(locale) {
        super();
        this.locale = locale;
        this.weekdaysFallback = [
            'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
        ];
        this.monthsFullFallback = [
            'January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', 'December'
        ];
        this.monthsShortFallback = [
            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
            'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
        ];
        if (locale) {
            /** @type {?} */
            const sundayStartWeekdays = getLocaleDayNames(locale, FormStyle.Standalone, TranslationWidth.Short);
            this.weekdaysShort = sundayStartWeekdays.map((/**
             * @param {?} day
             * @param {?} index
             * @return {?}
             */
            (day, index) => sundayStartWeekdays[index % 7]));
            this.monthsShort = getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Abbreviated);
            this.monthsFull = getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Wide);
        }
        this.checkForFallback();
    }
    /**
     * Aria label for a specific date. Default implementation produces the label: {Date} {Month} {Year}.
     *
     * @param {?} date Native date object to use for the label.
     * @return {?}
     */
    getDayAriaLabel(date) {
        return date.getDate() + ' ' + this.monthsFull[date.getMonth()] + ' ' + date.getFullYear();
    }
    /**
     * Get all full month names.
     * @return {?}
     */
    getAllFullMonthNames() {
        return this.monthsFull;
    }
    /**
     * Get all short month names, such as Nov for November.
     * @return {?}
     */
    getAllShortMonthNames() {
        return this.monthsShort;
    }
    /**
     * Get all short week day names, such as Mo for Monday.
     * @return {?}
     */
    getAllShortWeekdays() {
        return this.weekdaysShort;
    }
    /**
     * Checks if a fallback is needed. Older versions of Angular may need this.
     * @private
     * @return {?}
     */
    checkForFallback() {
        if (!this.weekdaysShort || this.weekdaysShort.length === 0) {
            this.weekdaysShort = this.weekdaysFallback;
        }
        if (!this.monthsShort || this.monthsShort.length === 0) {
            this.monthsShort = this.monthsShortFallback;
        }
        if (!this.monthsFull || this.monthsFull.length === 0) {
            this.monthsFull = this.monthsFullFallback;
        }
    }
}
CalendarI18nDefault.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CalendarI18nDefault.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.weekdaysShort;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.monthsShort;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.monthsFull;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.weekdaysFallback;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.monthsFullFallback;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.monthsShortFallback;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.locale;
}
//# sourceMappingURL=data:application/json;base64,