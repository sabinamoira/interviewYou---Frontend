/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, ViewChildren, ViewEncapsulation } from '@angular/core';
import { TabPanelComponent } from './tab/tab-panel.component';
import { TabsService } from './tabs.service';
/**
 * Represents a list of tab-panels.
 */
export class TabListComponent {
    /**
     * @param {?} tabsService
     */
    constructor(tabsService) {
        this.tabsService = tabsService;
        /**
         * Index of the selected tab panel.
         */
        this.selectedIndex = 0;
        /**
         * Event emitted when the selected panel changes.
         */
        this.selectedIndexChange = new EventEmitter();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.selectTab(this.selectedIndex);
        }));
        this._tabSelectSubscription = this.tabsService.tabSelected.subscribe((/**
         * @param {?} index
         * @return {?}
         */
        index => {
            if (index !== this.selectedIndex) {
                this.selectTab(index);
            }
        }));
        this._tabsSubscription = this.panelTabs.changes.subscribe((/**
         * @return {?}
         */
        () => {
            if (!this.isIndexInRange() || this.isTabContentEmpty()) {
                this.resetTabHook();
            }
        }));
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this._tabsSubscription.unsubscribe();
        this._tabSelectSubscription.unsubscribe();
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.selectedIndex) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.selectTab(changes.selectedIndex.currentValue);
            }));
        }
    }
    /**
     * Function to select a new tab from an index.
     * @param {?} tabIndex Index of the tab to select.
     * @return {?}
     */
    selectTab(tabIndex) {
        if (this.isIndexInRange() && this.isTargetTabEnabled(tabIndex)) {
            this.panelTabs.forEach((/**
             * @param {?} tab
             * @param {?} index
             * @return {?}
             */
            (tab, index) => {
                tab.expanded = index === tabIndex;
            }));
            this.selectedIndex = tabIndex;
            this.selectedIndexChange.emit(tabIndex);
        }
    }
    /**
     * @hidden
     * @param {?} tabIndex
     * @return {?}
     */
    tabHeaderClickHandler(tabIndex) {
        if (this.selectedIndex !== tabIndex) {
            this.selectTab(tabIndex);
        }
    }
    /**
     * @hidden
     * @param {?} index
     * @param {?} event
     * @return {?}
     */
    tabHeaderKeyHandler(index, event) {
        this.tabsService.tabHeaderKeyHandler(index, event, this.tabLinks.map((/**
         * @param {?} tab
         * @return {?}
         */
        tab => tab.nativeElement)));
    }
    /**
     * @private
     * @return {?}
     */
    isIndexInRange() {
        return this.panelTabs && this.panelTabs.length > 0 && this.selectedIndex < this.panelTabs.length;
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    isTargetTabEnabled(index) {
        return !this.panelTabs.toArray()[index].disabled;
    }
    /**
     * @private
     * @return {?}
     */
    isTabContentEmpty() {
        /** @type {?} */
        let result = true;
        this.panelTabs.forEach((/**
         * @param {?} tab
         * @return {?}
         */
        tab => {
            if (tab.expanded) {
                result = false;
            }
        }));
        return result;
    }
    /**
     * @private
     * @return {?}
     */
    resetTabHook() {
        this.selectedIndex = 0;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.selectTab(this.selectedIndex);
        }));
    }
}
TabListComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-tab-list',
                template: "<ul class=\"fd-tabs\"\n    role=\"tablist\">\n    <li fd-tab-item\n        *ngFor=\"let tab of panelTabs.toArray(); let i = index;\">\n        <a #tabLink\n           fd-tab-link\n           [disabled]=\"tab.disabled\"\n           [active]=\"tab.expanded\"\n           [attr.tabindex]=\"tab.disabled ? -1 : 0\"\n           [attr.aria-controls]=\"tab.id\"\n           [attr.aria-label]=\"tab.ariaLabel || null\"\n           [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledBy) ? tab.ariaLabelledBy : null\"\n           (keydown)=\"tabHeaderKeyHandler(i, $event)\"\n           (click)=\"tabHeaderClickHandler(i)\">\n\n            <ng-container *ngIf=\"tab.titleTemplate\">\n                <ng-container [fd-tab-load-title]=\"tab.titleTemplate\"></ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"!tab.titleTemplate\">{{ tab.title }}</ng-container>\n        </a>\n    </li>\n</ul>\n<ng-content select=\"fd-tab\"></ng-content>\n<ng-content></ng-content>\n",
                host: {
                    class: 'fd-tabs-custom'
                },
                encapsulation: ViewEncapsulation.None,
                providers: [TabsService],
                styles: [".fd-tabs-custom{display:block}"]
            }] }
];
/** @nocollapse */
TabListComponent.ctorParameters = () => [
    { type: TabsService }
];
TabListComponent.propDecorators = {
    panelTabs: [{ type: ContentChildren, args: [TabPanelComponent,] }],
    tabLinks: [{ type: ViewChildren, args: ['tabLink',] }],
    selectedIndex: [{ type: Input }],
    selectedIndexChange: [{ type: Output }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    TabListComponent.prototype.panelTabs;
    /**
     * @hidden
     * @type {?}
     */
    TabListComponent.prototype.tabLinks;
    /**
     * Index of the selected tab panel.
     * @type {?}
     */
    TabListComponent.prototype.selectedIndex;
    /**
     * Event emitted when the selected panel changes.
     * @type {?}
     */
    TabListComponent.prototype.selectedIndexChange;
    /**
     * @type {?}
     * @private
     */
    TabListComponent.prototype._tabsSubscription;
    /**
     * @type {?}
     * @private
     */
    TabListComponent.prototype._tabSelectSubscription;
    /**
     * @type {?}
     * @private
     */
    TabListComponent.prototype.tabsService;
}
//# sourceMappingURL=data:application/json;base64,